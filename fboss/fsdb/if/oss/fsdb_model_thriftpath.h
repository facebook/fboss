// @generated
// DO NOT EDIT THIS FILE MANUALLY!
// This file is synced by script at fboss/fsdb/if/oss/sync_model_thriftpath.sh

// generated by fboss/thriftpath_plugin/facebook/codegen.cpp

// clang-format off
// @nolint

#pragma once

#include <fatal/container/tuple.h>

#include <fboss/thriftpath_plugin/Path.h>
#include <folly/Unit.h>
#include <fboss/fsdb/if/oss/gen-cpp2/fsdb_model_fatal_types.h>
#include <fboss/fsdb/if/oss/gen-cpp2/fsdb_model_types.h>
#include <fboss/agent/gen-cpp2/agent_config_fatal_types.h>
#include <fboss/agent/gen-cpp2/agent_config_types.h>
#include <fboss/agent/gen-cpp2/agent_stats_fatal_types.h>
#include <fboss/agent/gen-cpp2/agent_stats_types.h>
#include <fboss/agent/gen-cpp2/switch_state_fatal_types.h>
#include <fboss/agent/gen-cpp2/switch_state_types.h>
#include <fboss/agent/gen-cpp2/switch_reachability_fatal_types.h>
#include <fboss/agent/gen-cpp2/switch_reachability_types.h>
#include <fboss/qsfp_service/if/gen-cpp2/qsfp_state_fatal_types.h>
#include <fboss/qsfp_service/if/gen-cpp2/qsfp_state_types.h>
#include <fboss/qsfp_service/if/gen-cpp2/qsfp_stats_fatal_types.h>
#include <fboss/qsfp_service/if/gen-cpp2/qsfp_stats_types.h>
#include <fboss/fsdb/if/gen-cpp2/fsdb_common_fatal_types.h>
#include <fboss/fsdb/if/gen-cpp2/fsdb_common_types.h>
#include <fboss/platform/sensor_service/gen-cpp2/sensor_service_stats_fatal_types.h>
#include <fboss/platform/sensor_service/gen-cpp2/sensor_service_stats_types.h>


namespace thriftpath {


template<typename Parent>
class ChildThriftPath<::facebook::fboss::fsdb::FsdbOperStateRoot, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::fsdb::FsdbOperStateRoot>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::fsdb::FsdbOperStateRoot>,
   Parent>;
  using strings = ::facebook::fboss::fsdb::fsdb_model_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::agent, ChildThriftPath<::facebook::fboss::fsdb::AgentData, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::qsfp_service, ChildThriftPath<::facebook::fboss::state::QsfpServiceData, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::fsdb::AgentData, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::state::QsfpServiceData, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::agent, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::qsfp_service, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(agent, 1);
    STRUCT_CHILD_GETTERS(qsfp_service, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return agent(); }
    else if constexpr (__id == 4) { return qsfp_service(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::prbs::PrbsPolynomial>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::prbs::PrbsPolynomial>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::list<::apache::thrift::type::enum_t<::facebook::fboss::prbs::PrbsPolynomial>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::prbs::PrbsPolynomial>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::list<::apache::thrift::type::enum_t<::facebook::fboss::prbs::PrbsPolynomial>>,
   Parent>;
  using Child = Path<::facebook::fboss::prbs::PrbsPolynomial, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::prbs::PrbsPolynomial>, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PcsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PcsState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PcsState>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PcsState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PcsState>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::pcsRxStatusLive, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::pcsRxStatusLatched, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::rsFecState, ChildThriftPath<::facebook::fboss::phy::RsFecState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::phy::RsFecState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::pcsRxStatusLive, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::pcsRxStatusLatched, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::rsFecState, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(pcsRxStatusLive, 1);
    STRUCT_CHILD_GETTERS(pcsRxStatusLatched, 2);
    STRUCT_CHILD_GETTERS(rsFecState, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return pcsRxStatusLive(); }
    else if constexpr (__id == 2) { return pcsRxStatusLatched(); }
    else if constexpr (__id == 3) { return rsFecState(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PhySideState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PhySideState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PhySideState>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PhySideState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PhySideState>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::side, Child<::facebook::fboss::phy::Side, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::phy::Side>>>,
std::pair<strings::pcs, ChildThriftPath<::facebook::fboss::phy::PcsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::pmd, ChildThriftPath<::facebook::fboss::phy::PmdState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::rs, ChildThriftPath<::facebook::fboss::phy::RsInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::interfaceType, Child<::facebook::fboss::phy::InterfaceType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::phy::InterfaceType>>>,
std::pair<strings::medium, Child<::facebook::fboss::TransmitterTechnology, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::TransmitterTechnology>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::phy::Side, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::phy::Side>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::phy::PcsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::phy::PmdState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::phy::RsInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::facebook::fboss::phy::InterfaceType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::phy::InterfaceType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::facebook::fboss::TransmitterTechnology, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::TransmitterTechnology>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::side, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::pcs, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::pmd, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::rs, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::interfaceType, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::medium, std::integral_constant<apache::thrift::field_id_t, 6>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(side, 1);
    STRUCT_CHILD_GETTERS(pcs, 2);
    STRUCT_CHILD_GETTERS(pmd, 3);
    STRUCT_CHILD_GETTERS(rs, 4);
    STRUCT_CHILD_GETTERS(interfaceType, 5);
    STRUCT_CHILD_GETTERS(medium, 6);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return side(); }
    else if constexpr (__id == 2) { return pcs(); }
    else if constexpr (__id == 3) { return pmd(); }
    else if constexpr (__id == 4) { return rs(); }
    else if constexpr (__id == 5) { return interfaceType(); }
    else if constexpr (__id == 6) { return medium(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PhyFwVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PhyFwVersion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PhyFwVersion>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PhyFwVersion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PhyFwVersion>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::version, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::crc, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::versionStr, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dateCode, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::minorVersion, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::version, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::crc, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::versionStr, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::dateCode, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::minorVersion, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(version, 1);
    STRUCT_CHILD_GETTERS(crc, 2);
    STRUCT_CHILD_GETTERS(versionStr, 3);
    STRUCT_CHILD_GETTERS(dateCode, 4);
    STRUCT_CHILD_GETTERS(minorVersion, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return version(); }
    else if constexpr (__id == 2) { return crc(); }
    else if constexpr (__id == 3) { return versionStr(); }
    else if constexpr (__id == 4) { return dateCode(); }
    else if constexpr (__id == 5) { return minorVersion(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::RxEqualizerSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::RxEqualizerSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::RxEqualizerSettings>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::RxEqualizerSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::RxEqualizerSettings>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::preCursor, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::postCursor, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::mainAmplitude, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::preCursor, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::postCursor, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::mainAmplitude, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(preCursor, 1);
    STRUCT_CHILD_GETTERS(postCursor, 2);
    STRUCT_CHILD_GETTERS(mainAmplitude, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return preCursor(); }
    else if constexpr (__id == 2) { return postCursor(); }
    else if constexpr (__id == 3) { return mainAmplitude(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::Thresholds, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::Thresholds,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::Thresholds>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::Thresholds,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::Thresholds>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::low, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::high, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::low, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::high, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(low, 1);
    STRUCT_CHILD_GETTERS(high, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return low(); }
    else if constexpr (__id == 2) { return high(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<std::unordered_map<std::string, facebook::fboss::TransceiverAttributes>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   std::unordered_map<std::string, facebook::fboss::TransceiverAttributes>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::cpp_type<std::unordered_map<std::string, facebook::fboss::TransceiverAttributes>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::TransceiverAttributes>>>,
   Parent> {
 public:
  using Self = Path<
   std::unordered_map<std::string, facebook::fboss::TransceiverAttributes>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::cpp_type<std::unordered_map<std::string, facebook::fboss::TransceiverAttributes>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::TransceiverAttributes>>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::TransceiverAttributes, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::RsFecState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::RsFecState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::RsFecState>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::RsFecState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::RsFecState>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::lanes, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::RsFecLaneState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::RsFecLaneState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::lanes, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(lanes, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return lanes(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::RsFecLaneState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::phy::RsFecLaneState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::phy::RsFecLaneState>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::phy::RsFecLaneState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::phy::RsFecLaneState>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::phy::RsFecLaneState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::ModuleStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::ModuleStatus,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::ModuleStatus>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::ModuleStatus,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::ModuleStatus>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::dataNotReady, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::interruptL, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::cmisModuleState, Child<::facebook::fboss::CmisModuleState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::CmisModuleState>>>,
std::pair<strings::fwStatus, ChildThriftPath<::facebook::fboss::FirmwareStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::cmisStateChanged, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::CmisModuleState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::CmisModuleState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::FirmwareStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::dataNotReady, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::interruptL, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::cmisModuleState, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::fwStatus, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::cmisStateChanged, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(dataNotReady, 1);
    STRUCT_CHILD_GETTERS(interruptL, 2);
    STRUCT_CHILD_GETTERS(cmisModuleState, 3);
    STRUCT_CHILD_GETTERS(fwStatus, 4);
    STRUCT_CHILD_GETTERS(cmisStateChanged, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return dataNotReady(); }
    else if constexpr (__id == 2) { return interruptL(); }
    else if constexpr (__id == 3) { return cmisModuleState(); }
    else if constexpr (__id == 4) { return fwStatus(); }
    else if constexpr (__id == 5) { return cmisStateChanged(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HostLaneSignals, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::HostLaneSignals,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HostLaneSignals>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HostLaneSignals,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HostLaneSignals>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::lane, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::dataPathDeInit, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::cmisLaneState, Child<::facebook::fboss::CmisLaneState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::CmisLaneState>>>,
std::pair<strings::txLos, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::txLol, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::txAdaptEqFault, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::CmisLaneState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::CmisLaneState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::lane, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::dataPathDeInit, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::cmisLaneState, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::txLos, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::txLol, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::txAdaptEqFault, std::integral_constant<apache::thrift::field_id_t, 6>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(lane, 1);
    STRUCT_CHILD_GETTERS(dataPathDeInit, 2);
    STRUCT_CHILD_GETTERS(cmisLaneState, 3);
    STRUCT_CHILD_GETTERS(txLos, 4);
    STRUCT_CHILD_GETTERS(txLol, 5);
    STRUCT_CHILD_GETTERS(txAdaptEqFault, 6);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return lane(); }
    else if constexpr (__id == 2) { return dataPathDeInit(); }
    else if constexpr (__id == 3) { return cmisLaneState(); }
    else if constexpr (__id == 4) { return txLos(); }
    else if constexpr (__id == 5) { return txLol(); }
    else if constexpr (__id == 6) { return txAdaptEqFault(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::HostLaneSignals>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::HostLaneSignals>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::HostLaneSignals>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::HostLaneSignals>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::HostLaneSignals>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HostLaneSignals, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::DiagsCapability, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::DiagsCapability,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::DiagsCapability>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::DiagsCapability,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::DiagsCapability>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::diagnostics, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::vdm, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::cdb, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::prbsLine, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::prbsSystem, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::loopbackLine, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::loopbackSystem, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::prbsSystemCapabilities, ChildThriftPath<::std::vector<::facebook::fboss::prbs::PrbsPolynomial>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::prbsLineCapabilities, ChildThriftPath<::std::vector<::facebook::fboss::prbs::PrbsPolynomial>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::txOutputControl, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::rxOutputControl, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::snrLine, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::snrSystem, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::cdbFirmwareUpgrade, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::cdbFirmwareReadback, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::cdbEplMemorySupported, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::cdbSymbolErrorHistogramLine, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::cdbSymbolErrorHistogramSystem, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::cdbRxErrorHistogramLine, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::cdbRxErrorHistogramSystem, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::std::vector<::facebook::fboss::prbs::PrbsPolynomial>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::std::vector<::facebook::fboss::prbs::PrbsPolynomial>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::diagnostics, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::vdm, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::cdb, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::prbsLine, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::prbsSystem, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::loopbackLine, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::loopbackSystem, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::prbsSystemCapabilities, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::prbsLineCapabilities, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::txOutputControl, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::rxOutputControl, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::snrLine, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::snrSystem, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::cdbFirmwareUpgrade, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::cdbFirmwareReadback, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::cdbEplMemorySupported, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::cdbSymbolErrorHistogramLine, std::integral_constant<apache::thrift::field_id_t, 17>>,
std::pair<strings::cdbSymbolErrorHistogramSystem, std::integral_constant<apache::thrift::field_id_t, 18>>,
std::pair<strings::cdbRxErrorHistogramLine, std::integral_constant<apache::thrift::field_id_t, 19>>,
std::pair<strings::cdbRxErrorHistogramSystem, std::integral_constant<apache::thrift::field_id_t, 20>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(diagnostics, 1);
    STRUCT_CHILD_GETTERS(vdm, 2);
    STRUCT_CHILD_GETTERS(cdb, 3);
    STRUCT_CHILD_GETTERS(prbsLine, 4);
    STRUCT_CHILD_GETTERS(prbsSystem, 5);
    STRUCT_CHILD_GETTERS(loopbackLine, 6);
    STRUCT_CHILD_GETTERS(loopbackSystem, 7);
    STRUCT_CHILD_GETTERS(prbsSystemCapabilities, 8);
    STRUCT_CHILD_GETTERS(prbsLineCapabilities, 9);
    STRUCT_CHILD_GETTERS(txOutputControl, 10);
    STRUCT_CHILD_GETTERS(rxOutputControl, 11);
    STRUCT_CHILD_GETTERS(snrLine, 12);
    STRUCT_CHILD_GETTERS(snrSystem, 13);
    STRUCT_CHILD_GETTERS(cdbFirmwareUpgrade, 14);
    STRUCT_CHILD_GETTERS(cdbFirmwareReadback, 15);
    STRUCT_CHILD_GETTERS(cdbEplMemorySupported, 16);
    STRUCT_CHILD_GETTERS(cdbSymbolErrorHistogramLine, 17);
    STRUCT_CHILD_GETTERS(cdbSymbolErrorHistogramSystem, 18);
    STRUCT_CHILD_GETTERS(cdbRxErrorHistogramLine, 19);
    STRUCT_CHILD_GETTERS(cdbRxErrorHistogramSystem, 20);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return diagnostics(); }
    else if constexpr (__id == 2) { return vdm(); }
    else if constexpr (__id == 3) { return cdb(); }
    else if constexpr (__id == 4) { return prbsLine(); }
    else if constexpr (__id == 5) { return prbsSystem(); }
    else if constexpr (__id == 6) { return loopbackLine(); }
    else if constexpr (__id == 7) { return loopbackSystem(); }
    else if constexpr (__id == 8) { return prbsSystemCapabilities(); }
    else if constexpr (__id == 9) { return prbsLineCapabilities(); }
    else if constexpr (__id == 10) { return txOutputControl(); }
    else if constexpr (__id == 11) { return rxOutputControl(); }
    else if constexpr (__id == 12) { return snrLine(); }
    else if constexpr (__id == 13) { return snrSystem(); }
    else if constexpr (__id == 14) { return cdbFirmwareUpgrade(); }
    else if constexpr (__id == 15) { return cdbFirmwareReadback(); }
    else if constexpr (__id == 16) { return cdbEplMemorySupported(); }
    else if constexpr (__id == 17) { return cdbSymbolErrorHistogramLine(); }
    else if constexpr (__id == 18) { return cdbSymbolErrorHistogramSystem(); }
    else if constexpr (__id == 19) { return cdbRxErrorHistogramLine(); }
    else if constexpr (__id == 20) { return cdbRxErrorHistogramSystem(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::TransceiverOverrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::TransceiverOverrides,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   ::apache::thrift::type::union_t<::facebook::fboss::cfg::TransceiverOverrides>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::TransceiverOverrides,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   ::apache::thrift::type::union_t<::facebook::fboss::cfg::TransceiverOverrides>,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::sff, ChildThriftPath<::facebook::fboss::cfg::Sff8636Overrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::cmis, ChildThriftPath<::facebook::fboss::cfg::CmisOverrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::Sff8636Overrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::CmisOverrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::sff, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::cmis, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(sff, 1);
    STRUCT_CHILD_GETTERS(cmis, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return sff(); }
    else if constexpr (__id == 2) { return cmis(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Firmware, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Firmware,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Firmware>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Firmware,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Firmware>,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::versions, ChildThriftPath<::std::vector<::facebook::fboss::cfg::FirmwareVersion>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::FirmwareVersion>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::versions, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(versions, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return versions(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QsfpSdkVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QsfpSdkVersion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::QsfpSdkVersion>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QsfpSdkVersion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::QsfpSdkVersion>,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::version, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::version, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(version, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 2) { return version(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::TransceiverSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::TransceiverSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::TransceiverSettings>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::TransceiverSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::TransceiverSettings>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::cdrTx, Child<::facebook::fboss::FeatureState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::FeatureState>>>,
std::pair<strings::cdrRx, Child<::facebook::fboss::FeatureState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::FeatureState>>>,
std::pair<strings::rateSelect, Child<::facebook::fboss::RateSelectState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::RateSelectState>>>,
std::pair<strings::powerMeasurement, Child<::facebook::fboss::FeatureState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::FeatureState>>>,
std::pair<strings::powerControl, Child<::facebook::fboss::PowerControlState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::PowerControlState>>>,
std::pair<strings::rateSelectSetting, Child<::facebook::fboss::RateSelectSetting, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::RateSelectSetting>>>,
std::pair<strings::mediaLaneSettings, ChildThriftPath<::std::vector<::facebook::fboss::MediaLaneSettings>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::hostLaneSettings, ChildThriftPath<::std::vector<::facebook::fboss::HostLaneSettings>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::mediaInterface, ChildThriftPath<::std::vector<::facebook::fboss::MediaInterfaceId>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::FeatureState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::FeatureState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::FeatureState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::FeatureState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::RateSelectState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::RateSelectState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::FeatureState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::FeatureState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::facebook::fboss::PowerControlState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::PowerControlState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::facebook::fboss::RateSelectSetting, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::RateSelectSetting>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::vector<::facebook::fboss::MediaLaneSettings>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::std::vector<::facebook::fboss::HostLaneSettings>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::std::vector<::facebook::fboss::MediaInterfaceId>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::cdrTx, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::cdrRx, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::rateSelect, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::powerMeasurement, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::powerControl, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::rateSelectSetting, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::mediaLaneSettings, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::hostLaneSettings, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::mediaInterface, std::integral_constant<apache::thrift::field_id_t, 9>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(cdrTx, 1);
    STRUCT_CHILD_GETTERS(cdrRx, 2);
    STRUCT_CHILD_GETTERS(rateSelect, 3);
    STRUCT_CHILD_GETTERS(powerMeasurement, 4);
    STRUCT_CHILD_GETTERS(powerControl, 5);
    STRUCT_CHILD_GETTERS(rateSelectSetting, 6);
    STRUCT_CHILD_GETTERS(mediaLaneSettings, 7);
    STRUCT_CHILD_GETTERS(hostLaneSettings, 8);
    STRUCT_CHILD_GETTERS(mediaInterface, 9);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return cdrTx(); }
    else if constexpr (__id == 2) { return cdrRx(); }
    else if constexpr (__id == 3) { return rateSelect(); }
    else if constexpr (__id == 4) { return powerMeasurement(); }
    else if constexpr (__id == 5) { return powerControl(); }
    else if constexpr (__id == 6) { return rateSelectSetting(); }
    else if constexpr (__id == 7) { return mediaLaneSettings(); }
    else if constexpr (__id == 8) { return hostLaneSettings(); }
    else if constexpr (__id == 9) { return mediaInterface(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::Vendor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::Vendor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::Vendor>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::Vendor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::Vendor>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::oui, Child<::std::string, ::apache::thrift::type_class::binary, ::apache::thrift::type::binary_t>>,
std::pair<strings::partNumber, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::rev, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::serialNumber, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dateCode, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::binary, ::apache::thrift::type::binary_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::oui, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::partNumber, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::rev, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::serialNumber, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::dateCode, std::integral_constant<apache::thrift::field_id_t, 6>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(name, 1);
    STRUCT_CHILD_GETTERS(oui, 2);
    STRUCT_CHILD_GETTERS(partNumber, 3);
    STRUCT_CHILD_GETTERS(rev, 4);
    STRUCT_CHILD_GETTERS(serialNumber, 5);
    STRUCT_CHILD_GETTERS(dateCode, 6);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return name(); }
    else if constexpr (__id == 2) { return oui(); }
    else if constexpr (__id == 3) { return partNumber(); }
    else if constexpr (__id == 4) { return rev(); }
    else if constexpr (__id == 5) { return serialNumber(); }
    else if constexpr (__id == 6) { return dateCode(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::TransceiverConfigOverrideFactor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::TransceiverConfigOverrideFactor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::TransceiverConfigOverrideFactor>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::TransceiverConfigOverrideFactor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::TransceiverConfigOverrideFactor>,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::transceiverPartNumber, Child<::facebook::fboss::cfg::TransceiverPartNumber, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::TransceiverPartNumber>>>,
std::pair<strings::applicationCode, Child<::facebook::fboss::SMFMediaInterfaceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::SMFMediaInterfaceCode>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::cfg::TransceiverPartNumber, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::TransceiverPartNumber>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::SMFMediaInterfaceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::SMFMediaInterfaceCode>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::transceiverPartNumber, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::applicationCode, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(transceiverPartNumber, 1);
    STRUCT_CHILD_GETTERS(applicationCode, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return transceiverPartNumber(); }
    else if constexpr (__id == 2) { return applicationCode(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::TransceiverI2cLogging, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::TransceiverI2cLogging,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::TransceiverI2cLogging>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::TransceiverI2cLogging,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::TransceiverI2cLogging>,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::writeLog, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::readLog, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::disableOnFail, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::bufferSlots, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::writeLog, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::readLog, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::disableOnFail, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::bufferSlots, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(writeLog, 1);
    STRUCT_CHILD_GETTERS(readLog, 2);
    STRUCT_CHILD_GETTERS(disableOnFail, 3);
    STRUCT_CHILD_GETTERS(bufferSlots, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return writeLog(); }
    else if constexpr (__id == 2) { return readLog(); }
    else if constexpr (__id == 3) { return disableOnFail(); }
    else if constexpr (__id == 4) { return bufferSlots(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::FirmwareStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::FirmwareStatus,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::FirmwareStatus>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::FirmwareStatus,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::FirmwareStatus>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::version, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::fwFault, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::dspFwVer, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::buildRev, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::version, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::fwFault, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::dspFwVer, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::buildRev, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(version, 1);
    STRUCT_CHILD_GETTERS(fwFault, 2);
    STRUCT_CHILD_GETTERS(dspFwVer, 3);
    STRUCT_CHILD_GETTERS(buildRev, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return version(); }
    else if constexpr (__id == 2) { return fwFault(); }
    else if constexpr (__id == 3) { return dspFwVer(); }
    else if constexpr (__id == 4) { return buildRev(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::CabledTestPair, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::CabledTestPair,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::CabledTestPair>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::CabledTestPair,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::CabledTestPair>,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::aPortName, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::zPortName, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::profileID, Child<::facebook::fboss::cfg::PortProfileID, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortProfileID>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::PortProfileID, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortProfileID>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::aPortName, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::zPortName, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::profileID, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(aPortName, 1);
    STRUCT_CHILD_GETTERS(zPortName, 2);
    STRUCT_CHILD_GETTERS(profileID, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return aPortName(); }
    else if constexpr (__id == 2) { return zPortName(); }
    else if constexpr (__id == 3) { return profileID(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::QsfpState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::QsfpState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::QsfpState>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::QsfpState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::QsfpState>,
   Parent>;
  using strings = ::facebook::fboss::state::qsfp_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::phyStates, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::phy::PhyState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::tcvrStates, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::TcvrState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::phy::PhyState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::TcvrState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::phyStates, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::tcvrStates, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(phyStates, 1);
    STRUCT_CHILD_GETTERS(tcvrStates, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return phyStates(); }
    else if constexpr (__id == 2) { return tcvrStates(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::VendorConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::VendorConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::VendorConfig>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::VendorConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::VendorConfig>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::VendorConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QsfpServiceConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QsfpServiceConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::QsfpServiceConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QsfpServiceConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::QsfpServiceConfig>,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::defaultCommandLineArgs, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::transceiverConfigOverrides, ChildThriftPath<::std::vector<::facebook::fboss::cfg::TransceiverConfigOverride>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::sdk_version, ChildThriftPath<::facebook::fboss::cfg::QsfpSdkVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::qsfpTestConfig, ChildThriftPath<::facebook::fboss::cfg::QsfpTestConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::transceiverFirmwareVersions, ChildThriftPath<::facebook::fboss::cfg::TransceiverFirmware, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::transceiverI2cLogging, ChildThriftPath<::facebook::fboss::cfg::TransceiverI2cLogging, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::transceiverValidationConfig, ChildThriftPath<::std::vector<::facebook::fboss::VendorConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::TransceiverConfigOverride>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::cfg::QsfpSdkVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::cfg::QsfpTestConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::cfg::TransceiverFirmware, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::facebook::fboss::cfg::TransceiverI2cLogging, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::vector<::facebook::fboss::VendorConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::defaultCommandLineArgs, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::transceiverConfigOverrides, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::sdk_version, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::qsfpTestConfig, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::transceiverFirmwareVersions, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::transceiverI2cLogging, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::transceiverValidationConfig, std::integral_constant<apache::thrift::field_id_t, 7>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(defaultCommandLineArgs, 1);
    STRUCT_CHILD_GETTERS(transceiverConfigOverrides, 2);
    STRUCT_CHILD_GETTERS(sdk_version, 3);
    STRUCT_CHILD_GETTERS(qsfpTestConfig, 4);
    STRUCT_CHILD_GETTERS(transceiverFirmwareVersions, 5);
    STRUCT_CHILD_GETTERS(transceiverI2cLogging, 6);
    STRUCT_CHILD_GETTERS(transceiverValidationConfig, 7);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return defaultCommandLineArgs(); }
    else if constexpr (__id == 2) { return transceiverConfigOverrides(); }
    else if constexpr (__id == 3) { return sdk_version(); }
    else if constexpr (__id == 4) { return qsfpTestConfig(); }
    else if constexpr (__id == 5) { return transceiverFirmwareVersions(); }
    else if constexpr (__id == 6) { return transceiverI2cLogging(); }
    else if constexpr (__id == 7) { return transceiverValidationConfig(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::RsFecLaneState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::RsFecLaneState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::RsFecLaneState>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::RsFecLaneState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::RsFecLaneState>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::lane, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::fecAlignmentLockLive, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::fecAlignmentLockChanged, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::lane, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::fecAlignmentLockLive, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::fecAlignmentLockChanged, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(lane, 1);
    STRUCT_CHILD_GETTERS(fecAlignmentLockLive, 2);
    STRUCT_CHILD_GETTERS(fecAlignmentLockChanged, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return lane(); }
    else if constexpr (__id == 2) { return fecAlignmentLockLive(); }
    else if constexpr (__id == 3) { return fecAlignmentLockChanged(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QsfpTestConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QsfpTestConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::QsfpTestConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QsfpTestConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::QsfpTestConfig>,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::cabledPortPairs, ChildThriftPath<::std::vector<::facebook::fboss::cfg::CabledTestPair>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::firmwareForUpgradeTest, ChildThriftPath<::facebook::fboss::cfg::TransceiverFirmware, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::CabledTestPair>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::TransceiverFirmware, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::cabledPortPairs, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::firmwareForUpgradeTest, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(cabledPortPairs, 1);
    STRUCT_CHILD_GETTERS(firmwareForUpgradeTest, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return cabledPortPairs(); }
    else if constexpr (__id == 2) { return firmwareForUpgradeTest(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::SignalFlags, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::SignalFlags,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::SignalFlags>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::SignalFlags,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::SignalFlags>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::txLos, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::rxLos, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::txLol, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::rxLol, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::txLos, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::rxLos, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::txLol, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::rxLol, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(txLos, 1);
    STRUCT_CHILD_GETTERS(rxLos, 2);
    STRUCT_CHILD_GETTERS(txLol, 3);
    STRUCT_CHILD_GETTERS(rxLol, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return txLos(); }
    else if constexpr (__id == 2) { return rxLos(); }
    else if constexpr (__id == 3) { return txLol(); }
    else if constexpr (__id == 4) { return rxLol(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::RsInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::RsInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::RsInfo>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::RsInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::RsInfo>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::faultStatus, ChildThriftPath<::facebook::fboss::phy::LinkFaultStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::phy::LinkFaultStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::faultStatus, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(faultStatus, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return faultStatus(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::MediaInterfaceId, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::MediaInterfaceId,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::MediaInterfaceId>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::MediaInterfaceId,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::MediaInterfaceId>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::lane, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::media, ChildThriftPath<::facebook::fboss::MediaInterfaceUnion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::code, Child<::facebook::fboss::MediaInterfaceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::MediaInterfaceCode>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::MediaInterfaceUnion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::MediaInterfaceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::MediaInterfaceCode>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::lane, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::media, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::code, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(lane, 1);
    STRUCT_CHILD_GETTERS(media, 2);
    STRUCT_CHILD_GETTERS(code, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return lane(); }
    else if constexpr (__id == 2) { return media(); }
    else if constexpr (__id == 3) { return code(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::MediaInterfaceUnion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::MediaInterfaceUnion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   ::apache::thrift::type::union_t<::facebook::fboss::MediaInterfaceUnion>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::MediaInterfaceUnion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   ::apache::thrift::type::union_t<::facebook::fboss::MediaInterfaceUnion>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::smfCode, Child<::facebook::fboss::SMFMediaInterfaceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::SMFMediaInterfaceCode>>>,
std::pair<strings::extendedSpecificationComplianceCode, Child<::facebook::fboss::ExtendedSpecComplianceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::ExtendedSpecComplianceCode>>>,
std::pair<strings::ethernet10GComplianceCode, Child<::facebook::fboss::Ethernet10GComplianceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::Ethernet10GComplianceCode>>>,
std::pair<strings::passiveCuCode, Child<::facebook::fboss::PassiveCuMediaInterfaceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::PassiveCuMediaInterfaceCode>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::SMFMediaInterfaceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::SMFMediaInterfaceCode>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::ExtendedSpecComplianceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::ExtendedSpecComplianceCode>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::Ethernet10GComplianceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::Ethernet10GComplianceCode>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::PassiveCuMediaInterfaceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::PassiveCuMediaInterfaceCode>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::smfCode, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::extendedSpecificationComplianceCode, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::ethernet10GComplianceCode, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::passiveCuCode, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(smfCode, 1);
    STRUCT_CHILD_GETTERS(extendedSpecificationComplianceCode, 2);
    STRUCT_CHILD_GETTERS(ethernet10GComplianceCode, 3);
    STRUCT_CHILD_GETTERS(passiveCuCode, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return smfCode(); }
    else if constexpr (__id == 2) { return extendedSpecificationComplianceCode(); }
    else if constexpr (__id == 3) { return ethernet10GComplianceCode(); }
    else if constexpr (__id == 4) { return passiveCuCode(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HostLaneSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::HostLaneSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HostLaneSettings>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HostLaneSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HostLaneSettings>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::lane, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::txInputEqualization, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::rxOutputEmphasis, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::rxOutputAmplitude, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::rxOutput, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::rxSquelch, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::rxOutputPreCursor, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::rxOutputPostCursor, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::lane, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::txInputEqualization, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::rxOutputEmphasis, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::rxOutputAmplitude, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::rxOutput, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::rxSquelch, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::rxOutputPreCursor, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::rxOutputPostCursor, std::integral_constant<apache::thrift::field_id_t, 8>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(lane, 1);
    STRUCT_CHILD_GETTERS(txInputEqualization, 2);
    STRUCT_CHILD_GETTERS(rxOutputEmphasis, 3);
    STRUCT_CHILD_GETTERS(rxOutputAmplitude, 4);
    STRUCT_CHILD_GETTERS(rxOutput, 5);
    STRUCT_CHILD_GETTERS(rxSquelch, 6);
    STRUCT_CHILD_GETTERS(rxOutputPreCursor, 7);
    STRUCT_CHILD_GETTERS(rxOutputPostCursor, 8);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return lane(); }
    else if constexpr (__id == 2) { return txInputEqualization(); }
    else if constexpr (__id == 3) { return rxOutputEmphasis(); }
    else if constexpr (__id == 4) { return rxOutputAmplitude(); }
    else if constexpr (__id == 5) { return rxOutput(); }
    else if constexpr (__id == 6) { return rxSquelch(); }
    else if constexpr (__id == 7) { return rxOutputPreCursor(); }
    else if constexpr (__id == 8) { return rxOutputPostCursor(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::FirmwarePair, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::FirmwarePair,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::FirmwarePair>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::FirmwarePair,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::FirmwarePair>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_validation_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::applicationFirmwareVersion, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dspFirmwareVersion, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::applicationFirmwareVersion, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::dspFirmwareVersion, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(applicationFirmwareVersion, 1);
    STRUCT_CHILD_GETTERS(dspFirmwareVersion, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return applicationFirmwareVersion(); }
    else if constexpr (__id == 2) { return dspFirmwareVersion(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Sff8636Overrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Sff8636Overrides,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Sff8636Overrides>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Sff8636Overrides,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Sff8636Overrides>,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::rxPreemphasis, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::rxAmplitude, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::txEqualization, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::rxPreemphasis, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::rxAmplitude, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::txEqualization, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(rxPreemphasis, 1);
    STRUCT_CHILD_GETTERS(rxAmplitude, 2);
    STRUCT_CHILD_GETTERS(txEqualization, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return rxPreemphasis(); }
    else if constexpr (__id == 2) { return rxAmplitude(); }
    else if constexpr (__id == 3) { return txEqualization(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::Cable, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::Cable,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::Cable>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::Cable,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::Cable>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::singleModeKm, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::singleMode, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::om3, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::om2, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::om1, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::copper, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::transmitterTech, Child<::facebook::fboss::TransmitterTechnology, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::TransmitterTechnology>>>,
std::pair<strings::length, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::gauge, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::om4, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::om5, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::facebook::fboss::TransmitterTechnology, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::TransmitterTechnology>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::singleModeKm, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::singleMode, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::om3, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::om2, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::om1, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::copper, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::transmitterTech, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::length, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::gauge, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::om4, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::om5, std::integral_constant<apache::thrift::field_id_t, 11>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(singleModeKm, 1);
    STRUCT_CHILD_GETTERS(singleMode, 2);
    STRUCT_CHILD_GETTERS(om3, 3);
    STRUCT_CHILD_GETTERS(om2, 4);
    STRUCT_CHILD_GETTERS(om1, 5);
    STRUCT_CHILD_GETTERS(copper, 6);
    STRUCT_CHILD_GETTERS(transmitterTech, 7);
    STRUCT_CHILD_GETTERS(length, 8);
    STRUCT_CHILD_GETTERS(gauge, 9);
    STRUCT_CHILD_GETTERS(om4, 10);
    STRUCT_CHILD_GETTERS(om5, 11);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return singleModeKm(); }
    else if constexpr (__id == 2) { return singleMode(); }
    else if constexpr (__id == 3) { return om3(); }
    else if constexpr (__id == 4) { return om2(); }
    else if constexpr (__id == 5) { return om1(); }
    else if constexpr (__id == 6) { return copper(); }
    else if constexpr (__id == 7) { return transmitterTech(); }
    else if constexpr (__id == 8) { return length(); }
    else if constexpr (__id == 9) { return gauge(); }
    else if constexpr (__id == 10) { return om4(); }
    else if constexpr (__id == 11) { return om5(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::AlarmThreshold, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::AlarmThreshold,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::AlarmThreshold>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::AlarmThreshold,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::AlarmThreshold>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::temp, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::vcc, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::rxPwr, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::txBias, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::txPwr, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::temp, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::vcc, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::rxPwr, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::txBias, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::txPwr, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(temp, 1);
    STRUCT_CHILD_GETTERS(vcc, 2);
    STRUCT_CHILD_GETTERS(rxPwr, 3);
    STRUCT_CHILD_GETTERS(txBias, 4);
    STRUCT_CHILD_GETTERS(txPwr, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return temp(); }
    else if constexpr (__id == 2) { return vcc(); }
    else if constexpr (__id == 3) { return rxPwr(); }
    else if constexpr (__id == 4) { return txBias(); }
    else if constexpr (__id == 5) { return txPwr(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::TransceiverFirmware, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::TransceiverFirmware,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::TransceiverFirmware>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::TransceiverFirmware,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::TransceiverFirmware>,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::versionsMap, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::cfg::Firmware>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::cfg::Firmware>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::versionsMap, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(versionsMap, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return versionsMap(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::TransceiverConfigOverride, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::TransceiverConfigOverride,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::TransceiverConfigOverride>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::TransceiverConfigOverride,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::TransceiverConfigOverride>,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::factor, ChildThriftPath<::facebook::fboss::cfg::TransceiverConfigOverrideFactor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::config, ChildThriftPath<::facebook::fboss::cfg::TransceiverOverrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::TransceiverConfigOverrideFactor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::TransceiverOverrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::factor, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::config, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(factor, 1);
    STRUCT_CHILD_GETTERS(config, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return factor(); }
    else if constexpr (__id == 2) { return config(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::FirmwareVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::FirmwareVersion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::FirmwareVersion>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::FirmwareVersion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::FirmwareVersion>,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::fwType, Child<::facebook::fboss::cfg::FirmwareType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::FirmwareType>>>,
std::pair<strings::version, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::cfg::FirmwareType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::FirmwareType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::fwType, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::version, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(fwType, 1);
    STRUCT_CHILD_GETTERS(version, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return fwType(); }
    else if constexpr (__id == 2) { return version(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::std::vector<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::std::vector<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
   Parent>;
  using Child = ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::cfg::Firmware>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::cfg::Firmware>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Firmware>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::cfg::Firmware>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Firmware>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::Firmware, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::ThresholdLevels,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::ThresholdLevels>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::ThresholdLevels,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::ThresholdLevels>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::alarm, ChildThriftPath<::facebook::fboss::Thresholds, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::warn, ChildThriftPath<::facebook::fboss::Thresholds, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::Thresholds, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::Thresholds, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::alarm, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::warn, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(alarm, 1);
    STRUCT_CHILD_GETTERS(warn, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return alarm(); }
    else if constexpr (__id == 2) { return warn(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::MediaInterfaceId>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::MediaInterfaceId>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::MediaInterfaceId>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::MediaInterfaceId>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::MediaInterfaceId>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::MediaInterfaceId, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::MediaLaneSignals>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::MediaLaneSignals>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::MediaLaneSignals>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::MediaLaneSignals>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::MediaLaneSignals>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::MediaLaneSignals, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::TcvrState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::TcvrState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::TcvrState>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::TcvrState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::TcvrState>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::present, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::transceiver, Child<::facebook::fboss::TransceiverType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::TransceiverType>>>,
std::pair<strings::port, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::thresholds, ChildThriftPath<::facebook::fboss::AlarmThreshold, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::vendor, ChildThriftPath<::facebook::fboss::Vendor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::cable, ChildThriftPath<::facebook::fboss::Cable, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::settings, ChildThriftPath<::facebook::fboss::TransceiverSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::signalFlag, ChildThriftPath<::facebook::fboss::SignalFlags, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::extendedSpecificationComplianceCode, Child<::facebook::fboss::ExtendedSpecComplianceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::ExtendedSpecComplianceCode>>>,
std::pair<strings::transceiverManagementInterface, Child<::facebook::fboss::TransceiverManagementInterface, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::TransceiverManagementInterface>>>,
std::pair<strings::identifier, Child<::facebook::fboss::TransceiverModuleIdentifier, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::TransceiverModuleIdentifier>>>,
std::pair<strings::status, ChildThriftPath<::facebook::fboss::ModuleStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::mediaLaneSignals, ChildThriftPath<::std::vector<::facebook::fboss::MediaLaneSignals>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::hostLaneSignals, ChildThriftPath<::std::vector<::facebook::fboss::HostLaneSignals>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::eepromCsumValid, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::moduleMediaInterface, Child<::facebook::fboss::MediaInterfaceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::MediaInterfaceCode>>>,
std::pair<strings::stateMachineState, Child<::facebook::fboss::TransceiverStateMachineState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::TransceiverStateMachineState>>>,
std::pair<strings::portNameToHostLanes, ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::portNameToMediaLanes, ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::timeCollected, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::diagCapability, ChildThriftPath<::facebook::fboss::DiagsCapability, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::fwUpgradeInProgress, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::TransceiverType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::TransceiverType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::AlarmThreshold, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::facebook::fboss::Vendor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::facebook::fboss::Cable, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::facebook::fboss::TransceiverSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, ChildThriftPath<::facebook::fboss::SignalFlags, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::facebook::fboss::ExtendedSpecComplianceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::ExtendedSpecComplianceCode>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::facebook::fboss::TransceiverManagementInterface, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::TransceiverManagementInterface>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::facebook::fboss::TransceiverModuleIdentifier, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::TransceiverModuleIdentifier>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, ChildThriftPath<::facebook::fboss::ModuleStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, ChildThriftPath<::std::vector<::facebook::fboss::MediaLaneSignals>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, ChildThriftPath<::std::vector<::facebook::fboss::HostLaneSignals>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::facebook::fboss::MediaInterfaceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::MediaInterfaceCode>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::facebook::fboss::TransceiverStateMachineState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::TransceiverStateMachineState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, ChildThriftPath<::facebook::fboss::DiagsCapability, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::present, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::transceiver, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::port, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::thresholds, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::vendor, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::cable, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::settings, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::signalFlag, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::extendedSpecificationComplianceCode, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::transceiverManagementInterface, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::identifier, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::status, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::mediaLaneSignals, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::hostLaneSignals, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::eepromCsumValid, std::integral_constant<apache::thrift::field_id_t, 18>>,
std::pair<strings::moduleMediaInterface, std::integral_constant<apache::thrift::field_id_t, 19>>,
std::pair<strings::stateMachineState, std::integral_constant<apache::thrift::field_id_t, 20>>,
std::pair<strings::portNameToHostLanes, std::integral_constant<apache::thrift::field_id_t, 21>>,
std::pair<strings::portNameToMediaLanes, std::integral_constant<apache::thrift::field_id_t, 22>>,
std::pair<strings::timeCollected, std::integral_constant<apache::thrift::field_id_t, 23>>,
std::pair<strings::diagCapability, std::integral_constant<apache::thrift::field_id_t, 24>>,
std::pair<strings::fwUpgradeInProgress, std::integral_constant<apache::thrift::field_id_t, 25>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(present, 1);
    STRUCT_CHILD_GETTERS(transceiver, 2);
    STRUCT_CHILD_GETTERS(port, 3);
    STRUCT_CHILD_GETTERS(thresholds, 5);
    STRUCT_CHILD_GETTERS(vendor, 6);
    STRUCT_CHILD_GETTERS(cable, 7);
    STRUCT_CHILD_GETTERS(settings, 9);
    STRUCT_CHILD_GETTERS(signalFlag, 10);
    STRUCT_CHILD_GETTERS(extendedSpecificationComplianceCode, 11);
    STRUCT_CHILD_GETTERS(transceiverManagementInterface, 12);
    STRUCT_CHILD_GETTERS(identifier, 13);
    STRUCT_CHILD_GETTERS(status, 14);
    STRUCT_CHILD_GETTERS(mediaLaneSignals, 15);
    STRUCT_CHILD_GETTERS(hostLaneSignals, 16);
    STRUCT_CHILD_GETTERS(eepromCsumValid, 18);
    STRUCT_CHILD_GETTERS(moduleMediaInterface, 19);
    STRUCT_CHILD_GETTERS(stateMachineState, 20);
    STRUCT_CHILD_GETTERS(portNameToHostLanes, 21);
    STRUCT_CHILD_GETTERS(portNameToMediaLanes, 22);
    STRUCT_CHILD_GETTERS(timeCollected, 23);
    STRUCT_CHILD_GETTERS(diagCapability, 24);
    STRUCT_CHILD_GETTERS(fwUpgradeInProgress, 25);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return present(); }
    else if constexpr (__id == 2) { return transceiver(); }
    else if constexpr (__id == 3) { return port(); }
    else if constexpr (__id == 5) { return thresholds(); }
    else if constexpr (__id == 6) { return vendor(); }
    else if constexpr (__id == 7) { return cable(); }
    else if constexpr (__id == 9) { return settings(); }
    else if constexpr (__id == 10) { return signalFlag(); }
    else if constexpr (__id == 11) { return extendedSpecificationComplianceCode(); }
    else if constexpr (__id == 12) { return transceiverManagementInterface(); }
    else if constexpr (__id == 13) { return identifier(); }
    else if constexpr (__id == 14) { return status(); }
    else if constexpr (__id == 15) { return mediaLaneSignals(); }
    else if constexpr (__id == 16) { return hostLaneSignals(); }
    else if constexpr (__id == 18) { return eepromCsumValid(); }
    else if constexpr (__id == 19) { return moduleMediaInterface(); }
    else if constexpr (__id == 20) { return stateMachineState(); }
    else if constexpr (__id == 21) { return portNameToHostLanes(); }
    else if constexpr (__id == 22) { return portNameToMediaLanes(); }
    else if constexpr (__id == 23) { return timeCollected(); }
    else if constexpr (__id == 24) { return diagCapability(); }
    else if constexpr (__id == 25) { return fwUpgradeInProgress(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::SendToQueue, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::SendToQueue,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::SendToQueue>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::SendToQueue,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::SendToQueue>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::action, ChildThriftPath<::facebook::fboss::cfg::QueueMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::sendToCPU, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::QueueMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::action, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::sendToCPU, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(action, 1);
    STRUCT_CHILD_GETTERS(sendToCPU, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return action(); }
    else if constexpr (__id == 2) { return sendToCPU(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::struct_t<::facebook::fboss::SystemPortThrift>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::struct_t<::facebook::fboss::SystemPortThrift>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::LabelForwardingEntryFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::LabelForwardingEntryFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::LabelForwardingEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::AggregatePort>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::AggregatePort>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::AggregatePort>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::AggregatePort>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::AggregatePort>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::AggregatePort, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::RxSak, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::RxSak,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::RxSak>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::RxSak,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::RxSak>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::sakKey, ChildThriftPath<::facebook::fboss::state::MKASakKey, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::sak, ChildThriftPath<::facebook::fboss::mka::MKASak, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::state::MKASakKey, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::mka::MKASak, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::sakKey, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::sak, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(sakKey, 1);
    STRUCT_CHILD_GETTERS(sak, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return sakKey(); }
    else if constexpr (__id == 2) { return sak(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::Subport, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::Subport,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::Subport>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::Subport,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::Subport>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::id, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::priority, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::lacpPortRate, Child<::facebook::fboss::cfg::LacpPortRate, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::LacpPortRate>>>,
std::pair<strings::lacpPortActivity, Child<::facebook::fboss::cfg::LacpPortActivity, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::LacpPortActivity>>>,
std::pair<strings::holdTimerMultiplier, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::LacpPortRate, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::LacpPortRate>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::cfg::LacpPortActivity, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::LacpPortActivity>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::id, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::priority, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::lacpPortRate, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::lacpPortActivity, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::holdTimerMultiplier, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(id, 1);
    STRUCT_CHILD_GETTERS(priority, 2);
    STRUCT_CHILD_GETTERS(lacpPortRate, 3);
    STRUCT_CHILD_GETTERS(lacpPortActivity, 4);
    STRUCT_CHILD_GETTERS(holdTimerMultiplier, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return id(); }
    else if constexpr (__id == 2) { return priority(); }
    else if constexpr (__id == 3) { return lacpPortRate(); }
    else if constexpr (__id == 4) { return lacpPortActivity(); }
    else if constexpr (__id == 5) { return holdTimerMultiplier(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::RouteNextHopsMulti, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::RouteNextHopsMulti,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::RouteNextHopsMulti>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::RouteNextHopsMulti,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::RouteNextHopsMulti>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::lowestAdminDistanceClientId, Child<::facebook::fboss::ClientID, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::ClientID>>>,
std::pair<strings::client2NextHopEntry, ChildThriftPath<::std::map<::facebook::fboss::ClientID, ::facebook::fboss::state::RouteNextHopEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::ClientID, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::ClientID>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::facebook::fboss::ClientID, ::facebook::fboss::state::RouteNextHopEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::lowestAdminDistanceClientId, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::client2NextHopEntry, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(lowestAdminDistanceClientId, 1);
    STRUCT_CHILD_GETTERS(client2NextHopEntry, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return lowestAdminDistanceClientId(); }
    else if constexpr (__id == 2) { return client2NextHopEntry(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteWithNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::StaticRouteWithNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticRouteWithNextHops>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::StaticRouteWithNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticRouteWithNextHops>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::StaticRouteWithNextHops, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::PortPgFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::PortPgFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::PortPgFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::PortPgFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::PortPgFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::id, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::minLimitBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::headroomLimitBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::resumeOffsetBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::bufferPoolName, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::scalingFactor, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::bufferPoolConfig, ChildThriftPath<::facebook::fboss::state::BufferPoolFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::facebook::fboss::state::BufferPoolFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::id, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::minLimitBytes, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::headroomLimitBytes, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::resumeOffsetBytes, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::bufferPoolName, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::scalingFactor, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::bufferPoolConfig, std::integral_constant<apache::thrift::field_id_t, 8>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(id, 1);
    STRUCT_CHILD_GETTERS(minLimitBytes, 2);
    STRUCT_CHILD_GETTERS(headroomLimitBytes, 3);
    STRUCT_CHILD_GETTERS(name, 4);
    STRUCT_CHILD_GETTERS(resumeOffsetBytes, 5);
    STRUCT_CHILD_GETTERS(bufferPoolName, 6);
    STRUCT_CHILD_GETTERS(scalingFactor, 7);
    STRUCT_CHILD_GETTERS(bufferPoolConfig, 8);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return id(); }
    else if constexpr (__id == 2) { return minLimitBytes(); }
    else if constexpr (__id == 3) { return headroomLimitBytes(); }
    else if constexpr (__id == 4) { return name(); }
    else if constexpr (__id == 5) { return resumeOffsetBytes(); }
    else if constexpr (__id == 6) { return bufferPoolName(); }
    else if constexpr (__id == 7) { return scalingFactor(); }
    else if constexpr (__id == 8) { return bufferPoolConfig(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::phy::PinConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::phy::PinConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::phy::PinConfig>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::phy::PinConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::phy::PinConfig>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::phy::PinConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::PortFields>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::PortFields>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::AclEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::AclEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::AclEntry>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::AclEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::AclEntry>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::srcIp, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dstIp, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::srcL4PortRange_DEPRECATED, ChildThriftPath<::facebook::fboss::cfg::L4PortRange, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dstL4PortRange_DEPRECATED, ChildThriftPath<::facebook::fboss::cfg::L4PortRange, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::proto, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::tcpFlagsBitMap, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::srcPort, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::dstPort, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::pktLenRange_DEPRECATED, ChildThriftPath<::facebook::fboss::cfg::PktLenRange, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::ipFrag, Child<::facebook::fboss::cfg::IpFragMatch, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::IpFragMatch>>>,
std::pair<strings::icmpType, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::icmpCode, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::dscp, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::actionType, Child<::facebook::fboss::cfg::AclActionType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclActionType>>>,
std::pair<strings::dstMac, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::ttl, ChildThriftPath<::facebook::fboss::cfg::Ttl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::ipType, Child<::facebook::fboss::cfg::IpType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::IpType>>>,
std::pair<strings::l4SrcPort, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::l4DstPort, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::lookupClass_DEPRECATED, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
std::pair<strings::lookupClassL2, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
std::pair<strings::lookupClassNeighbor, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
std::pair<strings::lookupClassRoute, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
std::pair<strings::packetLookupResult, Child<::facebook::fboss::cfg::PacketLookupResultType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PacketLookupResultType>>>,
std::pair<strings::etherType, Child<::facebook::fboss::cfg::EtherType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::EtherType>>>,
std::pair<strings::vlanID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::udfGroups, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::roceOpcode, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
std::pair<strings::roceBytes, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::roceMask, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::udfTable, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclUdfEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::cfg::L4PortRange, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::facebook::fboss::cfg::L4PortRange, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::facebook::fboss::cfg::PktLenRange, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::facebook::fboss::cfg::IpFragMatch, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::IpFragMatch>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::facebook::fboss::cfg::AclActionType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclActionType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, ChildThriftPath<::facebook::fboss::cfg::Ttl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, Child<::facebook::fboss::cfg::IpType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::IpType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, Child<::facebook::fboss::cfg::PacketLookupResultType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PacketLookupResultType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 29>, Child<::facebook::fboss::cfg::EtherType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::EtherType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 31>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 32>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 33>, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 34>, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 35>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclUdfEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::srcIp, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::dstIp, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::srcL4PortRange_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::dstL4PortRange_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::proto, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::tcpFlagsBitMap, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::srcPort, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::dstPort, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::pktLenRange_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::ipFrag, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::icmpType, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::icmpCode, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::dscp, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 17>>,
std::pair<strings::actionType, std::integral_constant<apache::thrift::field_id_t, 18>>,
std::pair<strings::dstMac, std::integral_constant<apache::thrift::field_id_t, 19>>,
std::pair<strings::ttl, std::integral_constant<apache::thrift::field_id_t, 20>>,
std::pair<strings::ipType, std::integral_constant<apache::thrift::field_id_t, 21>>,
std::pair<strings::l4SrcPort, std::integral_constant<apache::thrift::field_id_t, 22>>,
std::pair<strings::l4DstPort, std::integral_constant<apache::thrift::field_id_t, 23>>,
std::pair<strings::lookupClass_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 24>>,
std::pair<strings::lookupClassL2, std::integral_constant<apache::thrift::field_id_t, 25>>,
std::pair<strings::lookupClassNeighbor, std::integral_constant<apache::thrift::field_id_t, 26>>,
std::pair<strings::lookupClassRoute, std::integral_constant<apache::thrift::field_id_t, 27>>,
std::pair<strings::packetLookupResult, std::integral_constant<apache::thrift::field_id_t, 28>>,
std::pair<strings::etherType, std::integral_constant<apache::thrift::field_id_t, 29>>,
std::pair<strings::vlanID, std::integral_constant<apache::thrift::field_id_t, 30>>,
std::pair<strings::udfGroups, std::integral_constant<apache::thrift::field_id_t, 31>>,
std::pair<strings::roceOpcode, std::integral_constant<apache::thrift::field_id_t, 32>>,
std::pair<strings::roceBytes, std::integral_constant<apache::thrift::field_id_t, 33>>,
std::pair<strings::roceMask, std::integral_constant<apache::thrift::field_id_t, 34>>,
std::pair<strings::udfTable, std::integral_constant<apache::thrift::field_id_t, 35>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(srcIp, 3);
    STRUCT_CHILD_GETTERS(dstIp, 4);
    STRUCT_CHILD_GETTERS(srcL4PortRange_DEPRECATED, 5);
    STRUCT_CHILD_GETTERS(dstL4PortRange_DEPRECATED, 6);
    STRUCT_CHILD_GETTERS(proto, 7);
    STRUCT_CHILD_GETTERS(tcpFlagsBitMap, 8);
    STRUCT_CHILD_GETTERS(srcPort, 10);
    STRUCT_CHILD_GETTERS(dstPort, 11);
    STRUCT_CHILD_GETTERS(pktLenRange_DEPRECATED, 12);
    STRUCT_CHILD_GETTERS(ipFrag, 13);
    STRUCT_CHILD_GETTERS(icmpType, 14);
    STRUCT_CHILD_GETTERS(icmpCode, 15);
    STRUCT_CHILD_GETTERS(dscp, 16);
    STRUCT_CHILD_GETTERS(name, 17);
    STRUCT_CHILD_GETTERS(actionType, 18);
    STRUCT_CHILD_GETTERS(dstMac, 19);
    STRUCT_CHILD_GETTERS(ttl, 20);
    STRUCT_CHILD_GETTERS(ipType, 21);
    STRUCT_CHILD_GETTERS(l4SrcPort, 22);
    STRUCT_CHILD_GETTERS(l4DstPort, 23);
    STRUCT_CHILD_GETTERS(lookupClass_DEPRECATED, 24);
    STRUCT_CHILD_GETTERS(lookupClassL2, 25);
    STRUCT_CHILD_GETTERS(lookupClassNeighbor, 26);
    STRUCT_CHILD_GETTERS(lookupClassRoute, 27);
    STRUCT_CHILD_GETTERS(packetLookupResult, 28);
    STRUCT_CHILD_GETTERS(etherType, 29);
    STRUCT_CHILD_GETTERS(vlanID, 30);
    STRUCT_CHILD_GETTERS(udfGroups, 31);
    STRUCT_CHILD_GETTERS(roceOpcode, 32);
    STRUCT_CHILD_GETTERS(roceBytes, 33);
    STRUCT_CHILD_GETTERS(roceMask, 34);
    STRUCT_CHILD_GETTERS(udfTable, 35);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 3) { return srcIp(); }
    else if constexpr (__id == 4) { return dstIp(); }
    else if constexpr (__id == 5) { return srcL4PortRange_DEPRECATED(); }
    else if constexpr (__id == 6) { return dstL4PortRange_DEPRECATED(); }
    else if constexpr (__id == 7) { return proto(); }
    else if constexpr (__id == 8) { return tcpFlagsBitMap(); }
    else if constexpr (__id == 10) { return srcPort(); }
    else if constexpr (__id == 11) { return dstPort(); }
    else if constexpr (__id == 12) { return pktLenRange_DEPRECATED(); }
    else if constexpr (__id == 13) { return ipFrag(); }
    else if constexpr (__id == 14) { return icmpType(); }
    else if constexpr (__id == 15) { return icmpCode(); }
    else if constexpr (__id == 16) { return dscp(); }
    else if constexpr (__id == 17) { return name(); }
    else if constexpr (__id == 18) { return actionType(); }
    else if constexpr (__id == 19) { return dstMac(); }
    else if constexpr (__id == 20) { return ttl(); }
    else if constexpr (__id == 21) { return ipType(); }
    else if constexpr (__id == 22) { return l4SrcPort(); }
    else if constexpr (__id == 23) { return l4DstPort(); }
    else if constexpr (__id == 24) { return lookupClass_DEPRECATED(); }
    else if constexpr (__id == 25) { return lookupClassL2(); }
    else if constexpr (__id == 26) { return lookupClassNeighbor(); }
    else if constexpr (__id == 27) { return lookupClassRoute(); }
    else if constexpr (__id == 28) { return packetLookupResult(); }
    else if constexpr (__id == 29) { return etherType(); }
    else if constexpr (__id == 30) { return vlanID(); }
    else if constexpr (__id == 31) { return udfGroups(); }
    else if constexpr (__id == 32) { return roceOpcode(); }
    else if constexpr (__id == 33) { return roceBytes(); }
    else if constexpr (__id == 34) { return roceMask(); }
    else if constexpr (__id == 35) { return udfTable(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticIp2MplsRoute>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::StaticIp2MplsRoute>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticIp2MplsRoute>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::StaticIp2MplsRoute>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticIp2MplsRoute>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::StaticIp2MplsRoute, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::SocketAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::SocketAddress,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::SocketAddress>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::SocketAddress,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::SocketAddress>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::host, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::port, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::host, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::port, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(host, 1);
    STRUCT_CHILD_GETTERS(port, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return host(); }
    else if constexpr (__id == 2) { return port(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::InterfaceFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::InterfaceFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::InterfaceFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::InterfaceFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::InterfaceFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::interfaceId, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::routerId, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::vlanId, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::mac, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::addresses, ChildThriftPath<::std::map<::std::string, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::ndpConfig, ChildThriftPath<::facebook::fboss::cfg::NdpConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::mtu, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::isVirtual, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::isStateSyncDisabled, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::type, Child<::facebook::fboss::cfg::InterfaceType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::InterfaceType>>>,
std::pair<strings::arpTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::ndpTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::arpResponseTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::ndpResponseTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dhcpV4Relay, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dhcpV6Relay, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dhcpRelayOverridesV4, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dhcpRelayOverridesV6, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::remoteIntfType, Child<::facebook::fboss::RemoteInterfaceType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::RemoteInterfaceType>>>,
std::pair<strings::remoteIntfLivenessStatus, Child<::facebook::fboss::LivenessStatus, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::LivenessStatus>>>,
std::pair<strings::scope, Child<::facebook::fboss::cfg::Scope, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::Scope>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::map<::std::string, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::facebook::fboss::cfg::NdpConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::facebook::fboss::cfg::InterfaceType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::InterfaceType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::facebook::fboss::RemoteInterfaceType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::RemoteInterfaceType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, Child<::facebook::fboss::LivenessStatus, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::LivenessStatus>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, Child<::facebook::fboss::cfg::Scope, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::Scope>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::interfaceId, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::routerId, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::vlanId, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::mac, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::addresses, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::ndpConfig, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::mtu, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::isVirtual, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::isStateSyncDisabled, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::type, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::arpTable, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::ndpTable, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::arpResponseTable, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::ndpResponseTable, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::dhcpV4Relay, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::dhcpV6Relay, std::integral_constant<apache::thrift::field_id_t, 17>>,
std::pair<strings::dhcpRelayOverridesV4, std::integral_constant<apache::thrift::field_id_t, 18>>,
std::pair<strings::dhcpRelayOverridesV6, std::integral_constant<apache::thrift::field_id_t, 19>>,
std::pair<strings::remoteIntfType, std::integral_constant<apache::thrift::field_id_t, 20>>,
std::pair<strings::remoteIntfLivenessStatus, std::integral_constant<apache::thrift::field_id_t, 21>>,
std::pair<strings::scope, std::integral_constant<apache::thrift::field_id_t, 22>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(interfaceId, 1);
    STRUCT_CHILD_GETTERS(routerId, 2);
    STRUCT_CHILD_GETTERS(vlanId, 3);
    STRUCT_CHILD_GETTERS(name, 4);
    STRUCT_CHILD_GETTERS(mac, 5);
    STRUCT_CHILD_GETTERS(addresses, 6);
    STRUCT_CHILD_GETTERS(ndpConfig, 7);
    STRUCT_CHILD_GETTERS(mtu, 8);
    STRUCT_CHILD_GETTERS(isVirtual, 9);
    STRUCT_CHILD_GETTERS(isStateSyncDisabled, 10);
    STRUCT_CHILD_GETTERS(type, 11);
    STRUCT_CHILD_GETTERS(arpTable, 12);
    STRUCT_CHILD_GETTERS(ndpTable, 13);
    STRUCT_CHILD_GETTERS(arpResponseTable, 14);
    STRUCT_CHILD_GETTERS(ndpResponseTable, 15);
    STRUCT_CHILD_GETTERS(dhcpV4Relay, 16);
    STRUCT_CHILD_GETTERS(dhcpV6Relay, 17);
    STRUCT_CHILD_GETTERS(dhcpRelayOverridesV4, 18);
    STRUCT_CHILD_GETTERS(dhcpRelayOverridesV6, 19);
    STRUCT_CHILD_GETTERS(remoteIntfType, 20);
    STRUCT_CHILD_GETTERS(remoteIntfLivenessStatus, 21);
    STRUCT_CHILD_GETTERS(scope, 22);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return interfaceId(); }
    else if constexpr (__id == 2) { return routerId(); }
    else if constexpr (__id == 3) { return vlanId(); }
    else if constexpr (__id == 4) { return name(); }
    else if constexpr (__id == 5) { return mac(); }
    else if constexpr (__id == 6) { return addresses(); }
    else if constexpr (__id == 7) { return ndpConfig(); }
    else if constexpr (__id == 8) { return mtu(); }
    else if constexpr (__id == 9) { return isVirtual(); }
    else if constexpr (__id == 10) { return isStateSyncDisabled(); }
    else if constexpr (__id == 11) { return type(); }
    else if constexpr (__id == 12) { return arpTable(); }
    else if constexpr (__id == 13) { return ndpTable(); }
    else if constexpr (__id == 14) { return arpResponseTable(); }
    else if constexpr (__id == 15) { return ndpResponseTable(); }
    else if constexpr (__id == 16) { return dhcpV4Relay(); }
    else if constexpr (__id == 17) { return dhcpV6Relay(); }
    else if constexpr (__id == 18) { return dhcpRelayOverridesV4(); }
    else if constexpr (__id == 19) { return dhcpRelayOverridesV6(); }
    else if constexpr (__id == 20) { return remoteIntfType(); }
    else if constexpr (__id == 21) { return remoteIntfLivenessStatus(); }
    else if constexpr (__id == 22) { return scope(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::QosPolicyFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::QosPolicyFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::QosPolicyFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::QosPolicyFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::QosPolicyFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dscpMap, ChildThriftPath<::facebook::fboss::state::TrafficClassToQosAttributeMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::expMap, ChildThriftPath<::facebook::fboss::state::TrafficClassToQosAttributeMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::trafficClassToQueueId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::pfcPriorityToQueueId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::trafficClassToPgId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::pfcPriorityToPgId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::trafficClassToVoqId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::state::TrafficClassToQosAttributeMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::state::TrafficClassToQosAttributeMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::dscpMap, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::expMap, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::trafficClassToQueueId, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::pfcPriorityToQueueId, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::trafficClassToPgId, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::pfcPriorityToPgId, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::trafficClassToVoqId, std::integral_constant<apache::thrift::field_id_t, 8>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(name, 1);
    STRUCT_CHILD_GETTERS(dscpMap, 2);
    STRUCT_CHILD_GETTERS(expMap, 3);
    STRUCT_CHILD_GETTERS(trafficClassToQueueId, 4);
    STRUCT_CHILD_GETTERS(pfcPriorityToQueueId, 5);
    STRUCT_CHILD_GETTERS(trafficClassToPgId, 6);
    STRUCT_CHILD_GETTERS(pfcPriorityToPgId, 7);
    STRUCT_CHILD_GETTERS(trafficClassToVoqId, 8);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return name(); }
    else if constexpr (__id == 2) { return dscpMap(); }
    else if constexpr (__id == 3) { return expMap(); }
    else if constexpr (__id == 4) { return trafficClassToQueueId(); }
    else if constexpr (__id == 5) { return pfcPriorityToQueueId(); }
    else if constexpr (__id == 6) { return trafficClassToPgId(); }
    else if constexpr (__id == 7) { return pfcPriorityToPgId(); }
    else if constexpr (__id == 8) { return trafficClassToVoqId(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::mka::MKASci,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::mka::MKASci>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::mka::MKASci,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::mka::MKASci>,
   Parent>;
  using strings = ::facebook::fboss::mka::mka_structs_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::macAddress, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::port, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::macAddress, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::port, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(macAddress, 1);
    STRUCT_CHILD_GETTERS(port, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return macAddress(); }
    else if constexpr (__id == 2) { return port(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::UdfGroup, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::UdfGroup,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::UdfGroup>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::UdfGroup,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::UdfGroup>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::header, Child<::facebook::fboss::cfg::UdfBaseHeaderType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::UdfBaseHeaderType>>>,
std::pair<strings::startOffsetInBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::fieldSizeInBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::udfPacketMatcherIds, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::type, Child<::facebook::fboss::cfg::UdfGroupType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::UdfGroupType>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::UdfBaseHeaderType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::UdfBaseHeaderType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::facebook::fboss::cfg::UdfGroupType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::UdfGroupType>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::header, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::startOffsetInBytes, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::fieldSizeInBytes, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::udfPacketMatcherIds, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::type, std::integral_constant<apache::thrift::field_id_t, 6>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(name, 1);
    STRUCT_CHILD_GETTERS(header, 2);
    STRUCT_CHILD_GETTERS(startOffsetInBytes, 3);
    STRUCT_CHILD_GETTERS(fieldSizeInBytes, 4);
    STRUCT_CHILD_GETTERS(udfPacketMatcherIds, 5);
    STRUCT_CHILD_GETTERS(type, 6);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return name(); }
    else if constexpr (__id == 2) { return header(); }
    else if constexpr (__id == 3) { return startOffsetInBytes(); }
    else if constexpr (__id == 4) { return fieldSizeInBytes(); }
    else if constexpr (__id == 5) { return udfPacketMatcherIds(); }
    else if constexpr (__id == 6) { return type(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::MirrorTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::MirrorTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::MirrorTunnel>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::MirrorTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::MirrorTunnel>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::srcIp, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dstIp, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::srcMac, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dstMac, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::udpSrcPort, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::udpDstPort, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::ttl, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::srcIp, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::dstIp, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::srcMac, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::dstMac, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::udpSrcPort, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::udpDstPort, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::ttl, std::integral_constant<apache::thrift::field_id_t, 7>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(srcIp, 1);
    STRUCT_CHILD_GETTERS(dstIp, 2);
    STRUCT_CHILD_GETTERS(srcMac, 3);
    STRUCT_CHILD_GETTERS(dstMac, 4);
    STRUCT_CHILD_GETTERS(udpSrcPort, 5);
    STRUCT_CHILD_GETTERS(udpDstPort, 6);
    STRUCT_CHILD_GETTERS(ttl, 7);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return srcIp(); }
    else if constexpr (__id == 2) { return dstIp(); }
    else if constexpr (__id == 3) { return srcMac(); }
    else if constexpr (__id == 4) { return dstMac(); }
    else if constexpr (__id == 5) { return udpSrcPort(); }
    else if constexpr (__id == 6) { return udpDstPort(); }
    else if constexpr (__id == 7) { return ttl(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::QosPolicyFields>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::QosPolicyFields>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclStage>, ::apache::thrift::type::struct_t<::facebook::fboss::state::AclTableGroupFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclStage>, ::apache::thrift::type::struct_t<::facebook::fboss::state::AclTableGroupFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::AclTableGroupFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::AclStage);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::SystemPortThrift, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::SystemPortThrift,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::SystemPortThrift>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::SystemPortThrift,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::SystemPortThrift>,
   Parent>;
  using strings = ::facebook::fboss::ctrl_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::portId, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::switchId, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::portName, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::coreIndex, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::corePortIndex, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::speedMbps, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::numVoqs, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::enabled_DEPRECATED, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::qosPolicy, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::queues, ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::remoteSystemPortType, Child<::facebook::fboss::RemoteSystemPortType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::RemoteSystemPortType>>>,
std::pair<strings::remoteSystemPortLivenessStatus, Child<::facebook::fboss::LivenessStatus, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::LivenessStatus>>>,
std::pair<strings::scope, Child<::facebook::fboss::cfg::Scope, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::Scope>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::facebook::fboss::RemoteSystemPortType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::RemoteSystemPortType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::facebook::fboss::LivenessStatus, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::LivenessStatus>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::facebook::fboss::cfg::Scope, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::Scope>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::portId, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::switchId, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::portName, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::coreIndex, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::corePortIndex, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::speedMbps, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::numVoqs, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::enabled_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::qosPolicy, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::queues, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::remoteSystemPortType, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::remoteSystemPortLivenessStatus, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::scope, std::integral_constant<apache::thrift::field_id_t, 14>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(portId, 1);
    STRUCT_CHILD_GETTERS(switchId, 2);
    STRUCT_CHILD_GETTERS(portName, 3);
    STRUCT_CHILD_GETTERS(coreIndex, 4);
    STRUCT_CHILD_GETTERS(corePortIndex, 5);
    STRUCT_CHILD_GETTERS(speedMbps, 6);
    STRUCT_CHILD_GETTERS(numVoqs, 7);
    STRUCT_CHILD_GETTERS(enabled_DEPRECATED, 9);
    STRUCT_CHILD_GETTERS(qosPolicy, 10);
    STRUCT_CHILD_GETTERS(queues, 11);
    STRUCT_CHILD_GETTERS(remoteSystemPortType, 12);
    STRUCT_CHILD_GETTERS(remoteSystemPortLivenessStatus, 13);
    STRUCT_CHILD_GETTERS(scope, 14);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return portId(); }
    else if constexpr (__id == 2) { return switchId(); }
    else if constexpr (__id == 3) { return portName(); }
    else if constexpr (__id == 4) { return coreIndex(); }
    else if constexpr (__id == 5) { return corePortIndex(); }
    else if constexpr (__id == 6) { return speedMbps(); }
    else if constexpr (__id == 7) { return numVoqs(); }
    else if constexpr (__id == 9) { return enabled_DEPRECATED(); }
    else if constexpr (__id == 10) { return qosPolicy(); }
    else if constexpr (__id == 11) { return queues(); }
    else if constexpr (__id == 12) { return remoteSystemPortType(); }
    else if constexpr (__id == 13) { return remoteSystemPortLivenessStatus(); }
    else if constexpr (__id == 14) { return scope(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QosMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QosMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::QosMap>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QosMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::QosMap>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::dscpMaps, ChildThriftPath<::std::vector<::facebook::fboss::cfg::DscpQosMap>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::expMaps, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExpQosMap>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::trafficClassToQueueId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::pfcPriorityToQueueId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::trafficClassToPgId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::pfcPriorityToPgId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::trafficClassToVoqId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::DscpQosMap>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExpQosMap>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::dscpMaps, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::expMaps, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::trafficClassToQueueId, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::pfcPriorityToQueueId, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::trafficClassToPgId, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::pfcPriorityToPgId, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::trafficClassToVoqId, std::integral_constant<apache::thrift::field_id_t, 7>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(dscpMaps, 1);
    STRUCT_CHILD_GETTERS(expMaps, 2);
    STRUCT_CHILD_GETTERS(trafficClassToQueueId, 3);
    STRUCT_CHILD_GETTERS(pfcPriorityToQueueId, 4);
    STRUCT_CHILD_GETTERS(trafficClassToPgId, 5);
    STRUCT_CHILD_GETTERS(pfcPriorityToPgId, 6);
    STRUCT_CHILD_GETTERS(trafficClassToVoqId, 7);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return dscpMaps(); }
    else if constexpr (__id == 2) { return expMaps(); }
    else if constexpr (__id == 3) { return trafficClassToQueueId(); }
    else if constexpr (__id == 4) { return pfcPriorityToQueueId(); }
    else if constexpr (__id == 5) { return trafficClassToPgId(); }
    else if constexpr (__id == 6) { return pfcPriorityToPgId(); }
    else if constexpr (__id == 7) { return trafficClassToVoqId(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PortPrbsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PortPrbsState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PortPrbsState>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PortPrbsState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PortPrbsState>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::enabled, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::polynominal, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::enabled, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::polynominal, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(enabled, 1);
    STRUCT_CHILD_GETTERS(polynominal, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return enabled(); }
    else if constexpr (__id == 2) { return polynominal(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::LabelForwardingEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::LabelForwardingEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::LabelForwardingEntryFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::LabelForwardingEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::LabelForwardingEntryFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::label, ChildThriftPath<::facebook::fboss::state::Label, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::nexthopsmulti, ChildThriftPath<::facebook::fboss::state::RouteNextHopsMulti, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::fwd, ChildThriftPath<::facebook::fboss::state::RouteNextHopEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::flags, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::classID, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::state::Label, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::state::RouteNextHopsMulti, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::state::RouteNextHopEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::label, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::nexthopsmulti, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::fwd, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::flags, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::classID, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(label, 1);
    STRUCT_CHILD_GETTERS(nexthopsmulti, 2);
    STRUCT_CHILD_GETTERS(fwd, 3);
    STRUCT_CHILD_GETTERS(flags, 4);
    STRUCT_CHILD_GETTERS(classID, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return label(); }
    else if constexpr (__id == 2) { return nexthopsmulti(); }
    else if constexpr (__id == 3) { return fwd(); }
    else if constexpr (__id == 4) { return flags(); }
    else if constexpr (__id == 5) { return classID(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::PortFlowletFields>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::PortFlowletFields>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::AclEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::AclEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::AclEntryFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::AclEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::AclEntryFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::priority, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::srcIp, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dstIp, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::proto, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
std::pair<strings::tcpFlagsBitMap, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
std::pair<strings::srcPort, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::dstPort, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::ipFrag, Child<::facebook::fboss::cfg::IpFragMatch, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::IpFragMatch>>>,
std::pair<strings::icmpType, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
std::pair<strings::icmpCode, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
std::pair<strings::dscp, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
std::pair<strings::ipType, Child<::facebook::fboss::cfg::IpType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::IpType>>>,
std::pair<strings::ttl, ChildThriftPath<::facebook::fboss::state::AclTtl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dstMac, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::l4SrcPort, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::l4DstPort, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::lookupClassL2, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
std::pair<strings::lookupClass, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
std::pair<strings::lookupClassNeighbor, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
std::pair<strings::lookupClassRoute, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
std::pair<strings::packetLookupResult, Child<::facebook::fboss::cfg::PacketLookupResultType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PacketLookupResultType>>>,
std::pair<strings::etherType, Child<::facebook::fboss::cfg::EtherType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::EtherType>>>,
std::pair<strings::actionType, Child<::facebook::fboss::cfg::AclActionType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclActionType>>>,
std::pair<strings::aclAction, ChildThriftPath<::facebook::fboss::state::MatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::vlanID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::enabled, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::udfGroups, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::roceOpcode, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
std::pair<strings::roceBytes, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::roceMask, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::udfTable, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclUdfEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::facebook::fboss::cfg::IpFragMatch, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::IpFragMatch>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::facebook::fboss::cfg::IpType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::IpType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, ChildThriftPath<::facebook::fboss::state::AclTtl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, Child<::facebook::fboss::cfg::PacketLookupResultType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PacketLookupResultType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, Child<::facebook::fboss::cfg::EtherType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::EtherType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, Child<::facebook::fboss::cfg::AclActionType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclActionType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, ChildThriftPath<::facebook::fboss::state::MatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 29>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 31>, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 32>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclUdfEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::priority, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::srcIp, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::dstIp, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::proto, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::tcpFlagsBitMap, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::srcPort, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::dstPort, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::ipFrag, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::icmpType, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::icmpCode, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::dscp, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::ipType, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::ttl, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::dstMac, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::l4SrcPort, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::l4DstPort, std::integral_constant<apache::thrift::field_id_t, 17>>,
std::pair<strings::lookupClassL2, std::integral_constant<apache::thrift::field_id_t, 18>>,
std::pair<strings::lookupClass, std::integral_constant<apache::thrift::field_id_t, 19>>,
std::pair<strings::lookupClassNeighbor, std::integral_constant<apache::thrift::field_id_t, 20>>,
std::pair<strings::lookupClassRoute, std::integral_constant<apache::thrift::field_id_t, 21>>,
std::pair<strings::packetLookupResult, std::integral_constant<apache::thrift::field_id_t, 22>>,
std::pair<strings::etherType, std::integral_constant<apache::thrift::field_id_t, 23>>,
std::pair<strings::actionType, std::integral_constant<apache::thrift::field_id_t, 24>>,
std::pair<strings::aclAction, std::integral_constant<apache::thrift::field_id_t, 25>>,
std::pair<strings::vlanID, std::integral_constant<apache::thrift::field_id_t, 26>>,
std::pair<strings::enabled, std::integral_constant<apache::thrift::field_id_t, 27>>,
std::pair<strings::udfGroups, std::integral_constant<apache::thrift::field_id_t, 28>>,
std::pair<strings::roceOpcode, std::integral_constant<apache::thrift::field_id_t, 29>>,
std::pair<strings::roceBytes, std::integral_constant<apache::thrift::field_id_t, 30>>,
std::pair<strings::roceMask, std::integral_constant<apache::thrift::field_id_t, 31>>,
std::pair<strings::udfTable, std::integral_constant<apache::thrift::field_id_t, 32>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(priority, 1);
    STRUCT_CHILD_GETTERS(name, 2);
    STRUCT_CHILD_GETTERS(srcIp, 3);
    STRUCT_CHILD_GETTERS(dstIp, 4);
    STRUCT_CHILD_GETTERS(proto, 5);
    STRUCT_CHILD_GETTERS(tcpFlagsBitMap, 6);
    STRUCT_CHILD_GETTERS(srcPort, 7);
    STRUCT_CHILD_GETTERS(dstPort, 8);
    STRUCT_CHILD_GETTERS(ipFrag, 9);
    STRUCT_CHILD_GETTERS(icmpType, 10);
    STRUCT_CHILD_GETTERS(icmpCode, 11);
    STRUCT_CHILD_GETTERS(dscp, 12);
    STRUCT_CHILD_GETTERS(ipType, 13);
    STRUCT_CHILD_GETTERS(ttl, 14);
    STRUCT_CHILD_GETTERS(dstMac, 15);
    STRUCT_CHILD_GETTERS(l4SrcPort, 16);
    STRUCT_CHILD_GETTERS(l4DstPort, 17);
    STRUCT_CHILD_GETTERS(lookupClassL2, 18);
    STRUCT_CHILD_GETTERS(lookupClass, 19);
    STRUCT_CHILD_GETTERS(lookupClassNeighbor, 20);
    STRUCT_CHILD_GETTERS(lookupClassRoute, 21);
    STRUCT_CHILD_GETTERS(packetLookupResult, 22);
    STRUCT_CHILD_GETTERS(etherType, 23);
    STRUCT_CHILD_GETTERS(actionType, 24);
    STRUCT_CHILD_GETTERS(aclAction, 25);
    STRUCT_CHILD_GETTERS(vlanID, 26);
    STRUCT_CHILD_GETTERS(enabled, 27);
    STRUCT_CHILD_GETTERS(udfGroups, 28);
    STRUCT_CHILD_GETTERS(roceOpcode, 29);
    STRUCT_CHILD_GETTERS(roceBytes, 30);
    STRUCT_CHILD_GETTERS(roceMask, 31);
    STRUCT_CHILD_GETTERS(udfTable, 32);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return priority(); }
    else if constexpr (__id == 2) { return name(); }
    else if constexpr (__id == 3) { return srcIp(); }
    else if constexpr (__id == 4) { return dstIp(); }
    else if constexpr (__id == 5) { return proto(); }
    else if constexpr (__id == 6) { return tcpFlagsBitMap(); }
    else if constexpr (__id == 7) { return srcPort(); }
    else if constexpr (__id == 8) { return dstPort(); }
    else if constexpr (__id == 9) { return ipFrag(); }
    else if constexpr (__id == 10) { return icmpType(); }
    else if constexpr (__id == 11) { return icmpCode(); }
    else if constexpr (__id == 12) { return dscp(); }
    else if constexpr (__id == 13) { return ipType(); }
    else if constexpr (__id == 14) { return ttl(); }
    else if constexpr (__id == 15) { return dstMac(); }
    else if constexpr (__id == 16) { return l4SrcPort(); }
    else if constexpr (__id == 17) { return l4DstPort(); }
    else if constexpr (__id == 18) { return lookupClassL2(); }
    else if constexpr (__id == 19) { return lookupClass(); }
    else if constexpr (__id == 20) { return lookupClassNeighbor(); }
    else if constexpr (__id == 21) { return lookupClassRoute(); }
    else if constexpr (__id == 22) { return packetLookupResult(); }
    else if constexpr (__id == 23) { return etherType(); }
    else if constexpr (__id == 24) { return actionType(); }
    else if constexpr (__id == 25) { return aclAction(); }
    else if constexpr (__id == 26) { return vlanID(); }
    else if constexpr (__id == 27) { return enabled(); }
    else if constexpr (__id == 28) { return udfGroups(); }
    else if constexpr (__id == 29) { return roceOpcode(); }
    else if constexpr (__id == 30) { return roceBytes(); }
    else if constexpr (__id == 31) { return roceMask(); }
    else if constexpr (__id == 32) { return udfTable(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i16_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i16_t>,
   Parent>;
  using Child = Path<::std::int16_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::Vlan>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::Vlan>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::Vlan>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::Vlan>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::Vlan>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::Vlan, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PktLenRange, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PktLenRange,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PktLenRange>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PktLenRange,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PktLenRange>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::min, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::max, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::invert, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::min, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::max, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::invert, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(min, 1);
    STRUCT_CHILD_GETTERS(max, 2);
    STRUCT_CHILD_GETTERS(invert, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return min(); }
    else if constexpr (__id == 2) { return max(); }
    else if constexpr (__id == 3) { return invert(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExactMatchTableConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::ExactMatchTableConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::ExactMatchTableConfig>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::ExactMatchTableConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::ExactMatchTableConfig>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::ExactMatchTableConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::bcm::BcmConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::bcm::BcmConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::bcm::BcmConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::bcm::BcmConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::bcm::BcmConfig>,
   Parent>;
  using strings = ::facebook::fboss::bcm::bcm_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::config, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::yamlConfig, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::config, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::yamlConfig, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(config, 1);
    STRUCT_CHILD_GETTERS(yamlConfig, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return config(); }
    else if constexpr (__id == 2) { return yamlConfig(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PortPgConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PortPgConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortPgConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PortPgConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortPgConfig>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::id, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::scalingFactor, Child<::facebook::fboss::cfg::MMUScalingFactor, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::MMUScalingFactor>>>,
std::pair<strings::minLimitBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::headroomLimitBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::resumeOffsetBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::bufferPoolName, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::MMUScalingFactor, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::MMUScalingFactor>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::id, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::scalingFactor, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::minLimitBytes, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::headroomLimitBytes, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::resumeOffsetBytes, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::bufferPoolName, std::integral_constant<apache::thrift::field_id_t, 7>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(id, 1);
    STRUCT_CHILD_GETTERS(name, 2);
    STRUCT_CHILD_GETTERS(scalingFactor, 3);
    STRUCT_CHILD_GETTERS(minLimitBytes, 4);
    STRUCT_CHILD_GETTERS(headroomLimitBytes, 5);
    STRUCT_CHILD_GETTERS(resumeOffsetBytes, 6);
    STRUCT_CHILD_GETTERS(bufferPoolName, 7);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return id(); }
    else if constexpr (__id == 2) { return name(); }
    else if constexpr (__id == 3) { return scalingFactor(); }
    else if constexpr (__id == 4) { return minLimitBytes(); }
    else if constexpr (__id == 5) { return headroomLimitBytes(); }
    else if constexpr (__id == 6) { return resumeOffsetBytes(); }
    else if constexpr (__id == 7) { return bufferPoolName(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::StaticRouteNoNextHops, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::StaticRouteNoNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticRouteNoNextHops>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::StaticRouteNoNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticRouteNoNextHops>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::routerID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::prefix, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::routerID, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::prefix, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(routerID, 1);
    STRUCT_CHILD_GETTERS(prefix, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return routerID(); }
    else if constexpr (__id == 2) { return prefix(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::PortQueue>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortQueue>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::PortQueue>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortQueue>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::PortQueue, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::IpInIpTunnel>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::IpInIpTunnel>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::IpInIpTunnel>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::IpInIpTunnel>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::IpInIpTunnel>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::IpInIpTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::AggregatePort, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::AggregatePort,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::AggregatePort>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::AggregatePort,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::AggregatePort>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::key, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::description, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::memberPorts, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AggregatePortMember>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::minimumCapacity, ChildThriftPath<::facebook::fboss::cfg::MinimumCapacity, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::counterTags, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AggregatePortMember>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::cfg::MinimumCapacity, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::key, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::description, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::memberPorts, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::minimumCapacity, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::counterTags, std::integral_constant<apache::thrift::field_id_t, 6>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(key, 1);
    STRUCT_CHILD_GETTERS(name, 2);
    STRUCT_CHILD_GETTERS(description, 3);
    STRUCT_CHILD_GETTERS(memberPorts, 4);
    STRUCT_CHILD_GETTERS(minimumCapacity, 5);
    STRUCT_CHILD_GETTERS(counterTags, 6);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return key(); }
    else if constexpr (__id == 2) { return name(); }
    else if constexpr (__id == 3) { return description(); }
    else if constexpr (__id == 4) { return memberPorts(); }
    else if constexpr (__id == 5) { return minimumCapacity(); }
    else if constexpr (__id == 6) { return counterTags(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::TransceiverSpecFields>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::TransceiverSpecFields>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::RouteNextHopEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::RouteNextHopEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::RouteNextHopEntry>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::RouteNextHopEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::RouteNextHopEntry>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::adminDistance, Child<::facebook::fboss::AdminDistance, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::AdminDistance>>>,
std::pair<strings::action, Child<::facebook::fboss::RouteForwardAction, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::RouteForwardAction>>>,
std::pair<strings::counterID, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::classID, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
std::pair<strings::nexthops, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::AdminDistance, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::AdminDistance>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::RouteForwardAction, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::RouteForwardAction>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::adminDistance, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::action, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::counterID, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::classID, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::nexthops, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(adminDistance, 1);
    STRUCT_CHILD_GETTERS(action, 2);
    STRUCT_CHILD_GETTERS(counterID, 3);
    STRUCT_CHILD_GETTERS(classID, 4);
    STRUCT_CHILD_GETTERS(nexthops, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return adminDistance(); }
    else if constexpr (__id == 2) { return action(); }
    else if constexpr (__id == 3) { return counterID(); }
    else if constexpr (__id == 4) { return classID(); }
    else if constexpr (__id == 5) { return nexthops(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::UdfPacketMatcher, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::UdfPacketMatcher,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::UdfPacketMatcher>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::UdfPacketMatcher,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::UdfPacketMatcher>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::l2PktType, Child<::facebook::fboss::cfg::UdfMatchL2Type, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::UdfMatchL2Type>>>,
std::pair<strings::l3pktType, Child<::facebook::fboss::cfg::UdfMatchL3Type, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::UdfMatchL3Type>>>,
std::pair<strings::l4PktType, Child<::facebook::fboss::cfg::UdfMatchL4Type, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::UdfMatchL4Type>>>,
std::pair<strings::UdfL4DstPort, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::UdfMatchL2Type, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::UdfMatchL2Type>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::UdfMatchL3Type, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::UdfMatchL3Type>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::cfg::UdfMatchL4Type, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::UdfMatchL4Type>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::l2PktType, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::l3pktType, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::l4PktType, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::UdfL4DstPort, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(name, 1);
    STRUCT_CHILD_GETTERS(l2PktType, 2);
    STRUCT_CHILD_GETTERS(l3pktType, 3);
    STRUCT_CHILD_GETTERS(l4PktType, 4);
    STRUCT_CHILD_GETTERS(UdfL4DstPort, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return name(); }
    else if constexpr (__id == 2) { return l2PktType(); }
    else if constexpr (__id == 3) { return l3pktType(); }
    else if constexpr (__id == 4) { return l4PktType(); }
    else if constexpr (__id == 5) { return UdfL4DstPort(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableActionType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::AclTableActionType>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::list<::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclTableActionType>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::AclTableActionType>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::list<::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclTableActionType>>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::AclTableActionType, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclTableActionType>, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::LoadBalancerID>, ::apache::thrift::type::struct_t<::facebook::fboss::state::LoadBalancerFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::LoadBalancerID>, ::apache::thrift::type::struct_t<::facebook::fboss::state::LoadBalancerFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::LoadBalancerFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::LoadBalancerID);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::QosPolicy>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::QosPolicy>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::QosPolicy>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::QosPolicy>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::QosPolicy>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::QosPolicy, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::SetTcAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::SetTcAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SetTcAction>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::SetTcAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SetTcAction>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::tcValue, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::tcValue, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(tcValue, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return tcValue(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::PlatformAttributes>, ::apache::thrift::type::string_t>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::PlatformAttributes>, ::apache::thrift::type::string_t>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Fields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Fields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Fields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Fields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Fields>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::ipv4Fields, ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv4Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::ipv6Fields, ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv6Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::transportFields, ChildThriftPath<::std::set<::facebook::fboss::cfg::TransportField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::mplsFields, ChildThriftPath<::std::set<::facebook::fboss::cfg::MPLSField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::udfGroups, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv4Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv6Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::set<::facebook::fboss::cfg::TransportField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::set<::facebook::fboss::cfg::MPLSField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::ipv4Fields, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::ipv6Fields, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::transportFields, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::mplsFields, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::udfGroups, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(ipv4Fields, 1);
    STRUCT_CHILD_GETTERS(ipv6Fields, 2);
    STRUCT_CHILD_GETTERS(transportFields, 3);
    STRUCT_CHILD_GETTERS(mplsFields, 4);
    STRUCT_CHILD_GETTERS(udfGroups, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return ipv4Fields(); }
    else if constexpr (__id == 2) { return ipv6Fields(); }
    else if constexpr (__id == 3) { return transportFields(); }
    else if constexpr (__id == 4) { return mplsFields(); }
    else if constexpr (__id == 5) { return udfGroups(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::StaticRouteNoNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticRouteNoNextHops>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::StaticRouteNoNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticRouteNoNextHops>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::StaticRouteNoNextHops, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::SetTc, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::SetTc,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::SetTc>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::SetTc,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::SetTc>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::action, ChildThriftPath<::facebook::fboss::cfg::SetTcAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::sendToCPU, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::SetTcAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::action, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::sendToCPU, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(action, 1);
    STRUCT_CHILD_GETTERS(sendToCPU, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return action(); }
    else if constexpr (__id == 2) { return sendToCPU(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::TrafficCounter, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::TrafficCounter,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::TrafficCounter>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::TrafficCounter,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::TrafficCounter>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::types, ChildThriftPath<::std::vector<::facebook::fboss::cfg::CounterType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::CounterType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::types, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(name, 1);
    STRUCT_CHILD_GETTERS(types, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return name(); }
    else if constexpr (__id == 2) { return types(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QosRule, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QosRule,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::QosRule>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QosRule,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::QosRule>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::queueId, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::dscp, ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::queueId, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::dscp, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(queueId, 1);
    STRUCT_CHILD_GETTERS(dscp, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return queueId(); }
    else if constexpr (__id == 2) { return dscp(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PinConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PinConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PinConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PinConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PinConfig>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::id, ChildThriftPath<::facebook::fboss::phy::PinID, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::tx, ChildThriftPath<::facebook::fboss::phy::TxSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::rx, ChildThriftPath<::facebook::fboss::phy::RxSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::laneMap, ChildThriftPath<::facebook::fboss::phy::LaneMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::polaritySwap, ChildThriftPath<::facebook::fboss::phy::PolaritySwap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::phy::PinID, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::phy::TxSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::phy::RxSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::phy::LaneMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::phy::PolaritySwap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::id, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::tx, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::rx, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::laneMap, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::polaritySwap, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(id, 1);
    STRUCT_CHILD_GETTERS(tx, 2);
    STRUCT_CHILD_GETTERS(rx, 3);
    STRUCT_CHILD_GETTERS(laneMap, 4);
    STRUCT_CHILD_GETTERS(polaritySwap, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return id(); }
    else if constexpr (__id == 2) { return tx(); }
    else if constexpr (__id == 3) { return rx(); }
    else if constexpr (__id == 4) { return laneMap(); }
    else if constexpr (__id == 5) { return polaritySwap(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::AggregatePortFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::AggregatePortFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::AggregatePortFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::AggregatePortFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::AggregatePortFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::id, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::description, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::systemPriority, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::systemID, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::minimumLinkCount, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::ports, ChildThriftPath<::std::vector<::facebook::fboss::state::Subport>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::portToFwdState, ChildThriftPath<::std::map<::std::int32_t, bool>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::portToPartnerState, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::ParticipantInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::interfaceIDs, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::vector<::facebook::fboss::state::Subport>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::std::map<::std::int32_t, bool>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::ParticipantInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::id, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::description, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::systemPriority, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::systemID, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::minimumLinkCount, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::ports, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::portToFwdState, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::portToPartnerState, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::interfaceIDs, std::integral_constant<apache::thrift::field_id_t, 10>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(id, 1);
    STRUCT_CHILD_GETTERS(name, 2);
    STRUCT_CHILD_GETTERS(description, 3);
    STRUCT_CHILD_GETTERS(systemPriority, 4);
    STRUCT_CHILD_GETTERS(systemID, 5);
    STRUCT_CHILD_GETTERS(minimumLinkCount, 6);
    STRUCT_CHILD_GETTERS(ports, 7);
    STRUCT_CHILD_GETTERS(portToFwdState, 8);
    STRUCT_CHILD_GETTERS(portToPartnerState, 9);
    STRUCT_CHILD_GETTERS(interfaceIDs, 10);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return id(); }
    else if constexpr (__id == 2) { return name(); }
    else if constexpr (__id == 3) { return description(); }
    else if constexpr (__id == 4) { return systemPriority(); }
    else if constexpr (__id == 5) { return systemID(); }
    else if constexpr (__id == 6) { return minimumLinkCount(); }
    else if constexpr (__id == 7) { return ports(); }
    else if constexpr (__id == 8) { return portToFwdState(); }
    else if constexpr (__id == 9) { return portToPartnerState(); }
    else if constexpr (__id == 10) { return interfaceIDs(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::std::int8_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   ::apache::thrift::type::list<::apache::thrift::type::byte_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::std::int8_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   ::apache::thrift::type::list<::apache::thrift::type::byte_t>,
   Parent>;
  using Child = Path<::std::int8_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Vlan, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Vlan,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Vlan>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Vlan,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Vlan>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::id, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::recordStats, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::routable, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::ipAddresses, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dhcpRelayAddressV4, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dhcpRelayAddressV6, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dhcpRelayOverridesV4, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dhcpRelayOverridesV6, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::intfID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::id, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::recordStats, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::routable, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::ipAddresses, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::dhcpRelayAddressV4, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::dhcpRelayAddressV6, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::dhcpRelayOverridesV4, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::dhcpRelayOverridesV6, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::intfID, std::integral_constant<apache::thrift::field_id_t, 11>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(name, 1);
    STRUCT_CHILD_GETTERS(id, 2);
    STRUCT_CHILD_GETTERS(recordStats, 3);
    STRUCT_CHILD_GETTERS(routable, 5);
    STRUCT_CHILD_GETTERS(ipAddresses, 6);
    STRUCT_CHILD_GETTERS(dhcpRelayAddressV4, 7);
    STRUCT_CHILD_GETTERS(dhcpRelayAddressV6, 8);
    STRUCT_CHILD_GETTERS(dhcpRelayOverridesV4, 9);
    STRUCT_CHILD_GETTERS(dhcpRelayOverridesV6, 10);
    STRUCT_CHILD_GETTERS(intfID, 11);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return name(); }
    else if constexpr (__id == 2) { return id(); }
    else if constexpr (__id == 3) { return recordStats(); }
    else if constexpr (__id == 5) { return routable(); }
    else if constexpr (__id == 6) { return ipAddresses(); }
    else if constexpr (__id == 7) { return dhcpRelayAddressV4(); }
    else if constexpr (__id == 8) { return dhcpRelayAddressV6(); }
    else if constexpr (__id == 9) { return dhcpRelayOverridesV4(); }
    else if constexpr (__id == 10) { return dhcpRelayOverridesV6(); }
    else if constexpr (__id == 11) { return intfID(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortProfileID>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::PortProfileID>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::list<::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortProfileID>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::PortProfileID>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::list<::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortProfileID>>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::PortProfileID, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortProfileID>, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::QsfpServiceData, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::QsfpServiceData,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::QsfpServiceData>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::QsfpServiceData,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::QsfpServiceData>,
   Parent>;
  using strings = ::facebook::fboss::state::qsfp_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::config, ChildThriftPath<::facebook::fboss::cfg::QsfpServiceConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::state, ChildThriftPath<::facebook::fboss::state::QsfpState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::QsfpServiceConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::state::QsfpState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::config, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::state, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(config, 1);
    STRUCT_CHILD_GETTERS(state, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return config(); }
    else if constexpr (__id == 2) { return state(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::BufferPoolFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::BufferPoolFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::BufferPoolFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::RedirectToNextHopAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::RedirectToNextHopAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::RedirectToNextHopAction>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::RedirectToNextHopAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::RedirectToNextHopAction>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::action, ChildThriftPath<::facebook::fboss::cfg::RedirectToNextHopAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::resolvedNexthops, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::RedirectToNextHopAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::action, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::resolvedNexthops, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(action, 1);
    STRUCT_CHILD_GETTERS(resolvedNexthops, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return action(); }
    else if constexpr (__id == 2) { return resolvedNexthops(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::SflowCollectorFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::SflowCollectorFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::SflowCollectorFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::SflowCollectorFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::SflowCollectorFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::id, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::address, ChildThriftPath<::facebook::fboss::state::SocketAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::state::SocketAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::id, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::address, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(id, 1);
    STRUCT_CHILD_GETTERS(address, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return id(); }
    else if constexpr (__id == 2) { return address(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::SwitchConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::SwitchConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SwitchConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::SwitchConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SwitchConfig>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::version, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::ports, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Port>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::vlans, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Vlan>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::vlanPorts, ChildThriftPath<::std::vector<::facebook::fboss::cfg::VlanPort>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::defaultVlan, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::interfaces, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Interface>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::arpTimeoutSeconds, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::arpRefreshSeconds, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::arpAgerInterval, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::proactiveArp, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::cpuMAC, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::staticRoutesWithNhops, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteWithNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::staticRoutesToNull, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::staticRoutesToCPU, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::acls, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::maxNeighborProbes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::staleEntryInterval, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::aggregatePorts, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AggregatePort>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::clientIdToAdminDistance, ChildThriftPath<::std::map<::std::int32_t, ::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dhcpRelaySrcOverrideV4, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dhcpRelaySrcOverrideV6, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dhcpReplySrcOverrideV4, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dhcpReplySrcOverrideV6, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::globalEgressTrafficPolicy_DEPRECATED, ChildThriftPath<::facebook::fboss::cfg::TrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::config_version, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::sFlowCollectors, ChildThriftPath<::std::vector<::facebook::fboss::cfg::SflowCollector>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::lacp, ChildThriftPath<::facebook::fboss::cfg::Lacp, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::cpuQueues, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::cpuTrafficPolicy, ChildThriftPath<::facebook::fboss::cfg::CPUTrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::loadBalancers, ChildThriftPath<::std::vector<::facebook::fboss::cfg::LoadBalancer>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dataPlaneTrafficPolicy, ChildThriftPath<::facebook::fboss::cfg::TrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::mirrors, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Mirror>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::trafficCounters, ChildThriftPath<::std::vector<::facebook::fboss::cfg::TrafficCounter>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::qosPolicies, ChildThriftPath<::std::vector<::facebook::fboss::cfg::QosPolicy>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::defaultPortQueues, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::staticMplsRoutesWithNhops, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteWithNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::staticMplsRoutesToNull, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::staticMplsRoutesToCPU, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::staticIp2MplsRoutes, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticIp2MplsRoute>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::portQueueConfigs, ChildThriftPath<::std::map<::facebook::fboss::cfg::PortQueueConfigName, ::std::vector<::facebook::fboss::cfg::PortQueue>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::switchSettings, ChildThriftPath<::facebook::fboss::cfg::SwitchSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::qcmConfig, ChildThriftPath<::facebook::fboss::cfg::QcmConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::portPgConfigs, ChildThriftPath<::std::map<::facebook::fboss::cfg::PortPgConfigName, ::std::vector<::facebook::fboss::cfg::PortPgConfig>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::bufferPoolConfigs, ChildThriftPath<::std::map<::facebook::fboss::cfg::BufferPoolConfigName, ::facebook::fboss::cfg::BufferPoolConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::aclTableGroup, ChildThriftPath<::facebook::fboss::cfg::AclTableGroup, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::sdkVersion, ChildThriftPath<::facebook::fboss::cfg::SdkVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::ipInIpTunnels, ChildThriftPath<::std::vector<::facebook::fboss::cfg::IpInIpTunnel>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dsfNodes, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::udfConfig, ChildThriftPath<::facebook::fboss::cfg::UdfConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::flowletSwitchingConfig, ChildThriftPath<::facebook::fboss::cfg::FlowletSwitchingConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::defaultVoqConfig, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::portFlowletConfigs, ChildThriftPath<::std::map<::facebook::fboss::cfg::PortFlowletConfigName, ::facebook::fboss::cfg::PortFlowletConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::icmpV4UnavailableSrcAddress, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::hostname, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Port>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Vlan>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::VlanPort>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Interface>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteWithNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AggregatePort>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, ChildThriftPath<::std::map<::std::int32_t, ::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, ChildThriftPath<::facebook::fboss::cfg::TrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::SflowCollector>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, ChildThriftPath<::facebook::fboss::cfg::Lacp, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 29>, ChildThriftPath<::facebook::fboss::cfg::CPUTrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::LoadBalancer>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 31>, ChildThriftPath<::facebook::fboss::cfg::TrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 32>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Mirror>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 33>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::TrafficCounter>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 34>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::QosPolicy>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 35>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 36>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteWithNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 37>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 38>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 39>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticIp2MplsRoute>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 40>, ChildThriftPath<::std::map<::facebook::fboss::cfg::PortQueueConfigName, ::std::vector<::facebook::fboss::cfg::PortQueue>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 41>, ChildThriftPath<::facebook::fboss::cfg::SwitchSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 42>, ChildThriftPath<::facebook::fboss::cfg::QcmConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 43>, ChildThriftPath<::std::map<::facebook::fboss::cfg::PortPgConfigName, ::std::vector<::facebook::fboss::cfg::PortPgConfig>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 44>, ChildThriftPath<::std::map<::facebook::fboss::cfg::BufferPoolConfigName, ::facebook::fboss::cfg::BufferPoolConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 45>, ChildThriftPath<::facebook::fboss::cfg::AclTableGroup, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 46>, ChildThriftPath<::facebook::fboss::cfg::SdkVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 47>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::IpInIpTunnel>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 48>, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 49>, ChildThriftPath<::facebook::fboss::cfg::UdfConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 50>, ChildThriftPath<::facebook::fboss::cfg::FlowletSwitchingConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 51>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 52>, ChildThriftPath<::std::map<::facebook::fboss::cfg::PortFlowletConfigName, ::facebook::fboss::cfg::PortFlowletConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 53>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 54>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::version, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::ports, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::vlans, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::vlanPorts, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::defaultVlan, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::interfaces, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::arpTimeoutSeconds, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::arpRefreshSeconds, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::arpAgerInterval, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::proactiveArp, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::cpuMAC, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::staticRoutesWithNhops, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::staticRoutesToNull, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::staticRoutesToCPU, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::acls, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::maxNeighborProbes, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::staleEntryInterval, std::integral_constant<apache::thrift::field_id_t, 17>>,
std::pair<strings::aggregatePorts, std::integral_constant<apache::thrift::field_id_t, 18>>,
std::pair<strings::clientIdToAdminDistance, std::integral_constant<apache::thrift::field_id_t, 19>>,
std::pair<strings::dhcpRelaySrcOverrideV4, std::integral_constant<apache::thrift::field_id_t, 20>>,
std::pair<strings::dhcpRelaySrcOverrideV6, std::integral_constant<apache::thrift::field_id_t, 21>>,
std::pair<strings::dhcpReplySrcOverrideV4, std::integral_constant<apache::thrift::field_id_t, 22>>,
std::pair<strings::dhcpReplySrcOverrideV6, std::integral_constant<apache::thrift::field_id_t, 23>>,
std::pair<strings::globalEgressTrafficPolicy_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 24>>,
std::pair<strings::config_version, std::integral_constant<apache::thrift::field_id_t, 25>>,
std::pair<strings::sFlowCollectors, std::integral_constant<apache::thrift::field_id_t, 26>>,
std::pair<strings::lacp, std::integral_constant<apache::thrift::field_id_t, 27>>,
std::pair<strings::cpuQueues, std::integral_constant<apache::thrift::field_id_t, 28>>,
std::pair<strings::cpuTrafficPolicy, std::integral_constant<apache::thrift::field_id_t, 29>>,
std::pair<strings::loadBalancers, std::integral_constant<apache::thrift::field_id_t, 30>>,
std::pair<strings::dataPlaneTrafficPolicy, std::integral_constant<apache::thrift::field_id_t, 31>>,
std::pair<strings::mirrors, std::integral_constant<apache::thrift::field_id_t, 32>>,
std::pair<strings::trafficCounters, std::integral_constant<apache::thrift::field_id_t, 33>>,
std::pair<strings::qosPolicies, std::integral_constant<apache::thrift::field_id_t, 34>>,
std::pair<strings::defaultPortQueues, std::integral_constant<apache::thrift::field_id_t, 35>>,
std::pair<strings::staticMplsRoutesWithNhops, std::integral_constant<apache::thrift::field_id_t, 36>>,
std::pair<strings::staticMplsRoutesToNull, std::integral_constant<apache::thrift::field_id_t, 37>>,
std::pair<strings::staticMplsRoutesToCPU, std::integral_constant<apache::thrift::field_id_t, 38>>,
std::pair<strings::staticIp2MplsRoutes, std::integral_constant<apache::thrift::field_id_t, 39>>,
std::pair<strings::portQueueConfigs, std::integral_constant<apache::thrift::field_id_t, 40>>,
std::pair<strings::switchSettings, std::integral_constant<apache::thrift::field_id_t, 41>>,
std::pair<strings::qcmConfig, std::integral_constant<apache::thrift::field_id_t, 42>>,
std::pair<strings::portPgConfigs, std::integral_constant<apache::thrift::field_id_t, 43>>,
std::pair<strings::bufferPoolConfigs, std::integral_constant<apache::thrift::field_id_t, 44>>,
std::pair<strings::aclTableGroup, std::integral_constant<apache::thrift::field_id_t, 45>>,
std::pair<strings::sdkVersion, std::integral_constant<apache::thrift::field_id_t, 46>>,
std::pair<strings::ipInIpTunnels, std::integral_constant<apache::thrift::field_id_t, 47>>,
std::pair<strings::dsfNodes, std::integral_constant<apache::thrift::field_id_t, 48>>,
std::pair<strings::udfConfig, std::integral_constant<apache::thrift::field_id_t, 49>>,
std::pair<strings::flowletSwitchingConfig, std::integral_constant<apache::thrift::field_id_t, 50>>,
std::pair<strings::defaultVoqConfig, std::integral_constant<apache::thrift::field_id_t, 51>>,
std::pair<strings::portFlowletConfigs, std::integral_constant<apache::thrift::field_id_t, 52>>,
std::pair<strings::icmpV4UnavailableSrcAddress, std::integral_constant<apache::thrift::field_id_t, 53>>,
std::pair<strings::hostname, std::integral_constant<apache::thrift::field_id_t, 54>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(version, 1);
    STRUCT_CHILD_GETTERS(ports, 2);
    STRUCT_CHILD_GETTERS(vlans, 3);
    STRUCT_CHILD_GETTERS(vlanPorts, 4);
    STRUCT_CHILD_GETTERS(defaultVlan, 5);
    STRUCT_CHILD_GETTERS(interfaces, 6);
    STRUCT_CHILD_GETTERS(arpTimeoutSeconds, 7);
    STRUCT_CHILD_GETTERS(arpRefreshSeconds, 8);
    STRUCT_CHILD_GETTERS(arpAgerInterval, 9);
    STRUCT_CHILD_GETTERS(proactiveArp, 10);
    STRUCT_CHILD_GETTERS(cpuMAC, 11);
    STRUCT_CHILD_GETTERS(staticRoutesWithNhops, 12);
    STRUCT_CHILD_GETTERS(staticRoutesToNull, 13);
    STRUCT_CHILD_GETTERS(staticRoutesToCPU, 14);
    STRUCT_CHILD_GETTERS(acls, 15);
    STRUCT_CHILD_GETTERS(maxNeighborProbes, 16);
    STRUCT_CHILD_GETTERS(staleEntryInterval, 17);
    STRUCT_CHILD_GETTERS(aggregatePorts, 18);
    STRUCT_CHILD_GETTERS(clientIdToAdminDistance, 19);
    STRUCT_CHILD_GETTERS(dhcpRelaySrcOverrideV4, 20);
    STRUCT_CHILD_GETTERS(dhcpRelaySrcOverrideV6, 21);
    STRUCT_CHILD_GETTERS(dhcpReplySrcOverrideV4, 22);
    STRUCT_CHILD_GETTERS(dhcpReplySrcOverrideV6, 23);
    STRUCT_CHILD_GETTERS(globalEgressTrafficPolicy_DEPRECATED, 24);
    STRUCT_CHILD_GETTERS(config_version, 25);
    STRUCT_CHILD_GETTERS(sFlowCollectors, 26);
    STRUCT_CHILD_GETTERS(lacp, 27);
    STRUCT_CHILD_GETTERS(cpuQueues, 28);
    STRUCT_CHILD_GETTERS(cpuTrafficPolicy, 29);
    STRUCT_CHILD_GETTERS(loadBalancers, 30);
    STRUCT_CHILD_GETTERS(dataPlaneTrafficPolicy, 31);
    STRUCT_CHILD_GETTERS(mirrors, 32);
    STRUCT_CHILD_GETTERS(trafficCounters, 33);
    STRUCT_CHILD_GETTERS(qosPolicies, 34);
    STRUCT_CHILD_GETTERS(defaultPortQueues, 35);
    STRUCT_CHILD_GETTERS(staticMplsRoutesWithNhops, 36);
    STRUCT_CHILD_GETTERS(staticMplsRoutesToNull, 37);
    STRUCT_CHILD_GETTERS(staticMplsRoutesToCPU, 38);
    STRUCT_CHILD_GETTERS(staticIp2MplsRoutes, 39);
    STRUCT_CHILD_GETTERS(portQueueConfigs, 40);
    STRUCT_CHILD_GETTERS(switchSettings, 41);
    STRUCT_CHILD_GETTERS(qcmConfig, 42);
    STRUCT_CHILD_GETTERS(portPgConfigs, 43);
    STRUCT_CHILD_GETTERS(bufferPoolConfigs, 44);
    STRUCT_CHILD_GETTERS(aclTableGroup, 45);
    STRUCT_CHILD_GETTERS(sdkVersion, 46);
    STRUCT_CHILD_GETTERS(ipInIpTunnels, 47);
    STRUCT_CHILD_GETTERS(dsfNodes, 48);
    STRUCT_CHILD_GETTERS(udfConfig, 49);
    STRUCT_CHILD_GETTERS(flowletSwitchingConfig, 50);
    STRUCT_CHILD_GETTERS(defaultVoqConfig, 51);
    STRUCT_CHILD_GETTERS(portFlowletConfigs, 52);
    STRUCT_CHILD_GETTERS(icmpV4UnavailableSrcAddress, 53);
    STRUCT_CHILD_GETTERS(hostname, 54);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return version(); }
    else if constexpr (__id == 2) { return ports(); }
    else if constexpr (__id == 3) { return vlans(); }
    else if constexpr (__id == 4) { return vlanPorts(); }
    else if constexpr (__id == 5) { return defaultVlan(); }
    else if constexpr (__id == 6) { return interfaces(); }
    else if constexpr (__id == 7) { return arpTimeoutSeconds(); }
    else if constexpr (__id == 8) { return arpRefreshSeconds(); }
    else if constexpr (__id == 9) { return arpAgerInterval(); }
    else if constexpr (__id == 10) { return proactiveArp(); }
    else if constexpr (__id == 11) { return cpuMAC(); }
    else if constexpr (__id == 12) { return staticRoutesWithNhops(); }
    else if constexpr (__id == 13) { return staticRoutesToNull(); }
    else if constexpr (__id == 14) { return staticRoutesToCPU(); }
    else if constexpr (__id == 15) { return acls(); }
    else if constexpr (__id == 16) { return maxNeighborProbes(); }
    else if constexpr (__id == 17) { return staleEntryInterval(); }
    else if constexpr (__id == 18) { return aggregatePorts(); }
    else if constexpr (__id == 19) { return clientIdToAdminDistance(); }
    else if constexpr (__id == 20) { return dhcpRelaySrcOverrideV4(); }
    else if constexpr (__id == 21) { return dhcpRelaySrcOverrideV6(); }
    else if constexpr (__id == 22) { return dhcpReplySrcOverrideV4(); }
    else if constexpr (__id == 23) { return dhcpReplySrcOverrideV6(); }
    else if constexpr (__id == 24) { return globalEgressTrafficPolicy_DEPRECATED(); }
    else if constexpr (__id == 25) { return config_version(); }
    else if constexpr (__id == 26) { return sFlowCollectors(); }
    else if constexpr (__id == 27) { return lacp(); }
    else if constexpr (__id == 28) { return cpuQueues(); }
    else if constexpr (__id == 29) { return cpuTrafficPolicy(); }
    else if constexpr (__id == 30) { return loadBalancers(); }
    else if constexpr (__id == 31) { return dataPlaneTrafficPolicy(); }
    else if constexpr (__id == 32) { return mirrors(); }
    else if constexpr (__id == 33) { return trafficCounters(); }
    else if constexpr (__id == 34) { return qosPolicies(); }
    else if constexpr (__id == 35) { return defaultPortQueues(); }
    else if constexpr (__id == 36) { return staticMplsRoutesWithNhops(); }
    else if constexpr (__id == 37) { return staticMplsRoutesToNull(); }
    else if constexpr (__id == 38) { return staticMplsRoutesToCPU(); }
    else if constexpr (__id == 39) { return staticIp2MplsRoutes(); }
    else if constexpr (__id == 40) { return portQueueConfigs(); }
    else if constexpr (__id == 41) { return switchSettings(); }
    else if constexpr (__id == 42) { return qcmConfig(); }
    else if constexpr (__id == 43) { return portPgConfigs(); }
    else if constexpr (__id == 44) { return bufferPoolConfigs(); }
    else if constexpr (__id == 45) { return aclTableGroup(); }
    else if constexpr (__id == 46) { return sdkVersion(); }
    else if constexpr (__id == 47) { return ipInIpTunnels(); }
    else if constexpr (__id == 48) { return dsfNodes(); }
    else if constexpr (__id == 49) { return udfConfig(); }
    else if constexpr (__id == 50) { return flowletSwitchingConfig(); }
    else if constexpr (__id == 51) { return defaultVoqConfig(); }
    else if constexpr (__id == 52) { return portFlowletConfigs(); }
    else if constexpr (__id == 53) { return icmpV4UnavailableSrcAddress(); }
    else if constexpr (__id == 54) { return hostname(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QueueMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QueueMatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::QueueMatchAction>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QueueMatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::QueueMatchAction>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::queueId, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::queueId, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(queueId, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return queueId(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PacketCounterMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PacketCounterMatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PacketCounterMatchAction>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PacketCounterMatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PacketCounterMatchAction>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::counterName, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::counterName, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(counterName, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return counterName(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::MacAndVlan, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::MacAndVlan,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::MacAndVlan>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::MacAndVlan,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::MacAndVlan>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::vlanID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::macAddress, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::vlanID, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::macAddress, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(vlanID, 1);
    STRUCT_CHILD_GETTERS(macAddress, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return vlanID(); }
    else if constexpr (__id == 2) { return macAddress(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QueueCongestionDetection, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QueueCongestionDetection,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   ::apache::thrift::type::union_t<::facebook::fboss::cfg::QueueCongestionDetection>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QueueCongestionDetection,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   ::apache::thrift::type::union_t<::facebook::fboss::cfg::QueueCongestionDetection>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::linear, ChildThriftPath<::facebook::fboss::cfg::LinearQueueCongestionDetection, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::LinearQueueCongestionDetection, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::linear, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(linear, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return linear(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::ChipConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::ChipConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   ::apache::thrift::type::union_t<::facebook::fboss::cfg::ChipConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::ChipConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   ::apache::thrift::type::union_t<::facebook::fboss::cfg::ChipConfig>,
   Parent>;
  using strings = ::facebook::fboss::cfg::platform_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::bcm, ChildThriftPath<::facebook::fboss::bcm::BcmConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::asic, ChildThriftPath<::facebook::fboss::asic::AsicConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::asicConfig, ChildThriftPath<::facebook::fboss::cfg::AsicConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::bcm::BcmConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::asic::AsicConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::cfg::AsicConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::bcm, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::asic, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::asicConfig, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(bcm, 1);
    STRUCT_CHILD_GETTERS(asic, 2);
    STRUCT_CHILD_GETTERS(asicConfig, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return bcm(); }
    else if constexpr (__id == 2) { return asic(); }
    else if constexpr (__id == 3) { return asicConfig(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QcmConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QcmConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::QcmConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QcmConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::QcmConfig>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::numFlowSamplesPerView, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::flowLimit, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::numFlowsClear, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::scanIntervalInUsecs, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::exportThreshold, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::flowWeights, ChildThriftPath<::std::map<::facebook::fboss::cfg::BurstMonitorWeight, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::agingIntervalInMsecs, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::collectorDstIp, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::collectorSrcPort, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::collectorDstPort, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::collectorDscp, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::ppsToQcm, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::collectorSrcIp, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::monitorQcmPortList, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::port2QosQueueIds, ChildThriftPath<::std::map<::std::int32_t, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::monitorQcmCfgPortsOnly, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::map<::facebook::fboss::cfg::BurstMonitorWeight, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, ChildThriftPath<::std::map<::std::int32_t, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::numFlowSamplesPerView, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::flowLimit, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::numFlowsClear, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::scanIntervalInUsecs, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::exportThreshold, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::flowWeights, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::agingIntervalInMsecs, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::collectorDstIp, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::collectorSrcPort, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::collectorDstPort, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::collectorDscp, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::ppsToQcm, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::collectorSrcIp, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::monitorQcmPortList, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::port2QosQueueIds, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::monitorQcmCfgPortsOnly, std::integral_constant<apache::thrift::field_id_t, 17>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(numFlowSamplesPerView, 1);
    STRUCT_CHILD_GETTERS(flowLimit, 2);
    STRUCT_CHILD_GETTERS(numFlowsClear, 3);
    STRUCT_CHILD_GETTERS(scanIntervalInUsecs, 4);
    STRUCT_CHILD_GETTERS(exportThreshold, 5);
    STRUCT_CHILD_GETTERS(flowWeights, 6);
    STRUCT_CHILD_GETTERS(agingIntervalInMsecs, 7);
    STRUCT_CHILD_GETTERS(collectorDstIp, 8);
    STRUCT_CHILD_GETTERS(collectorSrcPort, 10);
    STRUCT_CHILD_GETTERS(collectorDstPort, 11);
    STRUCT_CHILD_GETTERS(collectorDscp, 12);
    STRUCT_CHILD_GETTERS(ppsToQcm, 13);
    STRUCT_CHILD_GETTERS(collectorSrcIp, 14);
    STRUCT_CHILD_GETTERS(monitorQcmPortList, 15);
    STRUCT_CHILD_GETTERS(port2QosQueueIds, 16);
    STRUCT_CHILD_GETTERS(monitorQcmCfgPortsOnly, 17);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return numFlowSamplesPerView(); }
    else if constexpr (__id == 2) { return flowLimit(); }
    else if constexpr (__id == 3) { return numFlowsClear(); }
    else if constexpr (__id == 4) { return scanIntervalInUsecs(); }
    else if constexpr (__id == 5) { return exportThreshold(); }
    else if constexpr (__id == 6) { return flowWeights(); }
    else if constexpr (__id == 7) { return agingIntervalInMsecs(); }
    else if constexpr (__id == 8) { return collectorDstIp(); }
    else if constexpr (__id == 10) { return collectorSrcPort(); }
    else if constexpr (__id == 11) { return collectorDstPort(); }
    else if constexpr (__id == 12) { return collectorDscp(); }
    else if constexpr (__id == 13) { return ppsToQcm(); }
    else if constexpr (__id == 14) { return collectorSrcIp(); }
    else if constexpr (__id == 15) { return monitorQcmPortList(); }
    else if constexpr (__id == 16) { return port2QosQueueIds(); }
    else if constexpr (__id == 17) { return monitorQcmCfgPortsOnly(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchType>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SwitchType>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchType>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SwitchType>>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::SwitchType, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SwitchType>, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int64_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::MplsAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::MplsAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::MplsAction>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::MplsAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::MplsAction>,
   Parent>;
  using strings = ::facebook::fboss::mpls_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::action, Child<::facebook::fboss::MplsActionCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::MplsActionCode>>>,
std::pair<strings::swapLabel, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::pushLabels, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::MplsActionCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::MplsActionCode>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::action, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::swapLabel, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::pushLabels, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(action, 1);
    STRUCT_CHILD_GETTERS(swapLabel, 2);
    STRUCT_CHILD_GETTERS(pushLabels, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return action(); }
    else if constexpr (__id == 2) { return swapLabel(); }
    else if constexpr (__id == 3) { return pushLabels(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::MatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::MatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::MatchAction>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::MatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::MatchAction>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::sendToQueue, ChildThriftPath<::facebook::fboss::state::SendToQueue, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::trafficCounter, ChildThriftPath<::facebook::fboss::cfg::TrafficCounter, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::setDscp, ChildThriftPath<::facebook::fboss::cfg::SetDscpMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::ingressMirror, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::egressMirror, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::toCpuAction, Child<::facebook::fboss::cfg::ToCpuAction, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::ToCpuAction>>>,
std::pair<strings::macsecFlow, ChildThriftPath<::facebook::fboss::cfg::MacsecFlowAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::redirectToNextHop, ChildThriftPath<::facebook::fboss::state::RedirectToNextHopAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::setTc, ChildThriftPath<::facebook::fboss::state::SetTc, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::userDefinedTrap, ChildThriftPath<::facebook::fboss::cfg::UserDefinedTrapAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::flowletAction, Child<::facebook::fboss::cfg::FlowletAction, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::FlowletAction>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::state::SendToQueue, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::TrafficCounter, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::cfg::SetDscpMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::facebook::fboss::cfg::ToCpuAction, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::ToCpuAction>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::facebook::fboss::cfg::MacsecFlowAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::facebook::fboss::state::RedirectToNextHopAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::facebook::fboss::state::SetTc, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, ChildThriftPath<::facebook::fboss::cfg::UserDefinedTrapAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::facebook::fboss::cfg::FlowletAction, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::FlowletAction>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::sendToQueue, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::trafficCounter, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::setDscp, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::ingressMirror, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::egressMirror, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::toCpuAction, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::macsecFlow, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::redirectToNextHop, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::setTc, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::userDefinedTrap, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::flowletAction, std::integral_constant<apache::thrift::field_id_t, 11>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(sendToQueue, 1);
    STRUCT_CHILD_GETTERS(trafficCounter, 2);
    STRUCT_CHILD_GETTERS(setDscp, 3);
    STRUCT_CHILD_GETTERS(ingressMirror, 4);
    STRUCT_CHILD_GETTERS(egressMirror, 5);
    STRUCT_CHILD_GETTERS(toCpuAction, 6);
    STRUCT_CHILD_GETTERS(macsecFlow, 7);
    STRUCT_CHILD_GETTERS(redirectToNextHop, 8);
    STRUCT_CHILD_GETTERS(setTc, 9);
    STRUCT_CHILD_GETTERS(userDefinedTrap, 10);
    STRUCT_CHILD_GETTERS(flowletAction, 11);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return sendToQueue(); }
    else if constexpr (__id == 2) { return trafficCounter(); }
    else if constexpr (__id == 3) { return setDscp(); }
    else if constexpr (__id == 4) { return ingressMirror(); }
    else if constexpr (__id == 5) { return egressMirror(); }
    else if constexpr (__id == 6) { return toCpuAction(); }
    else if constexpr (__id == 7) { return macsecFlow(); }
    else if constexpr (__id == 8) { return redirectToNextHop(); }
    else if constexpr (__id == 9) { return setTc(); }
    else if constexpr (__id == 10) { return userDefinedTrap(); }
    else if constexpr (__id == 11) { return flowletAction(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::PacketRxReasonToQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::PacketRxReasonToQueue>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::PacketRxReasonToQueue>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::PacketRxReasonToQueue>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::PacketRxReasonToQueue>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::PacketRxReasonToQueue, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::PortPgConfigName, ::std::vector<::facebook::fboss::cfg::PortPgConfig>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::PortPgConfigName, ::std::vector<::facebook::fboss::cfg::PortPgConfig>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortPgConfig>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::PortPgConfigName, ::std::vector<::facebook::fboss::cfg::PortPgConfig>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortPgConfig>>>,
   Parent>;
  using Child = ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortPgConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::PortPgConfigName);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::RedirectNextHop, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::RedirectNextHop,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::RedirectNextHop>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::RedirectNextHop,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::RedirectNextHop>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::ip, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::intfID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::ip, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::intfID, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(ip, 1);
    STRUCT_CHILD_GETTERS(intfID, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return ip(); }
    else if constexpr (__id == 2) { return intfID(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::NextHopThrift, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::NextHopThrift,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::NextHopThrift>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::NextHopThrift,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::NextHopThrift>,
   Parent>;
  using strings = ::facebook::fboss::common_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::address, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::weight, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::mplsAction, ChildThriftPath<::facebook::fboss::MplsAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::disableTTLDecrement, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::MplsAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::address, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::weight, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::mplsAction, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::disableTTLDecrement, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(address, 1);
    STRUCT_CHILD_GETTERS(weight, 2);
    STRUCT_CHILD_GETTERS(mplsAction, 3);
    STRUCT_CHILD_GETTERS(disableTTLDecrement, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return address(); }
    else if constexpr (__id == 2) { return weight(); }
    else if constexpr (__id == 3) { return mplsAction(); }
    else if constexpr (__id == 4) { return disableTTLDecrement(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::MinimumCapacity, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::MinimumCapacity,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   ::apache::thrift::type::union_t<::facebook::fboss::cfg::MinimumCapacity>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::MinimumCapacity,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   ::apache::thrift::type::union_t<::facebook::fboss::cfg::MinimumCapacity>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::linkCount, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
std::pair<strings::linkPercentage, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::linkCount, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::linkPercentage, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(linkCount, 1);
    STRUCT_CHILD_GETTERS(linkPercentage, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return linkCount(); }
    else if constexpr (__id == 2) { return linkPercentage(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::NeighborResponseEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::NeighborResponseEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::NeighborResponseEntryFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::NeighborResponseEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::NeighborResponseEntryFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::ipAddress, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::mac, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::interfaceId, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::ipAddress, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::mac, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::interfaceId, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(ipAddress, 1);
    STRUCT_CHILD_GETTERS(mac, 2);
    STRUCT_CHILD_GETTERS(interfaceId, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return ipAddress(); }
    else if constexpr (__id == 2) { return mac(); }
    else if constexpr (__id == 3) { return interfaceId(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::set<::facebook::fboss::cfg::TransportField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::set<::facebook::fboss::cfg::TransportField>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::set<::apache::thrift::type::enum_t<::facebook::fboss::cfg::TransportField>>,
   Parent> {
 public:
  using Self = Path<
   ::std::set<::facebook::fboss::cfg::TransportField>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::set<::apache::thrift::type::enum_t<::facebook::fboss::cfg::TransportField>>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::TransportField, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::TransportField>, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::TransportField);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PolaritySwap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PolaritySwap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PolaritySwap>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PolaritySwap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PolaritySwap>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::rx, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::tx, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::rx, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::tx, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(rx, 1);
    STRUCT_CHILD_GETTERS(tx, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return rx(); }
    else if constexpr (__id == 2) { return tx(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::BurstMonitorWeight, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::BurstMonitorWeight, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::BurstMonitorWeight>, ::apache::thrift::type::i16_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::BurstMonitorWeight, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::BurstMonitorWeight>, ::apache::thrift::type::i16_t>,
   Parent>;
  using Child = Path<::std::int16_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::BurstMonitorWeight);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::LaneState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::phy::LaneState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::phy::LaneState>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::phy::LaneState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::phy::LaneState>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::phy::LaneState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::DataPlanePhyChip, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::DataPlanePhyChip,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::DataPlanePhyChip>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::DataPlanePhyChip,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::DataPlanePhyChip>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::type, Child<::facebook::fboss::phy::DataPlanePhyChipType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::phy::DataPlanePhyChipType>>>,
std::pair<strings::physicalID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::phy::DataPlanePhyChipType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::phy::DataPlanePhyChipType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::type, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::physicalID, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(name, 1);
    STRUCT_CHILD_GETTERS(type, 2);
    STRUCT_CHILD_GETTERS(physicalID, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return name(); }
    else if constexpr (__id == 2) { return type(); }
    else if constexpr (__id == 3) { return physicalID(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::IpTunnelFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::IpTunnelFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::IpTunnelFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::IpTunnelFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::IpTunnelFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::ipTunnelId, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::underlayIntfId, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::mode, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::dstIp, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::type, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::tunnelTermType, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::ttlMode, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::dscpMode, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::ecnMode, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::srcIp, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dstIpMask, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::srcIpMask, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::ipTunnelId, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::underlayIntfId, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::mode, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::dstIp, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::type, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::tunnelTermType, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::ttlMode, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::dscpMode, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::ecnMode, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::srcIp, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::dstIpMask, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::srcIpMask, std::integral_constant<apache::thrift::field_id_t, 12>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(ipTunnelId, 1);
    STRUCT_CHILD_GETTERS(underlayIntfId, 2);
    STRUCT_CHILD_GETTERS(mode, 3);
    STRUCT_CHILD_GETTERS(dstIp, 4);
    STRUCT_CHILD_GETTERS(type, 5);
    STRUCT_CHILD_GETTERS(tunnelTermType, 6);
    STRUCT_CHILD_GETTERS(ttlMode, 7);
    STRUCT_CHILD_GETTERS(dscpMode, 8);
    STRUCT_CHILD_GETTERS(ecnMode, 9);
    STRUCT_CHILD_GETTERS(srcIp, 10);
    STRUCT_CHILD_GETTERS(dstIpMask, 11);
    STRUCT_CHILD_GETTERS(srcIpMask, 12);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return ipTunnelId(); }
    else if constexpr (__id == 2) { return underlayIntfId(); }
    else if constexpr (__id == 3) { return mode(); }
    else if constexpr (__id == 4) { return dstIp(); }
    else if constexpr (__id == 5) { return type(); }
    else if constexpr (__id == 6) { return tunnelTermType(); }
    else if constexpr (__id == 7) { return ttlMode(); }
    else if constexpr (__id == 8) { return dscpMode(); }
    else if constexpr (__id == 9) { return ecnMode(); }
    else if constexpr (__id == 10) { return srcIp(); }
    else if constexpr (__id == 11) { return dstIpMask(); }
    else if constexpr (__id == 12) { return srcIpMask(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::Mirror>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::Mirror>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::Mirror>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::Mirror>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::Mirror>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::Mirror, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Lacp, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Lacp,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Lacp>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Lacp,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Lacp>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::systemID, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::systemPriority, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::systemID, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::systemPriority, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(systemID, 1);
    STRUCT_CHILD_GETTERS(systemPriority, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return systemID(); }
    else if constexpr (__id == 2) { return systemPriority(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::PacketRxReason, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::PacketRxReason, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::PacketRxReason>, ::apache::thrift::type::i16_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::PacketRxReason, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::PacketRxReason>, ::apache::thrift::type::i16_t>,
   Parent>;
  using Child = Path<::std::int16_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::PacketRxReason);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::TcvrState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::facebook::fboss::TcvrState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::facebook::fboss::TcvrState>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::facebook::fboss::TcvrState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::facebook::fboss::TcvrState>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::TcvrState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::AsicConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::AsicConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::AsicConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::AsicConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::AsicConfig>,
   Parent>;
  using strings = ::facebook::fboss::cfg::asic_config_v2_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::common, ChildThriftPath<::facebook::fboss::cfg::AsicConfigEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::npuEntries, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::AsicConfigEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::AsicConfigEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::AsicConfigEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::common, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::npuEntries, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(common, 1);
    STRUCT_CHILD_GETTERS(npuEntries, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return common(); }
    else if constexpr (__id == 2) { return npuEntries(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::VlanFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::VlanFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::VlanFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::VlanFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::VlanFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::vlanId, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::vlanName, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::intfID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::dhcpV4Relay, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dhcpV6Relay, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dhcpRelayOverridesV4, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dhcpRelayOverridesV6, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::ports, ChildThriftPath<::std::map<::std::int16_t, bool>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::arpTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::arpResponseTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::ndpTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::ndpResponseTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::macTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::MacEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::std::map<::std::int16_t, bool>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::MacEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::vlanId, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::vlanName, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::intfID, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::dhcpV4Relay, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::dhcpV6Relay, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::dhcpRelayOverridesV4, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::dhcpRelayOverridesV6, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::ports, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::arpTable, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::arpResponseTable, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::ndpTable, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::ndpResponseTable, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::macTable, std::integral_constant<apache::thrift::field_id_t, 13>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(vlanId, 1);
    STRUCT_CHILD_GETTERS(vlanName, 2);
    STRUCT_CHILD_GETTERS(intfID, 3);
    STRUCT_CHILD_GETTERS(dhcpV4Relay, 4);
    STRUCT_CHILD_GETTERS(dhcpV6Relay, 5);
    STRUCT_CHILD_GETTERS(dhcpRelayOverridesV4, 6);
    STRUCT_CHILD_GETTERS(dhcpRelayOverridesV6, 7);
    STRUCT_CHILD_GETTERS(ports, 8);
    STRUCT_CHILD_GETTERS(arpTable, 9);
    STRUCT_CHILD_GETTERS(arpResponseTable, 10);
    STRUCT_CHILD_GETTERS(ndpTable, 11);
    STRUCT_CHILD_GETTERS(ndpResponseTable, 12);
    STRUCT_CHILD_GETTERS(macTable, 13);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return vlanId(); }
    else if constexpr (__id == 2) { return vlanName(); }
    else if constexpr (__id == 3) { return intfID(); }
    else if constexpr (__id == 4) { return dhcpV4Relay(); }
    else if constexpr (__id == 5) { return dhcpV6Relay(); }
    else if constexpr (__id == 6) { return dhcpRelayOverridesV4(); }
    else if constexpr (__id == 7) { return dhcpRelayOverridesV6(); }
    else if constexpr (__id == 8) { return ports(); }
    else if constexpr (__id == 9) { return arpTable(); }
    else if constexpr (__id == 10) { return arpResponseTable(); }
    else if constexpr (__id == 11) { return ndpTable(); }
    else if constexpr (__id == 12) { return ndpResponseTable(); }
    else if constexpr (__id == 13) { return macTable(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::SwitchSettingsFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::SwitchSettingsFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::SwitchSettingsFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::SwitchSettingsFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::SwitchSettingsFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::SwitchSettingsFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::SflowTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::SflowTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SflowTunnel>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::SflowTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SflowTunnel>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::ip, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::udpSrcPort, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::udpDstPort, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::ttl, ChildThriftPath<::facebook::fboss::cfg::Ttl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::cfg::Ttl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::ip, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::udpSrcPort, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::udpDstPort, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::ttl, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(ip, 1);
    STRUCT_CHILD_GETTERS(udpSrcPort, 2);
    STRUCT_CHILD_GETTERS(udpDstPort, 3);
    STRUCT_CHILD_GETTERS(ttl, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return ip(); }
    else if constexpr (__id == 2) { return udpSrcPort(); }
    else if constexpr (__id == 3) { return udpDstPort(); }
    else if constexpr (__id == 4) { return ttl(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::MirrorFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::MirrorFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::MirrorFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::MirrorFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::MirrorFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::MirrorFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::fsdb::FsdbSubscriptionState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::fsdb::FsdbSubscriptionState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::enum_t<::facebook::fboss::fsdb::FsdbSubscriptionState>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::fsdb::FsdbSubscriptionState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::enum_t<::facebook::fboss::fsdb::FsdbSubscriptionState>>,
   Parent>;
  using Child = Path<::facebook::fboss::fsdb::FsdbSubscriptionState, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::fsdb::FsdbSubscriptionState>, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::phy::PhyState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::phy::PhyState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::phy::PhyState>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::phy::PhyState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::phy::PhyState>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::phy::PhyState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::AgentConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::AgentConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::AgentConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::AgentConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::AgentConfig>,
   Parent>;
  using strings = ::facebook::fboss::cfg::agent_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::defaultCommandLineArgs, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::sw, ChildThriftPath<::facebook::fboss::cfg::SwitchConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::platform, ChildThriftPath<::facebook::fboss::cfg::PlatformConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::SwitchConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::cfg::PlatformConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::defaultCommandLineArgs, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::sw, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::platform, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(defaultCommandLineArgs, 1);
    STRUCT_CHILD_GETTERS(sw, 2);
    STRUCT_CHILD_GETTERS(platform, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return defaultCommandLineArgs(); }
    else if constexpr (__id == 2) { return sw(); }
    else if constexpr (__id == 3) { return platform(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::AggregatePortFields>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::AggregatePortFields>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::TransceiverSpecFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::TransceiverSpecFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::TransceiverSpecFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::AclTableGroup, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::AclTableGroup,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::AclTableGroup>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::AclTableGroup,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::AclTableGroup>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::aclTables, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTable>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::stage, Child<::facebook::fboss::cfg::AclStage, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclStage>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTable>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::AclStage, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclStage>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::aclTables, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::stage, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(name, 1);
    STRUCT_CHILD_GETTERS(aclTables, 2);
    STRUCT_CHILD_GETTERS(stage, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return name(); }
    else if constexpr (__id == 2) { return aclTables(); }
    else if constexpr (__id == 3) { return stage(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PortNeighbor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PortNeighbor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortNeighbor>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PortNeighbor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortNeighbor>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::remoteSystem, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::remotePort, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::remoteSystem, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::remotePort, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(remoteSystem, 1);
    STRUCT_CHILD_GETTERS(remotePort, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return remoteSystem(); }
    else if constexpr (__id == 2) { return remotePort(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::TransceiverAttributes, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::TransceiverAttributes,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::TransceiverAttributes>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::TransceiverAttributes,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::TransceiverAttributes>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_validation_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::mediaInterfaceCode, Child<::facebook::fboss::MediaInterfaceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::MediaInterfaceCode>>>,
std::pair<strings::supportedFirmwareVersions, ChildThriftPath<::std::vector<::facebook::fboss::FirmwarePair>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::supportedPortProfiles, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortProfileID>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::MediaInterfaceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::MediaInterfaceCode>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::FirmwarePair>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortProfileID>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::mediaInterfaceCode, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::supportedFirmwareVersions, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::supportedPortProfiles, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(mediaInterfaceCode, 1);
    STRUCT_CHILD_GETTERS(supportedFirmwareVersions, 2);
    STRUCT_CHILD_GETTERS(supportedPortProfiles, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return mediaInterfaceCode(); }
    else if constexpr (__id == 2) { return supportedFirmwareVersions(); }
    else if constexpr (__id == 3) { return supportedPortProfiles(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::MatchToAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::MatchToAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::MatchToAction>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::MatchToAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::MatchToAction>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::matcher, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::action, ChildThriftPath<::facebook::fboss::cfg::MatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::MatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::matcher, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::action, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(matcher, 1);
    STRUCT_CHILD_GETTERS(action, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return matcher(); }
    else if constexpr (__id == 2) { return action(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::BlockedMacAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::BlockedMacAddress,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::BlockedMacAddress>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::BlockedMacAddress,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::BlockedMacAddress>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::macAddrToBlockVlanID, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::macAddrToBlockAddr, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::macAddrToBlockVlanID, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::macAddrToBlockAddr, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(macAddrToBlockVlanID, 1);
    STRUCT_CHILD_GETTERS(macAddrToBlockAddr, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return macAddrToBlockVlanID(); }
    else if constexpr (__id == 2) { return macAddrToBlockAddr(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::RouteFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::RouteFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::RouteFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::RouteFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::RouteFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::RouteFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::ControlPlaneFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::ControlPlaneFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::ControlPlaneFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::ControlPlaneFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::ControlPlaneFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::queues, ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::rxReasonToQueue, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PacketRxReasonToQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::defaultQosPolicy, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PacketRxReasonToQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::queues, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::rxReasonToQueue, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::defaultQosPolicy, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(queues, 1);
    STRUCT_CHILD_GETTERS(rxReasonToQueue, 2);
    STRUCT_CHILD_GETTERS(defaultQosPolicy, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return queues(); }
    else if constexpr (__id == 2) { return rxReasonToQueue(); }
    else if constexpr (__id == 3) { return defaultQosPolicy(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::switch_reachability::SwitchReachability, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::switch_reachability::SwitchReachability,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::switch_reachability::SwitchReachability>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::switch_reachability::SwitchReachability,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::switch_reachability::SwitchReachability>,
   Parent>;
  using strings = ::facebook::fboss::switch_reachability::switch_reachability_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::fabricPortGroupMap, ChildThriftPath<::std::map<::std::int32_t, ::std::vector<::std::string>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::switchIdToFabricPortGroupMap, ChildThriftPath<::std::map<::std::int64_t, ::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::int32_t, ::std::vector<::std::string>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::int64_t, ::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::fabricPortGroupMap, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::switchIdToFabricPortGroupMap, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(fabricPortGroupMap, 1);
    STRUCT_CHILD_GETTERS(switchIdToFabricPortGroupMap, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return fabricPortGroupMap(); }
    else if constexpr (__id == 2) { return switchIdToFabricPortGroupMap(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::MediaLaneSignals, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::MediaLaneSignals,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::MediaLaneSignals>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::MediaLaneSignals,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::MediaLaneSignals>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::lane, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::txLos, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::rxLos, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::txLol, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::rxLol, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::txFault, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::txAdaptEqFault, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::lane, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::txLos, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::rxLos, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::txLol, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::rxLol, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::txFault, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::txAdaptEqFault, std::integral_constant<apache::thrift::field_id_t, 7>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(lane, 1);
    STRUCT_CHILD_GETTERS(txLos, 2);
    STRUCT_CHILD_GETTERS(rxLos, 3);
    STRUCT_CHILD_GETTERS(txLol, 4);
    STRUCT_CHILD_GETTERS(rxLol, 5);
    STRUCT_CHILD_GETTERS(txFault, 6);
    STRUCT_CHILD_GETTERS(txAdaptEqFault, 7);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return lane(); }
    else if constexpr (__id == 2) { return txLos(); }
    else if constexpr (__id == 3) { return rxLos(); }
    else if constexpr (__id == 4) { return txLol(); }
    else if constexpr (__id == 5) { return rxLol(); }
    else if constexpr (__id == 6) { return txFault(); }
    else if constexpr (__id == 7) { return txAdaptEqFault(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::AclEntryFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::AclEntryFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::AclEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PinID, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PinID,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PinID>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PinID,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PinID>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::chip, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::lane, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::chip, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::lane, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(chip, 1);
    STRUCT_CHILD_GETTERS(lane, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return chip(); }
    else if constexpr (__id == 2) { return lane(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>,
   Parent>;
  using Child = Path<::std::string, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PortFlowletConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PortFlowletConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortFlowletConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PortFlowletConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortFlowletConfig>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::scalingFactor, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::loadWeight, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::queueWeight, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::scalingFactor, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::loadWeight, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::queueWeight, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(scalingFactor, 1);
    STRUCT_CHILD_GETTERS(loadWeight, 2);
    STRUCT_CHILD_GETTERS(queueWeight, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return scalingFactor(); }
    else if constexpr (__id == 2) { return loadWeight(); }
    else if constexpr (__id == 3) { return queueWeight(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::FibContainerFields>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::FibContainerFields>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::MirrorFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::MirrorFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::MirrorFields>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::MirrorFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::MirrorFields>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::MirrorFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::SwitchState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::SwitchState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::SwitchState>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::SwitchState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::SwitchState>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::portMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::vlanMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::aclMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::transceiverMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::bufferPoolCfgMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::mirrorMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::MirrorFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::controlPlaneMap, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::ControlPlaneFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::switchSettingsMap, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::SwitchSettingsFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::systemPortMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::fibsMap, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::labelFibMap, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::qosPolicyMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::sflowCollectorMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::ipTunnelMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::teFlowTables, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::aggregatePortMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::loadBalancerMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::aclTableGroupMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::interfaceMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dsfNodesMap, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::portFlowletCfgMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::remoteSystemPortMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::remoteInterfaceMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 100>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 101>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 102>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 103>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 104>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 105>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::MirrorFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 106>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::ControlPlaneFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 107>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::SwitchSettingsFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 108>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 109>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 110>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 111>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 112>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 113>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 114>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 115>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 116>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 117>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 118>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 119>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 120>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 600>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 601>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::portMaps, std::integral_constant<apache::thrift::field_id_t, 100>>,
std::pair<strings::vlanMaps, std::integral_constant<apache::thrift::field_id_t, 101>>,
std::pair<strings::aclMaps, std::integral_constant<apache::thrift::field_id_t, 102>>,
std::pair<strings::transceiverMaps, std::integral_constant<apache::thrift::field_id_t, 103>>,
std::pair<strings::bufferPoolCfgMaps, std::integral_constant<apache::thrift::field_id_t, 104>>,
std::pair<strings::mirrorMaps, std::integral_constant<apache::thrift::field_id_t, 105>>,
std::pair<strings::controlPlaneMap, std::integral_constant<apache::thrift::field_id_t, 106>>,
std::pair<strings::switchSettingsMap, std::integral_constant<apache::thrift::field_id_t, 107>>,
std::pair<strings::systemPortMaps, std::integral_constant<apache::thrift::field_id_t, 108>>,
std::pair<strings::fibsMap, std::integral_constant<apache::thrift::field_id_t, 109>>,
std::pair<strings::labelFibMap, std::integral_constant<apache::thrift::field_id_t, 110>>,
std::pair<strings::qosPolicyMaps, std::integral_constant<apache::thrift::field_id_t, 111>>,
std::pair<strings::sflowCollectorMaps, std::integral_constant<apache::thrift::field_id_t, 112>>,
std::pair<strings::ipTunnelMaps, std::integral_constant<apache::thrift::field_id_t, 113>>,
std::pair<strings::teFlowTables, std::integral_constant<apache::thrift::field_id_t, 114>>,
std::pair<strings::aggregatePortMaps, std::integral_constant<apache::thrift::field_id_t, 115>>,
std::pair<strings::loadBalancerMaps, std::integral_constant<apache::thrift::field_id_t, 116>>,
std::pair<strings::aclTableGroupMaps, std::integral_constant<apache::thrift::field_id_t, 117>>,
std::pair<strings::interfaceMaps, std::integral_constant<apache::thrift::field_id_t, 118>>,
std::pair<strings::dsfNodesMap, std::integral_constant<apache::thrift::field_id_t, 119>>,
std::pair<strings::portFlowletCfgMaps, std::integral_constant<apache::thrift::field_id_t, 120>>,
std::pair<strings::remoteSystemPortMaps, std::integral_constant<apache::thrift::field_id_t, 600>>,
std::pair<strings::remoteInterfaceMaps, std::integral_constant<apache::thrift::field_id_t, 601>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(portMaps, 100);
    STRUCT_CHILD_GETTERS(vlanMaps, 101);
    STRUCT_CHILD_GETTERS(aclMaps, 102);
    STRUCT_CHILD_GETTERS(transceiverMaps, 103);
    STRUCT_CHILD_GETTERS(bufferPoolCfgMaps, 104);
    STRUCT_CHILD_GETTERS(mirrorMaps, 105);
    STRUCT_CHILD_GETTERS(controlPlaneMap, 106);
    STRUCT_CHILD_GETTERS(switchSettingsMap, 107);
    STRUCT_CHILD_GETTERS(systemPortMaps, 108);
    STRUCT_CHILD_GETTERS(fibsMap, 109);
    STRUCT_CHILD_GETTERS(labelFibMap, 110);
    STRUCT_CHILD_GETTERS(qosPolicyMaps, 111);
    STRUCT_CHILD_GETTERS(sflowCollectorMaps, 112);
    STRUCT_CHILD_GETTERS(ipTunnelMaps, 113);
    STRUCT_CHILD_GETTERS(teFlowTables, 114);
    STRUCT_CHILD_GETTERS(aggregatePortMaps, 115);
    STRUCT_CHILD_GETTERS(loadBalancerMaps, 116);
    STRUCT_CHILD_GETTERS(aclTableGroupMaps, 117);
    STRUCT_CHILD_GETTERS(interfaceMaps, 118);
    STRUCT_CHILD_GETTERS(dsfNodesMap, 119);
    STRUCT_CHILD_GETTERS(portFlowletCfgMaps, 120);
    STRUCT_CHILD_GETTERS(remoteSystemPortMaps, 600);
    STRUCT_CHILD_GETTERS(remoteInterfaceMaps, 601);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 100) { return portMaps(); }
    else if constexpr (__id == 101) { return vlanMaps(); }
    else if constexpr (__id == 102) { return aclMaps(); }
    else if constexpr (__id == 103) { return transceiverMaps(); }
    else if constexpr (__id == 104) { return bufferPoolCfgMaps(); }
    else if constexpr (__id == 105) { return mirrorMaps(); }
    else if constexpr (__id == 106) { return controlPlaneMap(); }
    else if constexpr (__id == 107) { return switchSettingsMap(); }
    else if constexpr (__id == 108) { return systemPortMaps(); }
    else if constexpr (__id == 109) { return fibsMap(); }
    else if constexpr (__id == 110) { return labelFibMap(); }
    else if constexpr (__id == 111) { return qosPolicyMaps(); }
    else if constexpr (__id == 112) { return sflowCollectorMaps(); }
    else if constexpr (__id == 113) { return ipTunnelMaps(); }
    else if constexpr (__id == 114) { return teFlowTables(); }
    else if constexpr (__id == 115) { return aggregatePortMaps(); }
    else if constexpr (__id == 116) { return loadBalancerMaps(); }
    else if constexpr (__id == 117) { return aclTableGroupMaps(); }
    else if constexpr (__id == 118) { return interfaceMaps(); }
    else if constexpr (__id == 119) { return dsfNodesMap(); }
    else if constexpr (__id == 120) { return portFlowletCfgMaps(); }
    else if constexpr (__id == 600) { return remoteSystemPortMaps(); }
    else if constexpr (__id == 601) { return remoteInterfaceMaps(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>,
   ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::PlatformAttributes>, ::apache::thrift::type::string_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>,
   ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::PlatformAttributes>, ::apache::thrift::type::string_t>,
   Parent>;
  using Child = Path<::std::string, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::PlatformAttributes);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PacketRxReasonToQueue, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PacketRxReasonToQueue,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PacketRxReasonToQueue>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PacketRxReasonToQueue,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PacketRxReasonToQueue>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::rxReason, Child<::facebook::fboss::cfg::PacketRxReason, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PacketRxReason>>>,
std::pair<strings::queueId, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::cfg::PacketRxReason, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PacketRxReason>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::rxReason, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::queueId, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(rxReason, 1);
    STRUCT_CHILD_GETTERS(queueId, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return rxReason(); }
    else if constexpr (__id == 2) { return queueId(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::MirrorFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::MirrorFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::MirrorFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::MirrorFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::MirrorFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dscp, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::truncate, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::configHasEgressPort, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::egressPort, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::destinationIp, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::srcIp, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::udpSrcPort, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::udpDstPort, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::tunnel, ChildThriftPath<::facebook::fboss::state::MirrorTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::isResolved, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::switchId, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::egressPortDesc, ChildThriftPath<::facebook::fboss::cfg::PortDescriptor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, ChildThriftPath<::facebook::fboss::state::MirrorTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, ChildThriftPath<::facebook::fboss::cfg::PortDescriptor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::dscp, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::truncate, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::configHasEgressPort, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::egressPort, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::destinationIp, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::srcIp, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::udpSrcPort, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::udpDstPort, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::tunnel, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::isResolved, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::switchId, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::egressPortDesc, std::integral_constant<apache::thrift::field_id_t, 14>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(name, 1);
    STRUCT_CHILD_GETTERS(dscp, 3);
    STRUCT_CHILD_GETTERS(truncate, 4);
    STRUCT_CHILD_GETTERS(configHasEgressPort, 5);
    STRUCT_CHILD_GETTERS(egressPort, 6);
    STRUCT_CHILD_GETTERS(destinationIp, 7);
    STRUCT_CHILD_GETTERS(srcIp, 8);
    STRUCT_CHILD_GETTERS(udpSrcPort, 9);
    STRUCT_CHILD_GETTERS(udpDstPort, 10);
    STRUCT_CHILD_GETTERS(tunnel, 11);
    STRUCT_CHILD_GETTERS(isResolved, 12);
    STRUCT_CHILD_GETTERS(switchId, 13);
    STRUCT_CHILD_GETTERS(egressPortDesc, 14);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return name(); }
    else if constexpr (__id == 3) { return dscp(); }
    else if constexpr (__id == 4) { return truncate(); }
    else if constexpr (__id == 5) { return configHasEgressPort(); }
    else if constexpr (__id == 6) { return egressPort(); }
    else if constexpr (__id == 7) { return destinationIp(); }
    else if constexpr (__id == 8) { return srcIp(); }
    else if constexpr (__id == 9) { return udpSrcPort(); }
    else if constexpr (__id == 10) { return udpDstPort(); }
    else if constexpr (__id == 11) { return tunnel(); }
    else if constexpr (__id == 12) { return isResolved(); }
    else if constexpr (__id == 13) { return switchId(); }
    else if constexpr (__id == 14) { return egressPortDesc(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::set<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::set<::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>,
   ::apache::thrift::type::set<::apache::thrift::type::i32_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::set<::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>,
   ::apache::thrift::type::set<::apache::thrift::type::i32_t>,
   Parent>;
  using Child = Path<::std::int32_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::VlanPort, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::VlanPort,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::VlanPort>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::VlanPort,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::VlanPort>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::vlanID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::logicalPort, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::spanningTreeState, Child<::facebook::fboss::cfg::SpanningTreeState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SpanningTreeState>>>,
std::pair<strings::emitTags, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::SpanningTreeState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SpanningTreeState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::vlanID, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::logicalPort, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::spanningTreeState, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::emitTags, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(vlanID, 1);
    STRUCT_CHILD_GETTERS(logicalPort, 2);
    STRUCT_CHILD_GETTERS(spanningTreeState, 3);
    STRUCT_CHILD_GETTERS(emitTags, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return vlanID(); }
    else if constexpr (__id == 2) { return logicalPort(); }
    else if constexpr (__id == 3) { return spanningTreeState(); }
    else if constexpr (__id == 4) { return emitTags(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::VlanPort>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::VlanPort>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::VlanPort>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::VlanPort>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::VlanPort>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::VlanPort, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::HostLaneSettings>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::HostLaneSettings>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::HostLaneSettings>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::HostLaneSettings>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::HostLaneSettings>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HostLaneSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PmdState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PmdState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PmdState>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PmdState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PmdState>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::lanes, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::LaneState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::LaneState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::lanes, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(lanes, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return lanes(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::network::thrift::BinaryAddress,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::network::thrift::BinaryAddress>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::network::thrift::BinaryAddress,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::network::thrift::BinaryAddress>,
   Parent>;
  using strings = ::facebook::network::thrift::Address_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::addr, Child<::folly::fbstring, ::apache::thrift::type_class::binary, ::apache::thrift::type::cpp_type<::folly::fbstring, ::apache::thrift::type::binary_t>>>,
std::pair<strings::port, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::ifName, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::folly::fbstring, ::apache::thrift::type_class::binary, ::apache::thrift::type::cpp_type<::folly::fbstring, ::apache::thrift::type::binary_t>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::addr, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::port, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::ifName, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(addr, 1);
    STRUCT_CHILD_GETTERS(port, 2);
    STRUCT_CHILD_GETTERS(ifName, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return addr(); }
    else if constexpr (__id == 2) { return port(); }
    else if constexpr (__id == 3) { return ifName(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::state::BlockedNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::state::BlockedNeighbor>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::state::BlockedNeighbor>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::state::BlockedNeighbor>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::state::BlockedNeighbor>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::BlockedNeighbor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Neighbor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Neighbor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Neighbor>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Neighbor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Neighbor>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::vlanID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::ipAddress, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::vlanID, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::ipAddress, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(vlanID, 1);
    STRUCT_CHILD_GETTERS(ipAddress, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return vlanID(); }
    else if constexpr (__id == 2) { return ipAddress(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::RedirectNextHop>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::RedirectNextHop>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::RedirectNextHop>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::RedirectNextHop>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::RedirectNextHop>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::RedirectNextHop, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::LoadBalancerID>, ::apache::thrift::type::struct_t<::facebook::fboss::state::LoadBalancerFields>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::LoadBalancerID>, ::apache::thrift::type::struct_t<::facebook::fboss::state::LoadBalancerFields>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::PortFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::PortFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::PortFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PfcWatchdog, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PfcWatchdog,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PfcWatchdog>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PfcWatchdog,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PfcWatchdog>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::detectionTimeMsecs, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::recoveryTimeMsecs, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::recoveryAction, Child<::facebook::fboss::cfg::PfcWatchdogRecoveryAction, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PfcWatchdogRecoveryAction>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::PfcWatchdogRecoveryAction, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PfcWatchdogRecoveryAction>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::detectionTimeMsecs, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::recoveryTimeMsecs, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::recoveryAction, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(detectionTimeMsecs, 1);
    STRUCT_CHILD_GETTERS(recoveryTimeMsecs, 2);
    STRUCT_CHILD_GETTERS(recoveryAction, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return detectionTimeMsecs(); }
    else if constexpr (__id == 2) { return recoveryTimeMsecs(); }
    else if constexpr (__id == 3) { return recoveryAction(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::AsicConfigEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int64_t, ::facebook::fboss::cfg::AsicConfigEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::variant>,
   ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::union_t<::facebook::fboss::cfg::AsicConfigEntry>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int64_t, ::facebook::fboss::cfg::AsicConfigEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::variant>,
   ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::union_t<::facebook::fboss::cfg::AsicConfigEntry>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::AsicConfigEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int64_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::BufferPoolConfigName, ::facebook::fboss::cfg::BufferPoolConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::BufferPoolConfigName, ::facebook::fboss::cfg::BufferPoolConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::cfg::BufferPoolConfig>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::BufferPoolConfigName, ::facebook::fboss::cfg::BufferPoolConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::cfg::BufferPoolConfig>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::BufferPoolConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::BufferPoolConfigName);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::LoadBalancerFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::LoadBalancerFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::LoadBalancerFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::LoadBalancerFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::LoadBalancerFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::id, Child<::facebook::fboss::cfg::LoadBalancerID, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::LoadBalancerID>>>,
std::pair<strings::algorithm, Child<::facebook::fboss::cfg::HashingAlgorithm, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::HashingAlgorithm>>>,
std::pair<strings::seed, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::v4Fields, ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv4Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::v6Fields, ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv6Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::transportFields, ChildThriftPath<::std::set<::facebook::fboss::cfg::TransportField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::mplsFields, ChildThriftPath<::std::set<::facebook::fboss::cfg::MPLSField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::udfGroups, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::cfg::LoadBalancerID, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::LoadBalancerID>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::HashingAlgorithm, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::HashingAlgorithm>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv4Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv6Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::set<::facebook::fboss::cfg::TransportField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::set<::facebook::fboss::cfg::MPLSField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::id, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::algorithm, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::seed, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::v4Fields, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::v6Fields, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::transportFields, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::mplsFields, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::udfGroups, std::integral_constant<apache::thrift::field_id_t, 8>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(id, 1);
    STRUCT_CHILD_GETTERS(algorithm, 2);
    STRUCT_CHILD_GETTERS(seed, 3);
    STRUCT_CHILD_GETTERS(v4Fields, 4);
    STRUCT_CHILD_GETTERS(v6Fields, 5);
    STRUCT_CHILD_GETTERS(transportFields, 6);
    STRUCT_CHILD_GETTERS(mplsFields, 7);
    STRUCT_CHILD_GETTERS(udfGroups, 8);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return id(); }
    else if constexpr (__id == 2) { return algorithm(); }
    else if constexpr (__id == 3) { return seed(); }
    else if constexpr (__id == 4) { return v4Fields(); }
    else if constexpr (__id == 5) { return v6Fields(); }
    else if constexpr (__id == 6) { return transportFields(); }
    else if constexpr (__id == 7) { return mplsFields(); }
    else if constexpr (__id == 8) { return udfGroups(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::fsdb::AgentData, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::fsdb::AgentData,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::fsdb::AgentData>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::fsdb::AgentData,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::fsdb::AgentData>,
   Parent>;
  using strings = ::facebook::fboss::fsdb::fsdb_model_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::config, ChildThriftPath<::facebook::fboss::cfg::AgentConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::switchState, ChildThriftPath<::facebook::fboss::state::SwitchState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::fsdbSubscriptions, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::fsdb::FsdbSubscriptionState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dsfSwitchReachability, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::switch_reachability::SwitchReachability>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::AgentConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::state::SwitchState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::fsdb::FsdbSubscriptionState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::switch_reachability::SwitchReachability>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::config, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::switchState, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::fsdbSubscriptions, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::dsfSwitchReachability, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(config, 1);
    STRUCT_CHILD_GETTERS(switchState, 2);
    STRUCT_CHILD_GETTERS(fsdbSubscriptions, 4);
    STRUCT_CHILD_GETTERS(dsfSwitchReachability, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return config(); }
    else if constexpr (__id == 2) { return switchState(); }
    else if constexpr (__id == 4) { return fsdbSubscriptions(); }
    else if constexpr (__id == 5) { return dsfSwitchReachability(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int64_t, ::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int64_t, ::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::i32_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int64_t, ::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::i32_t>,
   Parent>;
  using Child = Path<::std::int32_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int64_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::SflowCollector, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::SflowCollector,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SflowCollector>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::SflowCollector,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SflowCollector>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::ip, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::port, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::ip, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::port, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(ip, 1);
    STRUCT_CHILD_GETTERS(port, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return ip(); }
    else if constexpr (__id == 2) { return port(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::struct_t<::facebook::fboss::SystemPortThrift>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::struct_t<::facebook::fboss::SystemPortThrift>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::SystemPortFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int64_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::NdpConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::NdpConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::NdpConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::NdpConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::NdpConfig>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::routerAdvertisementSeconds, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::curHopLimit, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::routerLifetime, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::prefixValidLifetimeSeconds, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::prefixPreferredLifetimeSeconds, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::routerAdvertisementManagedBit, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::routerAdvertisementOtherBit, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::routerAddress, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::routerAdvertisementSeconds, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::curHopLimit, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::routerLifetime, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::prefixValidLifetimeSeconds, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::prefixPreferredLifetimeSeconds, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::routerAdvertisementManagedBit, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::routerAdvertisementOtherBit, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::routerAddress, std::integral_constant<apache::thrift::field_id_t, 8>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(routerAdvertisementSeconds, 1);
    STRUCT_CHILD_GETTERS(curHopLimit, 2);
    STRUCT_CHILD_GETTERS(routerLifetime, 3);
    STRUCT_CHILD_GETTERS(prefixValidLifetimeSeconds, 4);
    STRUCT_CHILD_GETTERS(prefixPreferredLifetimeSeconds, 5);
    STRUCT_CHILD_GETTERS(routerAdvertisementManagedBit, 6);
    STRUCT_CHILD_GETTERS(routerAdvertisementOtherBit, 7);
    STRUCT_CHILD_GETTERS(routerAddress, 8);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return routerAdvertisementSeconds(); }
    else if constexpr (__id == 2) { return curHopLimit(); }
    else if constexpr (__id == 3) { return routerLifetime(); }
    else if constexpr (__id == 4) { return prefixValidLifetimeSeconds(); }
    else if constexpr (__id == 5) { return prefixPreferredLifetimeSeconds(); }
    else if constexpr (__id == 6) { return routerAdvertisementManagedBit(); }
    else if constexpr (__id == 7) { return routerAdvertisementOtherBit(); }
    else if constexpr (__id == 8) { return routerAddress(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QosPolicy, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QosPolicy,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::QosPolicy>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QosPolicy,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::QosPolicy>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::rules, ChildThriftPath<::std::vector<::facebook::fboss::cfg::QosRule>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::qosMap, ChildThriftPath<::facebook::fboss::cfg::QosMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::QosRule>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::cfg::QosMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::rules, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::qosMap, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(name, 1);
    STRUCT_CHILD_GETTERS(rules, 2);
    STRUCT_CHILD_GETTERS(qosMap, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return name(); }
    else if constexpr (__id == 2) { return rules(); }
    else if constexpr (__id == 3) { return qosMap(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::CPUTrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::CPUTrafficPolicyConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::CPUTrafficPolicyConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::CPUTrafficPolicyConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::CPUTrafficPolicyConfig>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::trafficPolicy, ChildThriftPath<::facebook::fboss::cfg::TrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::rxReasonToCPUQueue, ChildThriftPath<::std::map<::facebook::fboss::cfg::PacketRxReason, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::rxReasonToQueueOrderedList, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PacketRxReasonToQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::TrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::facebook::fboss::cfg::PacketRxReason, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PacketRxReasonToQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::trafficPolicy, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::rxReasonToCPUQueue, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::rxReasonToQueueOrderedList, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(trafficPolicy, 1);
    STRUCT_CHILD_GETTERS(rxReasonToCPUQueue, 2);
    STRUCT_CHILD_GETTERS(rxReasonToQueueOrderedList, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return trafficPolicy(); }
    else if constexpr (__id == 2) { return rxReasonToCPUQueue(); }
    else if constexpr (__id == 3) { return rxReasonToQueueOrderedList(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::string_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::string_t>,
   Parent>;
  using Child = Path<::std::string, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTable>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::AclTable>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::AclTable>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::AclTable>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::AclTable>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::AclTable, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::QcmCfgFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::QcmCfgFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::QcmCfgFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::QcmCfgFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::QcmCfgFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::agingIntervalInMsecs, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::numFlowSamplesPerView, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::flowLimit, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::numFlowsClear, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::scanIntervalInUsecs, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::exportThreshold, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::monitorQcmCfgPortsOnly, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::flowWeights, ChildThriftPath<::std::map<::std::int32_t, ::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::collectorSrcIp, ChildThriftPath<::facebook::fboss::IpPrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::collectorDstIp, ChildThriftPath<::facebook::fboss::IpPrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::collectorSrcPort, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::collectorDstPort, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::collectorDscp, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
std::pair<strings::ppsToQcm, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::monitorQcmPortList, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::port2QosQueueIds, ChildThriftPath<::std::map<::std::int32_t, ::std::set<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::std::map<::std::int32_t, ::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::facebook::fboss::IpPrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, ChildThriftPath<::facebook::fboss::IpPrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, ChildThriftPath<::std::map<::std::int32_t, ::std::set<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::agingIntervalInMsecs, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::numFlowSamplesPerView, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::flowLimit, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::numFlowsClear, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::scanIntervalInUsecs, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::exportThreshold, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::monitorQcmCfgPortsOnly, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::flowWeights, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::collectorSrcIp, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::collectorDstIp, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::collectorSrcPort, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::collectorDstPort, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::collectorDscp, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::ppsToQcm, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::monitorQcmPortList, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::port2QosQueueIds, std::integral_constant<apache::thrift::field_id_t, 16>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(agingIntervalInMsecs, 1);
    STRUCT_CHILD_GETTERS(numFlowSamplesPerView, 2);
    STRUCT_CHILD_GETTERS(flowLimit, 3);
    STRUCT_CHILD_GETTERS(numFlowsClear, 4);
    STRUCT_CHILD_GETTERS(scanIntervalInUsecs, 5);
    STRUCT_CHILD_GETTERS(exportThreshold, 6);
    STRUCT_CHILD_GETTERS(monitorQcmCfgPortsOnly, 7);
    STRUCT_CHILD_GETTERS(flowWeights, 8);
    STRUCT_CHILD_GETTERS(collectorSrcIp, 9);
    STRUCT_CHILD_GETTERS(collectorDstIp, 10);
    STRUCT_CHILD_GETTERS(collectorSrcPort, 11);
    STRUCT_CHILD_GETTERS(collectorDstPort, 12);
    STRUCT_CHILD_GETTERS(collectorDscp, 13);
    STRUCT_CHILD_GETTERS(ppsToQcm, 14);
    STRUCT_CHILD_GETTERS(monitorQcmPortList, 15);
    STRUCT_CHILD_GETTERS(port2QosQueueIds, 16);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return agingIntervalInMsecs(); }
    else if constexpr (__id == 2) { return numFlowSamplesPerView(); }
    else if constexpr (__id == 3) { return flowLimit(); }
    else if constexpr (__id == 4) { return numFlowsClear(); }
    else if constexpr (__id == 5) { return scanIntervalInUsecs(); }
    else if constexpr (__id == 6) { return exportThreshold(); }
    else if constexpr (__id == 7) { return monitorQcmCfgPortsOnly(); }
    else if constexpr (__id == 8) { return flowWeights(); }
    else if constexpr (__id == 9) { return collectorSrcIp(); }
    else if constexpr (__id == 10) { return collectorDstIp(); }
    else if constexpr (__id == 11) { return collectorSrcPort(); }
    else if constexpr (__id == 12) { return collectorDstPort(); }
    else if constexpr (__id == 13) { return collectorDscp(); }
    else if constexpr (__id == 14) { return ppsToQcm(); }
    else if constexpr (__id == 15) { return monitorQcmPortList(); }
    else if constexpr (__id == 16) { return port2QosQueueIds(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::std::vector<::std::string>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::std::vector<::std::string>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::list<::apache::thrift::type::string_t>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::std::vector<::std::string>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::list<::apache::thrift::type::string_t>>,
   Parent>;
  using Child = ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i16_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i16_t>,
   Parent>;
  using Child = Path<::std::int16_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::TxSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::TxSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::TxSettings>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::TxSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::TxSettings>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::pre, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::pre2, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::main, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::post, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::post2, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::post3, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::lutMode, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::driveCurrent, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::diffEncoderEn, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::digGain, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::ffeCoeff0, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::ffeCoeff1, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::ffeCoeff2, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::ffeCoeff3, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::ffeCoeff4, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::parityEncoderEn, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::thpEn, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::setPrecode, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::pre3, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::driverSwing, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::innerEyeNeg, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::innerEyePos, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::pre, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::pre2, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::main, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::post, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::post2, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::post3, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::lutMode, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::driveCurrent, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::diffEncoderEn, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::digGain, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::ffeCoeff0, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::ffeCoeff1, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::ffeCoeff2, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::ffeCoeff3, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::ffeCoeff4, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::parityEncoderEn, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::thpEn, std::integral_constant<apache::thrift::field_id_t, 17>>,
std::pair<strings::setPrecode, std::integral_constant<apache::thrift::field_id_t, 18>>,
std::pair<strings::pre3, std::integral_constant<apache::thrift::field_id_t, 19>>,
std::pair<strings::driverSwing, std::integral_constant<apache::thrift::field_id_t, 20>>,
std::pair<strings::innerEyeNeg, std::integral_constant<apache::thrift::field_id_t, 21>>,
std::pair<strings::innerEyePos, std::integral_constant<apache::thrift::field_id_t, 22>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(pre, 1);
    STRUCT_CHILD_GETTERS(pre2, 2);
    STRUCT_CHILD_GETTERS(main, 3);
    STRUCT_CHILD_GETTERS(post, 4);
    STRUCT_CHILD_GETTERS(post2, 5);
    STRUCT_CHILD_GETTERS(post3, 6);
    STRUCT_CHILD_GETTERS(lutMode, 7);
    STRUCT_CHILD_GETTERS(driveCurrent, 8);
    STRUCT_CHILD_GETTERS(diffEncoderEn, 9);
    STRUCT_CHILD_GETTERS(digGain, 10);
    STRUCT_CHILD_GETTERS(ffeCoeff0, 11);
    STRUCT_CHILD_GETTERS(ffeCoeff1, 12);
    STRUCT_CHILD_GETTERS(ffeCoeff2, 13);
    STRUCT_CHILD_GETTERS(ffeCoeff3, 14);
    STRUCT_CHILD_GETTERS(ffeCoeff4, 15);
    STRUCT_CHILD_GETTERS(parityEncoderEn, 16);
    STRUCT_CHILD_GETTERS(thpEn, 17);
    STRUCT_CHILD_GETTERS(setPrecode, 18);
    STRUCT_CHILD_GETTERS(pre3, 19);
    STRUCT_CHILD_GETTERS(driverSwing, 20);
    STRUCT_CHILD_GETTERS(innerEyeNeg, 21);
    STRUCT_CHILD_GETTERS(innerEyePos, 22);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return pre(); }
    else if constexpr (__id == 2) { return pre2(); }
    else if constexpr (__id == 3) { return main(); }
    else if constexpr (__id == 4) { return post(); }
    else if constexpr (__id == 5) { return post2(); }
    else if constexpr (__id == 6) { return post3(); }
    else if constexpr (__id == 7) { return lutMode(); }
    else if constexpr (__id == 8) { return driveCurrent(); }
    else if constexpr (__id == 9) { return diffEncoderEn(); }
    else if constexpr (__id == 10) { return digGain(); }
    else if constexpr (__id == 11) { return ffeCoeff0(); }
    else if constexpr (__id == 12) { return ffeCoeff1(); }
    else if constexpr (__id == 13) { return ffeCoeff2(); }
    else if constexpr (__id == 14) { return ffeCoeff3(); }
    else if constexpr (__id == 15) { return ffeCoeff4(); }
    else if constexpr (__id == 16) { return parityEncoderEn(); }
    else if constexpr (__id == 17) { return thpEn(); }
    else if constexpr (__id == 18) { return setPrecode(); }
    else if constexpr (__id == 19) { return pre3(); }
    else if constexpr (__id == 20) { return driverSwing(); }
    else if constexpr (__id == 21) { return innerEyeNeg(); }
    else if constexpr (__id == 22) { return innerEyePos(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::UdfConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::UdfConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::UdfConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::UdfConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::UdfConfig>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::udfGroups, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::cfg::UdfGroup>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::udfPacketMatcher, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::cfg::UdfPacketMatcher>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::cfg::UdfGroup>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::cfg::UdfPacketMatcher>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::udfGroups, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::udfPacketMatcher, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(udfGroups, 1);
    STRUCT_CHILD_GETTERS(udfPacketMatcher, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return udfGroups(); }
    else if constexpr (__id == 2) { return udfPacketMatcher(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::BufferPoolFields>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::BufferPoolFields>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::AclUdfEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::AclUdfEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::AclUdfEntry>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::AclUdfEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::AclUdfEntry>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::udfGroup, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::roceBytes, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::roceMask, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::udfGroup, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::roceBytes, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::roceMask, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(udfGroup, 1);
    STRUCT_CHILD_GETTERS(roceBytes, 2);
    STRUCT_CHILD_GETTERS(roceMask, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return udfGroup(); }
    else if constexpr (__id == 2) { return roceBytes(); }
    else if constexpr (__id == 3) { return roceMask(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::state::TrafficClassToQosAttributeEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::state::TrafficClassToQosAttributeEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::state::TrafficClassToQosAttributeEntry>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::state::TrafficClassToQosAttributeEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::state::TrafficClassToQosAttributeEntry>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::TrafficClassToQosAttributeEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::LaneState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::LaneState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::LaneState>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::LaneState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::LaneState>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::lane, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::signalDetectLive, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::signalDetectChanged, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::cdrLockLive, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::cdrLockChanged, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::txSettings, ChildThriftPath<::facebook::fboss::phy::TxSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::rxFrequencyPPM, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::facebook::fboss::phy::TxSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::lane, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::signalDetectLive, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::signalDetectChanged, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::cdrLockLive, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::cdrLockChanged, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::txSettings, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::rxFrequencyPPM, std::integral_constant<apache::thrift::field_id_t, 7>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(lane, 1);
    STRUCT_CHILD_GETTERS(signalDetectLive, 2);
    STRUCT_CHILD_GETTERS(signalDetectChanged, 3);
    STRUCT_CHILD_GETTERS(cdrLockLive, 4);
    STRUCT_CHILD_GETTERS(cdrLockChanged, 5);
    STRUCT_CHILD_GETTERS(txSettings, 6);
    STRUCT_CHILD_GETTERS(rxFrequencyPPM, 7);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return lane(); }
    else if constexpr (__id == 2) { return signalDetectLive(); }
    else if constexpr (__id == 3) { return signalDetectChanged(); }
    else if constexpr (__id == 4) { return cdrLockLive(); }
    else if constexpr (__id == 5) { return cdrLockChanged(); }
    else if constexpr (__id == 6) { return txSettings(); }
    else if constexpr (__id == 7) { return rxFrequencyPPM(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::asic::AsicConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::asic::AsicConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::asic::AsicConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::asic::AsicConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::asic::AsicConfig>,
   Parent>;
  using strings = ::facebook::fboss::asic::asic_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::config, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::config, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(config, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return config(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableQualifier>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::AclTableQualifier>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::list<::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclTableQualifier>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::AclTableQualifier>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::list<::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclTableQualifier>>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::AclTableQualifier, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclTableQualifier>, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::std::vector<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::std::vector<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
   Parent>;
  using Child = ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::ClientID, ::facebook::fboss::state::RouteNextHopEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::ClientID, ::facebook::fboss::state::RouteNextHopEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::ClientID>, ::apache::thrift::type::struct_t<::facebook::fboss::state::RouteNextHopEntry>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::ClientID, ::facebook::fboss::state::RouteNextHopEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::ClientID>, ::apache::thrift::type::struct_t<::facebook::fboss::state::RouteNextHopEntry>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::RouteNextHopEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::ClientID);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::AggregatePortMember>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::AggregatePortMember>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::AggregatePortMember>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::AggregatePortMember>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::AggregatePortMember>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::AggregatePortMember, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::state::Subport>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::state::Subport>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::state::Subport>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::state::Subport>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::state::Subport>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::Subport, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::PortQueueConfigName, ::std::vector<::facebook::fboss::cfg::PortQueue>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::PortQueueConfigName, ::std::vector<::facebook::fboss::cfg::PortQueue>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortQueue>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::PortQueueConfigName, ::std::vector<::facebook::fboss::cfg::PortQueue>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortQueue>>>,
   Parent>;
  using Child = ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::PortQueueConfigName);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::PortFlowletFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::PortFlowletFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::PortFlowletFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::PortFlowletFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::PortFlowletFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::id, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::scalingFactor, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::loadWeight, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::queueWeight, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::id, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::scalingFactor, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::loadWeight, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::queueWeight, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(id, 1);
    STRUCT_CHILD_GETTERS(scalingFactor, 2);
    STRUCT_CHILD_GETTERS(loadWeight, 3);
    STRUCT_CHILD_GETTERS(queueWeight, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return id(); }
    else if constexpr (__id == 2) { return scalingFactor(); }
    else if constexpr (__id == 3) { return loadWeight(); }
    else if constexpr (__id == 4) { return queueWeight(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::TrafficClassToQosAttributeMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::TrafficClassToQosAttributeMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::TrafficClassToQosAttributeMap>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::TrafficClassToQosAttributeMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::TrafficClassToQosAttributeMap>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::from, ChildThriftPath<::std::vector<::facebook::fboss::state::TrafficClassToQosAttributeEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::to, ChildThriftPath<::std::vector<::facebook::fboss::state::TrafficClassToQosAttributeEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::vector<::facebook::fboss::state::TrafficClassToQosAttributeEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::state::TrafficClassToQosAttributeEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::from, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::to, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(from, 1);
    STRUCT_CHILD_GETTERS(to, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return from(); }
    else if constexpr (__id == 2) { return to(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::BlockedNeighbor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::BlockedNeighbor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::BlockedNeighbor>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::BlockedNeighbor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::BlockedNeighbor>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::blockNeighborVlanID, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::blockNeighborIP, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::blockNeighborVlanID, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::blockNeighborIP, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(blockNeighborVlanID, 1);
    STRUCT_CHILD_GETTERS(blockNeighborIP, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return blockNeighborVlanID(); }
    else if constexpr (__id == 2) { return blockNeighborIP(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::QosRule>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::QosRule>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::QosRule>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::QosRule>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::QosRule>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::QosRule, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PortDescriptor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PortDescriptor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortDescriptor>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PortDescriptor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortDescriptor>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::portId, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::portType, Child<::facebook::fboss::cfg::PortDescriptorType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortDescriptorType>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::PortDescriptorType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortDescriptorType>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::portId, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::portType, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(portId, 1);
    STRUCT_CHILD_GETTERS(portType, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return portId(); }
    else if constexpr (__id == 2) { return portType(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PortPause, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PortPause,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortPause>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PortPause,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortPause>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::tx, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::rx, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::tx, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::rx, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(tx, 1);
    STRUCT_CHILD_GETTERS(rx, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return tx(); }
    else if constexpr (__id == 2) { return rx(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::set<::facebook::fboss::cfg::MPLSField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::set<::facebook::fboss::cfg::MPLSField>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::set<::apache::thrift::type::enum_t<::facebook::fboss::cfg::MPLSField>>,
   Parent> {
 public:
  using Self = Path<
   ::std::set<::facebook::fboss::cfg::MPLSField>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::set<::apache::thrift::type::enum_t<::facebook::fboss::cfg::MPLSField>>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::MPLSField, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::MPLSField>, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::MPLSField);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::FirmwareVersion>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::FirmwareVersion>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::FirmwareVersion>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::FirmwareVersion>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::FirmwareVersion>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::FirmwareVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::PortFlowletFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::PortFlowletFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::PortFlowletFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PortPfc, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PortPfc,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortPfc>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PortPfc,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortPfc>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::tx, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::rx, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::portPgConfigName, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::watchdog, ChildThriftPath<::facebook::fboss::cfg::PfcWatchdog, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::cfg::PfcWatchdog, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::tx, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::rx, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::portPgConfigName, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::watchdog, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(tx, 1);
    STRUCT_CHILD_GETTERS(rx, 2);
    STRUCT_CHILD_GETTERS(portPgConfigName, 3);
    STRUCT_CHILD_GETTERS(watchdog, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return tx(); }
    else if constexpr (__id == 2) { return rx(); }
    else if constexpr (__id == 3) { return portPgConfigName(); }
    else if constexpr (__id == 4) { return watchdog(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::BufferPoolConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::BufferPoolConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::BufferPoolConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::BufferPoolConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::BufferPoolConfig>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::sharedBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::headroomBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::sharedBytes, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::headroomBytes, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(sharedBytes, 1);
    STRUCT_CHILD_GETTERS(headroomBytes, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return sharedBytes(); }
    else if constexpr (__id == 2) { return headroomBytes(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::TeFlow, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::TeFlow,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::TeFlow>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::TeFlow,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::TeFlow>,
   Parent>;
  using strings = ::facebook::fboss::ctrl_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::srcPort, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::dstPrefix, ChildThriftPath<::facebook::fboss::IpPrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::IpPrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::srcPort, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::dstPrefix, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(srcPort, 1);
    STRUCT_CHILD_GETTERS(dstPrefix, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return srcPort(); }
    else if constexpr (__id == 2) { return dstPrefix(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::LLDPTag, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::LLDPTag, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>,
   ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::LLDPTag>, ::apache::thrift::type::string_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::LLDPTag, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>,
   ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::LLDPTag>, ::apache::thrift::type::string_t>,
   Parent>;
  using Child = Path<::std::string, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::LLDPTag);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::StaticRouteWithNextHops, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::StaticRouteWithNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticRouteWithNextHops>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::StaticRouteWithNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticRouteWithNextHops>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::routerID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::prefix, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::nexthops, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::routerID, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::prefix, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::nexthops, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(routerID, 1);
    STRUCT_CHILD_GETTERS(prefix, 2);
    STRUCT_CHILD_GETTERS(nexthops, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return routerID(); }
    else if constexpr (__id == 2) { return prefix(); }
    else if constexpr (__id == 3) { return nexthops(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::AggregatePortMember, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::AggregatePortMember,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::AggregatePortMember>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::AggregatePortMember,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::AggregatePortMember>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::memberPortID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::priority, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::rate, Child<::facebook::fboss::cfg::LacpPortRate, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::LacpPortRate>>>,
std::pair<strings::activity, Child<::facebook::fboss::cfg::LacpPortActivity, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::LacpPortActivity>>>,
std::pair<strings::holdTimerMultiplier, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::LacpPortRate, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::LacpPortRate>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::cfg::LacpPortActivity, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::LacpPortActivity>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::memberPortID, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::priority, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::rate, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::activity, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::holdTimerMultiplier, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(memberPortID, 1);
    STRUCT_CHILD_GETTERS(priority, 2);
    STRUCT_CHILD_GETTERS(rate, 3);
    STRUCT_CHILD_GETTERS(activity, 4);
    STRUCT_CHILD_GETTERS(holdTimerMultiplier, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return memberPortID(); }
    else if constexpr (__id == 2) { return priority(); }
    else if constexpr (__id == 3) { return rate(); }
    else if constexpr (__id == 4) { return activity(); }
    else if constexpr (__id == 5) { return holdTimerMultiplier(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::ControlPlaneFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::ControlPlaneFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::ControlPlaneFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::ControlPlaneFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::ControlPlaneFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::ControlPlaneFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::UserDefinedTrapAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::UserDefinedTrapAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::UserDefinedTrapAction>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::UserDefinedTrapAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::UserDefinedTrapAction>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::queueId, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::queueId, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(queueId, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return queueId(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PortQueue, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PortQueue,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortQueue>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PortQueue,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortQueue>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::id, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::streamType, Child<::facebook::fboss::cfg::StreamType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::StreamType>>>,
std::pair<strings::weight, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::reservedBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::scalingFactor, Child<::facebook::fboss::cfg::MMUScalingFactor, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::MMUScalingFactor>>>,
std::pair<strings::scheduling, Child<::facebook::fboss::cfg::QueueScheduling, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::QueueScheduling>>>,
std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::packetsPerSec_DEPRECATED, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::sharedBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::aqms, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ActiveQueueManagement>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::portQueueRate, ChildThriftPath<::facebook::fboss::cfg::PortQueueRate, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::bandwidthBurstMinKbits, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::bandwidthBurstMaxKbits, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::maxDynamicSharedBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::StreamType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::StreamType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::facebook::fboss::cfg::MMUScalingFactor, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::MMUScalingFactor>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::facebook::fboss::cfg::QueueScheduling, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::QueueScheduling>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ActiveQueueManagement>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::facebook::fboss::cfg::PortQueueRate, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::id, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::streamType, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::weight, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::reservedBytes, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::scalingFactor, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::scheduling, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::packetsPerSec_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::sharedBytes, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::aqms, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::portQueueRate, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::bandwidthBurstMinKbits, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::bandwidthBurstMaxKbits, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::maxDynamicSharedBytes, std::integral_constant<apache::thrift::field_id_t, 15>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(id, 1);
    STRUCT_CHILD_GETTERS(streamType, 2);
    STRUCT_CHILD_GETTERS(weight, 3);
    STRUCT_CHILD_GETTERS(reservedBytes, 4);
    STRUCT_CHILD_GETTERS(scalingFactor, 5);
    STRUCT_CHILD_GETTERS(scheduling, 6);
    STRUCT_CHILD_GETTERS(name, 7);
    STRUCT_CHILD_GETTERS(packetsPerSec_DEPRECATED, 9);
    STRUCT_CHILD_GETTERS(sharedBytes, 10);
    STRUCT_CHILD_GETTERS(aqms, 11);
    STRUCT_CHILD_GETTERS(portQueueRate, 12);
    STRUCT_CHILD_GETTERS(bandwidthBurstMinKbits, 13);
    STRUCT_CHILD_GETTERS(bandwidthBurstMaxKbits, 14);
    STRUCT_CHILD_GETTERS(maxDynamicSharedBytes, 15);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return id(); }
    else if constexpr (__id == 2) { return streamType(); }
    else if constexpr (__id == 3) { return weight(); }
    else if constexpr (__id == 4) { return reservedBytes(); }
    else if constexpr (__id == 5) { return scalingFactor(); }
    else if constexpr (__id == 6) { return scheduling(); }
    else if constexpr (__id == 7) { return name(); }
    else if constexpr (__id == 9) { return packetsPerSec_DEPRECATED(); }
    else if constexpr (__id == 10) { return sharedBytes(); }
    else if constexpr (__id == 11) { return aqms(); }
    else if constexpr (__id == 12) { return portQueueRate(); }
    else if constexpr (__id == 13) { return bandwidthBurstMinKbits(); }
    else if constexpr (__id == 14) { return bandwidthBurstMaxKbits(); }
    else if constexpr (__id == 15) { return maxDynamicSharedBytes(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::NeighborResponseEntryFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::NeighborResponseEntryFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::NeighborResponseEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortPgConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::PortPgConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortPgConfig>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::PortPgConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortPgConfig>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::PortPgConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::RxSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::RxSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::RxSettings>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::RxSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::RxSettings>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::ctlCode, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::dspMode, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::afeTrim, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::acCouplingBypass, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::channelReach, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::diffEncoderEn, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::fbfCoefInitVal, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::fbfLmsEnable, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::instgScanOptimize, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::instgTableEndRow, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::instgTableStartRow, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::parityEncoderEn, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::thpEn, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::dcTermEn, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::setPrecode, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::instgBoost1Start, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::instgBoost1Step, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::instgBoost1Stop, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::instgBoost2OrHrStart, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::instgBoost2OrHrStep, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::instgBoost2OrHrStop, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::instgC1Start1p7, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::instgC1Step1p7, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::instgC1Stop1p7, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::instgDfeStart1p7, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::instgDfeStep1p7, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::instgDfeStop1p7, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::enableScanSelection, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::instgScanUseSrSettings, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 29>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::ctlCode, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::dspMode, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::afeTrim, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::acCouplingBypass, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::channelReach, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::diffEncoderEn, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::fbfCoefInitVal, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::fbfLmsEnable, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::instgScanOptimize, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::instgTableEndRow, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::instgTableStartRow, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::parityEncoderEn, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::thpEn, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::dcTermEn, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::setPrecode, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::instgBoost1Start, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::instgBoost1Step, std::integral_constant<apache::thrift::field_id_t, 17>>,
std::pair<strings::instgBoost1Stop, std::integral_constant<apache::thrift::field_id_t, 18>>,
std::pair<strings::instgBoost2OrHrStart, std::integral_constant<apache::thrift::field_id_t, 19>>,
std::pair<strings::instgBoost2OrHrStep, std::integral_constant<apache::thrift::field_id_t, 20>>,
std::pair<strings::instgBoost2OrHrStop, std::integral_constant<apache::thrift::field_id_t, 21>>,
std::pair<strings::instgC1Start1p7, std::integral_constant<apache::thrift::field_id_t, 22>>,
std::pair<strings::instgC1Step1p7, std::integral_constant<apache::thrift::field_id_t, 23>>,
std::pair<strings::instgC1Stop1p7, std::integral_constant<apache::thrift::field_id_t, 24>>,
std::pair<strings::instgDfeStart1p7, std::integral_constant<apache::thrift::field_id_t, 25>>,
std::pair<strings::instgDfeStep1p7, std::integral_constant<apache::thrift::field_id_t, 26>>,
std::pair<strings::instgDfeStop1p7, std::integral_constant<apache::thrift::field_id_t, 27>>,
std::pair<strings::enableScanSelection, std::integral_constant<apache::thrift::field_id_t, 28>>,
std::pair<strings::instgScanUseSrSettings, std::integral_constant<apache::thrift::field_id_t, 29>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(ctlCode, 1);
    STRUCT_CHILD_GETTERS(dspMode, 2);
    STRUCT_CHILD_GETTERS(afeTrim, 3);
    STRUCT_CHILD_GETTERS(acCouplingBypass, 4);
    STRUCT_CHILD_GETTERS(channelReach, 5);
    STRUCT_CHILD_GETTERS(diffEncoderEn, 6);
    STRUCT_CHILD_GETTERS(fbfCoefInitVal, 7);
    STRUCT_CHILD_GETTERS(fbfLmsEnable, 8);
    STRUCT_CHILD_GETTERS(instgScanOptimize, 9);
    STRUCT_CHILD_GETTERS(instgTableEndRow, 10);
    STRUCT_CHILD_GETTERS(instgTableStartRow, 11);
    STRUCT_CHILD_GETTERS(parityEncoderEn, 12);
    STRUCT_CHILD_GETTERS(thpEn, 13);
    STRUCT_CHILD_GETTERS(dcTermEn, 14);
    STRUCT_CHILD_GETTERS(setPrecode, 15);
    STRUCT_CHILD_GETTERS(instgBoost1Start, 16);
    STRUCT_CHILD_GETTERS(instgBoost1Step, 17);
    STRUCT_CHILD_GETTERS(instgBoost1Stop, 18);
    STRUCT_CHILD_GETTERS(instgBoost2OrHrStart, 19);
    STRUCT_CHILD_GETTERS(instgBoost2OrHrStep, 20);
    STRUCT_CHILD_GETTERS(instgBoost2OrHrStop, 21);
    STRUCT_CHILD_GETTERS(instgC1Start1p7, 22);
    STRUCT_CHILD_GETTERS(instgC1Step1p7, 23);
    STRUCT_CHILD_GETTERS(instgC1Stop1p7, 24);
    STRUCT_CHILD_GETTERS(instgDfeStart1p7, 25);
    STRUCT_CHILD_GETTERS(instgDfeStep1p7, 26);
    STRUCT_CHILD_GETTERS(instgDfeStop1p7, 27);
    STRUCT_CHILD_GETTERS(enableScanSelection, 28);
    STRUCT_CHILD_GETTERS(instgScanUseSrSettings, 29);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return ctlCode(); }
    else if constexpr (__id == 2) { return dspMode(); }
    else if constexpr (__id == 3) { return afeTrim(); }
    else if constexpr (__id == 4) { return acCouplingBypass(); }
    else if constexpr (__id == 5) { return channelReach(); }
    else if constexpr (__id == 6) { return diffEncoderEn(); }
    else if constexpr (__id == 7) { return fbfCoefInitVal(); }
    else if constexpr (__id == 8) { return fbfLmsEnable(); }
    else if constexpr (__id == 9) { return instgScanOptimize(); }
    else if constexpr (__id == 10) { return instgTableEndRow(); }
    else if constexpr (__id == 11) { return instgTableStartRow(); }
    else if constexpr (__id == 12) { return parityEncoderEn(); }
    else if constexpr (__id == 13) { return thpEn(); }
    else if constexpr (__id == 14) { return dcTermEn(); }
    else if constexpr (__id == 15) { return setPrecode(); }
    else if constexpr (__id == 16) { return instgBoost1Start(); }
    else if constexpr (__id == 17) { return instgBoost1Step(); }
    else if constexpr (__id == 18) { return instgBoost1Stop(); }
    else if constexpr (__id == 19) { return instgBoost2OrHrStart(); }
    else if constexpr (__id == 20) { return instgBoost2OrHrStep(); }
    else if constexpr (__id == 21) { return instgBoost2OrHrStop(); }
    else if constexpr (__id == 22) { return instgC1Start1p7(); }
    else if constexpr (__id == 23) { return instgC1Step1p7(); }
    else if constexpr (__id == 24) { return instgC1Stop1p7(); }
    else if constexpr (__id == 25) { return instgDfeStart1p7(); }
    else if constexpr (__id == 26) { return instgDfeStep1p7(); }
    else if constexpr (__id == 27) { return instgDfeStop1p7(); }
    else if constexpr (__id == 28) { return enableScanSelection(); }
    else if constexpr (__id == 29) { return instgScanUseSrSettings(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PlatformConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PlatformConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PlatformConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PlatformConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PlatformConfig>,
   Parent>;
  using strings = ::facebook::fboss::cfg::platform_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::chip, ChildThriftPath<::facebook::fboss::cfg::ChipConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::platformSettings, ChildThriftPath<::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::switchIndexToSwitchId, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::switchIndexToChipConfigs, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::cfg::ChipConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::switchIndexToPlatformSettings, ChildThriftPath<::std::map<::std::int16_t, ::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::ChipConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::cfg::ChipConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::map<::std::int16_t, ::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::chip, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::platformSettings, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::switchIndexToSwitchId, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::switchIndexToChipConfigs, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::switchIndexToPlatformSettings, std::integral_constant<apache::thrift::field_id_t, 6>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(chip, 1);
    STRUCT_CHILD_GETTERS(platformSettings, 3);
    STRUCT_CHILD_GETTERS(switchIndexToSwitchId, 4);
    STRUCT_CHILD_GETTERS(switchIndexToChipConfigs, 5);
    STRUCT_CHILD_GETTERS(switchIndexToPlatformSettings, 6);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return chip(); }
    else if constexpr (__id == 3) { return platformSettings(); }
    else if constexpr (__id == 4) { return switchIndexToSwitchId(); }
    else if constexpr (__id == 5) { return switchIndexToChipConfigs(); }
    else if constexpr (__id == 6) { return switchIndexToPlatformSettings(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::FibContainerFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::FibContainerFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::FibContainerFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Range, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Range,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Range>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Range,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Range>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::minimum, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::maximum, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::minimum, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::maximum, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(minimum, 1);
    STRUCT_CHILD_GETTERS(maximum, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return minimum(); }
    else if constexpr (__id == 2) { return maximum(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclUdfEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::AclUdfEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::AclUdfEntry>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::AclUdfEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::AclUdfEntry>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::AclUdfEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::TeFlowEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::TeFlowEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::TeFlowEntryFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::TeFlowEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::TeFlowEntryFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::flow, ChildThriftPath<::facebook::fboss::TeFlow, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::nexthops, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::resolvedNexthops, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::enabled, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::counterID, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::statEnabled, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::TeFlow, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::flow, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::nexthops, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::resolvedNexthops, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::enabled, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::counterID, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::statEnabled, std::integral_constant<apache::thrift::field_id_t, 7>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(flow, 1);
    STRUCT_CHILD_GETTERS(nexthops, 3);
    STRUCT_CHILD_GETTERS(resolvedNexthops, 4);
    STRUCT_CHILD_GETTERS(enabled, 5);
    STRUCT_CHILD_GETTERS(counterID, 6);
    STRUCT_CHILD_GETTERS(statEnabled, 7);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return flow(); }
    else if constexpr (__id == 3) { return nexthops(); }
    else if constexpr (__id == 4) { return resolvedNexthops(); }
    else if constexpr (__id == 5) { return enabled(); }
    else if constexpr (__id == 6) { return counterID(); }
    else if constexpr (__id == 7) { return statEnabled(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::string>,
   ::apache::thrift::type::list<::apache::thrift::type::string_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::string>,
   ::apache::thrift::type::list<::apache::thrift::type::string_t>,
   Parent>;
  using Child = Path<::std::string, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::DsfNode, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::DsfNode,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::DsfNode>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::DsfNode,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::DsfNode>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::switchId, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::type, Child<::facebook::fboss::cfg::DsfNodeType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::DsfNodeType>>>,
std::pair<strings::loopbackIps, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::systemPortRange, ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::nodeMac, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::asicType, Child<::facebook::fboss::cfg::AsicType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AsicType>>>,
std::pair<strings::platformType, Child<::facebook::fboss::PlatformType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::PlatformType>>>,
std::pair<strings::clusterId, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::fabricLevel, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::DsfNodeType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::DsfNodeType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::facebook::fboss::cfg::AsicType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AsicType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::facebook::fboss::PlatformType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::PlatformType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::switchId, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::type, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::loopbackIps, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::systemPortRange, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::nodeMac, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::asicType, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::platformType, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::clusterId, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::fabricLevel, std::integral_constant<apache::thrift::field_id_t, 10>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(name, 1);
    STRUCT_CHILD_GETTERS(switchId, 2);
    STRUCT_CHILD_GETTERS(type, 3);
    STRUCT_CHILD_GETTERS(loopbackIps, 4);
    STRUCT_CHILD_GETTERS(systemPortRange, 5);
    STRUCT_CHILD_GETTERS(nodeMac, 6);
    STRUCT_CHILD_GETTERS(asicType, 7);
    STRUCT_CHILD_GETTERS(platformType, 8);
    STRUCT_CHILD_GETTERS(clusterId, 9);
    STRUCT_CHILD_GETTERS(fabricLevel, 10);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return name(); }
    else if constexpr (__id == 2) { return switchId(); }
    else if constexpr (__id == 3) { return type(); }
    else if constexpr (__id == 4) { return loopbackIps(); }
    else if constexpr (__id == 5) { return systemPortRange(); }
    else if constexpr (__id == 6) { return nodeMac(); }
    else if constexpr (__id == 7) { return asicType(); }
    else if constexpr (__id == 8) { return platformType(); }
    else if constexpr (__id == 9) { return clusterId(); }
    else if constexpr (__id == 10) { return fabricLevel(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::ActiveQueueManagement, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::ActiveQueueManagement,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::ActiveQueueManagement>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::ActiveQueueManagement,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::ActiveQueueManagement>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::detection, ChildThriftPath<::facebook::fboss::cfg::QueueCongestionDetection, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::behavior, Child<::facebook::fboss::cfg::QueueCongestionBehavior, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::QueueCongestionBehavior>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::QueueCongestionDetection, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::QueueCongestionBehavior, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::QueueCongestionBehavior>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::detection, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::behavior, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(detection, 1);
    STRUCT_CHILD_GETTERS(behavior, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return detection(); }
    else if constexpr (__id == 2) { return behavior(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::AsicConfigEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::AsicConfigEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   ::apache::thrift::type::union_t<::facebook::fboss::cfg::AsicConfigEntry>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::AsicConfigEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   ::apache::thrift::type::union_t<::facebook::fboss::cfg::AsicConfigEntry>,
   Parent>;
  using strings = ::facebook::fboss::cfg::asic_config_v2_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::config, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::jsonConfig, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::yamlConfig, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::config, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::jsonConfig, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::yamlConfig, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(config, 1);
    STRUCT_CHILD_GETTERS(jsonConfig, 2);
    STRUCT_CHILD_GETTERS(yamlConfig, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return config(); }
    else if constexpr (__id == 2) { return jsonConfig(); }
    else if constexpr (__id == 3) { return yamlConfig(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExpQosMap>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::ExpQosMap>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::ExpQosMap>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::ExpQosMap>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::ExpQosMap>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::ExpQosMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclLookupClass>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::AclLookupClass>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::list<::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::AclLookupClass>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::list<::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::AclLookupClass, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::TrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::TrafficPolicyConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::TrafficPolicyConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::TrafficPolicyConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::TrafficPolicyConfig>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::matchToAction, ChildThriftPath<::std::vector<::facebook::fboss::cfg::MatchToAction>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::defaultQosPolicy, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::portIdToQosPolicy, ChildThriftPath<::std::map<::std::int32_t, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::MatchToAction>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::std::int32_t, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::matchToAction, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::defaultQosPolicy, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::portIdToQosPolicy, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(matchToAction, 1);
    STRUCT_CHILD_GETTERS(defaultQosPolicy, 2);
    STRUCT_CHILD_GETTERS(portIdToQosPolicy, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return matchToAction(); }
    else if constexpr (__id == 2) { return defaultQosPolicy(); }
    else if constexpr (__id == 3) { return portIdToQosPolicy(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::MatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::MatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::MatchAction>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::MatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::MatchAction>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::sendToQueue, ChildThriftPath<::facebook::fboss::cfg::QueueMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::packetCounter_DEPRECATED, ChildThriftPath<::facebook::fboss::cfg::PacketCounterMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::setDscp, ChildThriftPath<::facebook::fboss::cfg::SetDscpMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::ingressMirror, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::egressMirror, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::counter, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::toCpuAction, Child<::facebook::fboss::cfg::ToCpuAction, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::ToCpuAction>>>,
std::pair<strings::macsecFlow, ChildThriftPath<::facebook::fboss::cfg::MacsecFlowAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::redirectToNextHop, ChildThriftPath<::facebook::fboss::cfg::RedirectToNextHopAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::setTc, ChildThriftPath<::facebook::fboss::cfg::SetTcAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::userDefinedTrap, ChildThriftPath<::facebook::fboss::cfg::UserDefinedTrapAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::flowletAction, Child<::facebook::fboss::cfg::FlowletAction, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::FlowletAction>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::QueueMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::PacketCounterMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::cfg::SetDscpMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::facebook::fboss::cfg::ToCpuAction, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::ToCpuAction>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::facebook::fboss::cfg::MacsecFlowAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::facebook::fboss::cfg::RedirectToNextHopAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, ChildThriftPath<::facebook::fboss::cfg::SetTcAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, ChildThriftPath<::facebook::fboss::cfg::UserDefinedTrapAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::facebook::fboss::cfg::FlowletAction, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::FlowletAction>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::sendToQueue, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::packetCounter_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::setDscp, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::ingressMirror, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::egressMirror, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::counter, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::toCpuAction, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::macsecFlow, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::redirectToNextHop, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::setTc, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::userDefinedTrap, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::flowletAction, std::integral_constant<apache::thrift::field_id_t, 12>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(sendToQueue, 1);
    STRUCT_CHILD_GETTERS(packetCounter_DEPRECATED, 2);
    STRUCT_CHILD_GETTERS(setDscp, 3);
    STRUCT_CHILD_GETTERS(ingressMirror, 4);
    STRUCT_CHILD_GETTERS(egressMirror, 5);
    STRUCT_CHILD_GETTERS(counter, 6);
    STRUCT_CHILD_GETTERS(toCpuAction, 7);
    STRUCT_CHILD_GETTERS(macsecFlow, 8);
    STRUCT_CHILD_GETTERS(redirectToNextHop, 9);
    STRUCT_CHILD_GETTERS(setTc, 10);
    STRUCT_CHILD_GETTERS(userDefinedTrap, 11);
    STRUCT_CHILD_GETTERS(flowletAction, 12);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return sendToQueue(); }
    else if constexpr (__id == 2) { return packetCounter_DEPRECATED(); }
    else if constexpr (__id == 3) { return setDscp(); }
    else if constexpr (__id == 4) { return ingressMirror(); }
    else if constexpr (__id == 5) { return egressMirror(); }
    else if constexpr (__id == 6) { return counter(); }
    else if constexpr (__id == 7) { return toCpuAction(); }
    else if constexpr (__id == 8) { return macsecFlow(); }
    else if constexpr (__id == 9) { return redirectToNextHop(); }
    else if constexpr (__id == 10) { return setTc(); }
    else if constexpr (__id == 11) { return userDefinedTrap(); }
    else if constexpr (__id == 12) { return flowletAction(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::MacsecFlowAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::MacsecFlowAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::MacsecFlowAction>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::MacsecFlowAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::MacsecFlowAction>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::flowId, Child<uint64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::cpp_type<uint64_t, ::apache::thrift::type::i64_t>>>,
std::pair<strings::action, Child<::facebook::fboss::cfg::MacsecFlowPacketAction, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::MacsecFlowPacketAction>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<uint64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::cpp_type<uint64_t, ::apache::thrift::type::i64_t>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::MacsecFlowPacketAction, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::MacsecFlowPacketAction>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::flowId, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::action, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(flowId, 1);
    STRUCT_CHILD_GETTERS(action, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return flowId(); }
    else if constexpr (__id == 2) { return action(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Range64,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Range64>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Range64,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Range64>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::minimum, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::maximum, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::minimum, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::maximum, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(minimum, 1);
    STRUCT_CHILD_GETTERS(maximum, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return minimum(); }
    else if constexpr (__id == 2) { return maximum(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::SflowCollector>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::SflowCollector>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::SflowCollector>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::SflowCollector>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::SflowCollector>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::SflowCollector, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::Interface>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::Interface>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::Interface>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::Interface>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::Interface>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::Interface, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::state::RxSak>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::state::RxSak>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::state::RxSak>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::state::RxSak>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::state::RxSak>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::RxSak, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::IpInIpTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::IpInIpTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::IpInIpTunnel>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::IpInIpTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::IpInIpTunnel>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::ipInIpTunnelId, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::underlayIntfID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::dstIp, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::srcIp, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dstIpMask, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::srcIpMask, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::ttlMode, Child<::facebook::fboss::cfg::IpTunnelMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::IpTunnelMode>>>,
std::pair<strings::dscpMode, Child<::facebook::fboss::cfg::IpTunnelMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::IpTunnelMode>>>,
std::pair<strings::ecnMode, Child<::facebook::fboss::cfg::IpTunnelMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::IpTunnelMode>>>,
std::pair<strings::tunnelTermType, Child<::facebook::fboss::cfg::TunnelTerminationType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::TunnelTerminationType>>>,
std::pair<strings::tunnelType, Child<::facebook::fboss::cfg::TunnelType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::TunnelType>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::facebook::fboss::cfg::IpTunnelMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::IpTunnelMode>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::facebook::fboss::cfg::IpTunnelMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::IpTunnelMode>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::facebook::fboss::cfg::IpTunnelMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::IpTunnelMode>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::facebook::fboss::cfg::TunnelTerminationType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::TunnelTerminationType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::facebook::fboss::cfg::TunnelType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::TunnelType>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::ipInIpTunnelId, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::underlayIntfID, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::dstIp, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::srcIp, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::dstIpMask, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::srcIpMask, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::ttlMode, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::dscpMode, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::ecnMode, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::tunnelTermType, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::tunnelType, std::integral_constant<apache::thrift::field_id_t, 11>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(ipInIpTunnelId, 1);
    STRUCT_CHILD_GETTERS(underlayIntfID, 2);
    STRUCT_CHILD_GETTERS(dstIp, 3);
    STRUCT_CHILD_GETTERS(srcIp, 4);
    STRUCT_CHILD_GETTERS(dstIpMask, 5);
    STRUCT_CHILD_GETTERS(srcIpMask, 6);
    STRUCT_CHILD_GETTERS(ttlMode, 7);
    STRUCT_CHILD_GETTERS(dscpMode, 8);
    STRUCT_CHILD_GETTERS(ecnMode, 9);
    STRUCT_CHILD_GETTERS(tunnelTermType, 10);
    STRUCT_CHILD_GETTERS(tunnelType, 11);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return ipInIpTunnelId(); }
    else if constexpr (__id == 2) { return underlayIntfID(); }
    else if constexpr (__id == 3) { return dstIp(); }
    else if constexpr (__id == 4) { return srcIp(); }
    else if constexpr (__id == 5) { return dstIpMask(); }
    else if constexpr (__id == 6) { return srcIpMask(); }
    else if constexpr (__id == 7) { return ttlMode(); }
    else if constexpr (__id == 8) { return dscpMode(); }
    else if constexpr (__id == 9) { return ecnMode(); }
    else if constexpr (__id == 10) { return tunnelTermType(); }
    else if constexpr (__id == 11) { return tunnelType(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::struct_t<::facebook::fboss::cfg::DsfNode>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::struct_t<::facebook::fboss::cfg::DsfNode>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::DsfNode, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int64_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::RedirectToNextHopAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::RedirectToNextHopAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::RedirectToNextHopAction>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::RedirectToNextHopAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::RedirectToNextHopAction>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::nexthops, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::redirectNextHops, ChildThriftPath<::std::vector<::facebook::fboss::cfg::RedirectNextHop>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::RedirectNextHop>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::nexthops, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::redirectNextHops, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(nexthops, 1);
    STRUCT_CHILD_GETTERS(redirectNextHops, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return nexthops(); }
    else if constexpr (__id == 2) { return redirectNextHops(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::cfg::UdfGroup>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::cfg::UdfGroup>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::cfg::UdfGroup>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::cfg::UdfGroup>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::cfg::UdfGroup>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::UdfGroup, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::FlowletSwitchingConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::FlowletSwitchingConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::FlowletSwitchingConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::FlowletSwitchingConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::FlowletSwitchingConfig>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::inactivityIntervalUsecs, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::flowletTableSize, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::dynamicEgressLoadExponent, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::dynamicQueueExponent, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::dynamicQueueMinThresholdBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::dynamicQueueMaxThresholdBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::dynamicSampleRate, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::dynamicEgressMinThresholdBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::dynamicEgressMaxThresholdBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::dynamicPhysicalQueueExponent, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::maxLinks, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::switchingMode, Child<::facebook::fboss::cfg::SwitchingMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SwitchingMode>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::facebook::fboss::cfg::SwitchingMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SwitchingMode>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::inactivityIntervalUsecs, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::flowletTableSize, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::dynamicEgressLoadExponent, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::dynamicQueueExponent, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::dynamicQueueMinThresholdBytes, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::dynamicQueueMaxThresholdBytes, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::dynamicSampleRate, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::dynamicEgressMinThresholdBytes, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::dynamicEgressMaxThresholdBytes, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::dynamicPhysicalQueueExponent, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::maxLinks, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::switchingMode, std::integral_constant<apache::thrift::field_id_t, 12>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(inactivityIntervalUsecs, 1);
    STRUCT_CHILD_GETTERS(flowletTableSize, 2);
    STRUCT_CHILD_GETTERS(dynamicEgressLoadExponent, 3);
    STRUCT_CHILD_GETTERS(dynamicQueueExponent, 4);
    STRUCT_CHILD_GETTERS(dynamicQueueMinThresholdBytes, 5);
    STRUCT_CHILD_GETTERS(dynamicQueueMaxThresholdBytes, 6);
    STRUCT_CHILD_GETTERS(dynamicSampleRate, 7);
    STRUCT_CHILD_GETTERS(dynamicEgressMinThresholdBytes, 8);
    STRUCT_CHILD_GETTERS(dynamicEgressMaxThresholdBytes, 9);
    STRUCT_CHILD_GETTERS(dynamicPhysicalQueueExponent, 10);
    STRUCT_CHILD_GETTERS(maxLinks, 11);
    STRUCT_CHILD_GETTERS(switchingMode, 12);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return inactivityIntervalUsecs(); }
    else if constexpr (__id == 2) { return flowletTableSize(); }
    else if constexpr (__id == 3) { return dynamicEgressLoadExponent(); }
    else if constexpr (__id == 4) { return dynamicQueueExponent(); }
    else if constexpr (__id == 5) { return dynamicQueueMinThresholdBytes(); }
    else if constexpr (__id == 6) { return dynamicQueueMaxThresholdBytes(); }
    else if constexpr (__id == 7) { return dynamicSampleRate(); }
    else if constexpr (__id == 8) { return dynamicEgressMinThresholdBytes(); }
    else if constexpr (__id == 9) { return dynamicEgressMaxThresholdBytes(); }
    else if constexpr (__id == 10) { return dynamicPhysicalQueueExponent(); }
    else if constexpr (__id == 11) { return maxLinks(); }
    else if constexpr (__id == 12) { return switchingMode(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::TransceiverConfigOverride>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::TransceiverConfigOverride>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::TransceiverConfigOverride>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::TransceiverConfigOverride>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::TransceiverConfigOverride>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::TransceiverConfigOverride, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Ttl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Ttl,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Ttl>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Ttl,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Ttl>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::value, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::mask, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::value, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::mask, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(value, 1);
    STRUCT_CHILD_GETTERS(mask, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return value(); }
    else if constexpr (__id == 2) { return mask(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::IpTunnelFields>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::IpTunnelFields>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv6Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::set<::facebook::fboss::cfg::IPv6Field>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::set<::apache::thrift::type::enum_t<::facebook::fboss::cfg::IPv6Field>>,
   Parent> {
 public:
  using Self = Path<
   ::std::set<::facebook::fboss::cfg::IPv6Field>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::set<::apache::thrift::type::enum_t<::facebook::fboss::cfg::IPv6Field>>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::IPv6Field, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::IPv6Field>, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::IPv6Field);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::MediaLaneSettings>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::MediaLaneSettings>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::MediaLaneSettings>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::MediaLaneSettings>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::MediaLaneSettings>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::MediaLaneSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::RoutePrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::RoutePrefix,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::RoutePrefix>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::RoutePrefix,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::RoutePrefix>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::v6, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::prefix, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::mask, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::v6, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::prefix, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::mask, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(v6, 1);
    STRUCT_CHILD_GETTERS(prefix, 2);
    STRUCT_CHILD_GETTERS(mask, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return v6(); }
    else if constexpr (__id == 2) { return prefix(); }
    else if constexpr (__id == 3) { return mask(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::SdkVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::SdkVersion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SdkVersion>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::SdkVersion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SdkVersion>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::asicSdk, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::saiSdk, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::asicSdk, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::saiSdk, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(asicSdk, 1);
    STRUCT_CHILD_GETTERS(saiSdk, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return asicSdk(); }
    else if constexpr (__id == 2) { return saiSdk(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::MatchToAction>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::MatchToAction>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::MatchToAction>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::MatchToAction>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::MatchToAction>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::MatchToAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::LoadBalancer, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::LoadBalancer,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::LoadBalancer>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::LoadBalancer,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::LoadBalancer>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::id, Child<::facebook::fboss::cfg::LoadBalancerID, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::LoadBalancerID>>>,
std::pair<strings::fieldSelection, ChildThriftPath<::facebook::fboss::cfg::Fields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::algorithm, Child<::facebook::fboss::cfg::HashingAlgorithm, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::HashingAlgorithm>>>,
std::pair<strings::seed, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::cfg::LoadBalancerID, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::LoadBalancerID>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::Fields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::HashingAlgorithm, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::HashingAlgorithm>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::id, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::fieldSelection, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::algorithm, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::seed, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(id, 1);
    STRUCT_CHILD_GETTERS(fieldSelection, 2);
    STRUCT_CHILD_GETTERS(algorithm, 3);
    STRUCT_CHILD_GETTERS(seed, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return id(); }
    else if constexpr (__id == 2) { return fieldSelection(); }
    else if constexpr (__id == 3) { return algorithm(); }
    else if constexpr (__id == 4) { return seed(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::IpPrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::IpPrefix,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::IpPrefix>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::IpPrefix,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::IpPrefix>,
   Parent>;
  using strings = ::facebook::fboss::ctrl_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::ip, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::prefixLength, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::ip, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::prefixLength, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(ip, 1);
    STRUCT_CHILD_GETTERS(prefixLength, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return ip(); }
    else if constexpr (__id == 2) { return prefixLength(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::LoadBalancer>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::LoadBalancer>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::LoadBalancer>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::LoadBalancer>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::LoadBalancer>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::LoadBalancer, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::FirmwarePair>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::FirmwarePair>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::FirmwarePair>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::FirmwarePair>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::FirmwarePair>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::FirmwarePair, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv4Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::set<::facebook::fboss::cfg::IPv4Field>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::set<::apache::thrift::type::enum_t<::facebook::fboss::cfg::IPv4Field>>,
   Parent> {
 public:
  using Self = Path<
   ::std::set<::facebook::fboss::cfg::IPv4Field>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::set<::apache::thrift::type::enum_t<::facebook::fboss::cfg::IPv4Field>>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::IPv4Field, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::IPv4Field>, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::IPv4Field);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::Label, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::Label,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::Label>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::Label,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::Label>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::value, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::value, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(value, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return value(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::CmisOverrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::CmisOverrides,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::CmisOverrides>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::CmisOverrides,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::CmisOverrides>,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::rxEqualizerSettings, ChildThriftPath<::facebook::fboss::RxEqualizerSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::RxEqualizerSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::rxEqualizerSettings, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(rxEqualizerSettings, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return rxEqualizerSettings(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::GreTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::GreTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::GreTunnel>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::GreTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::GreTunnel>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::ip, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::ttl, ChildThriftPath<::facebook::fboss::cfg::Ttl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::Ttl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::ip, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::ttl, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(ip, 1);
    STRUCT_CHILD_GETTERS(ttl, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return ip(); }
    else if constexpr (__id == 2) { return ttl(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::LinkFaultStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::LinkFaultStatus,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::LinkFaultStatus>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::LinkFaultStatus,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::LinkFaultStatus>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::localFault, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::remoteFault, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::highCrcErrorRateLive, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::highCrcErrorRateChangedCount, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::localFault, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::remoteFault, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::highCrcErrorRateLive, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::highCrcErrorRateChangedCount, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(localFault, 1);
    STRUCT_CHILD_GETTERS(remoteFault, 2);
    STRUCT_CHILD_GETTERS(highCrcErrorRateLive, 3);
    STRUCT_CHILD_GETTERS(highCrcErrorRateChangedCount, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return localFault(); }
    else if constexpr (__id == 2) { return remoteFault(); }
    else if constexpr (__id == 3) { return highCrcErrorRateLive(); }
    else if constexpr (__id == 4) { return highCrcErrorRateChangedCount(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::LinearQueueCongestionDetection, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::LinearQueueCongestionDetection,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::LinearQueueCongestionDetection>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::LinearQueueCongestionDetection,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::LinearQueueCongestionDetection>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::minimumLength, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::maximumLength, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::probability, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::minimumLength, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::maximumLength, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::probability, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(minimumLength, 1);
    STRUCT_CHILD_GETTERS(maximumLength, 2);
    STRUCT_CHILD_GETTERS(probability, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return minimumLength(); }
    else if constexpr (__id == 2) { return maximumLength(); }
    else if constexpr (__id == 3) { return probability(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::MirrorTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::MirrorTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::MirrorTunnel>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::MirrorTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::MirrorTunnel>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::greTunnel, ChildThriftPath<::facebook::fboss::cfg::GreTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::sflowTunnel, ChildThriftPath<::facebook::fboss::cfg::SflowTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::srcIp, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::GreTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::SflowTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::greTunnel, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::sflowTunnel, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::srcIp, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(greTunnel, 1);
    STRUCT_CHILD_GETTERS(sflowTunnel, 2);
    STRUCT_CHILD_GETTERS(srcIp, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return greTunnel(); }
    else if constexpr (__id == 2) { return sflowTunnel(); }
    else if constexpr (__id == 3) { return srcIp(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Mirror, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Mirror,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Mirror>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Mirror,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Mirror>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::destination, ChildThriftPath<::facebook::fboss::cfg::MirrorDestination, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dscp, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
std::pair<strings::truncate, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::MirrorDestination, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::destination, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::dscp, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::truncate, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(name, 1);
    STRUCT_CHILD_GETTERS(destination, 2);
    STRUCT_CHILD_GETTERS(dscp, 3);
    STRUCT_CHILD_GETTERS(truncate, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return name(); }
    else if constexpr (__id == 2) { return destination(); }
    else if constexpr (__id == 3) { return dscp(); }
    else if constexpr (__id == 4) { return truncate(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::ExactMatchTableConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::ExactMatchTableConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::ExactMatchTableConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::ExactMatchTableConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::ExactMatchTableConfig>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dstPrefixLength, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::dstPrefixLength, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(name, 1);
    STRUCT_CHILD_GETTERS(dstPrefixLength, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return name(); }
    else if constexpr (__id == 2) { return dstPrefixLength(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::cfg::UdfPacketMatcher>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::cfg::UdfPacketMatcher>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::cfg::UdfPacketMatcher>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::cfg::UdfPacketMatcher>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::cfg::UdfPacketMatcher>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::UdfPacketMatcher, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::MediaLaneSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::MediaLaneSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::MediaLaneSettings>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::MediaLaneSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::MediaLaneSettings>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::lane, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::txDisable, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::txSquelch, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::txAdaptiveEqControl, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::txSquelchForce, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::lane, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::txDisable, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::txSquelch, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::txAdaptiveEqControl, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::txSquelchForce, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(lane, 1);
    STRUCT_CHILD_GETTERS(txDisable, 2);
    STRUCT_CHILD_GETTERS(txSquelch, 3);
    STRUCT_CHILD_GETTERS(txAdaptiveEqControl, 4);
    STRUCT_CHILD_GETTERS(txSquelchForce, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return lane(); }
    else if constexpr (__id == 2) { return txDisable(); }
    else if constexpr (__id == 3) { return txSquelch(); }
    else if constexpr (__id == 4) { return txAdaptiveEqControl(); }
    else if constexpr (__id == 5) { return txSquelchForce(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::CounterType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::CounterType>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::list<::apache::thrift::type::enum_t<::facebook::fboss::cfg::CounterType>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::CounterType>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::list<::apache::thrift::type::enum_t<::facebook::fboss::cfg::CounterType>>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::CounterType, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::CounterType>, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::NextHopThrift>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::NextHopThrift>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::NextHopThrift>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::NextHopThrift>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::NextHopThrift, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PortQueueRate, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PortQueueRate,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   ::apache::thrift::type::union_t<::facebook::fboss::cfg::PortQueueRate>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PortQueueRate,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   ::apache::thrift::type::union_t<::facebook::fboss::cfg::PortQueueRate>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::pktsPerSec, ChildThriftPath<::facebook::fboss::cfg::Range, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::kbitsPerSec, ChildThriftPath<::facebook::fboss::cfg::Range, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::Range, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::Range, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::pktsPerSec, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::kbitsPerSec, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(pktsPerSec, 1);
    STRUCT_CHILD_GETTERS(kbitsPerSec, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return pktsPerSec(); }
    else if constexpr (__id == 2) { return kbitsPerSec(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::DscpQosMap>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::DscpQosMap>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::DscpQosMap>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::DscpQosMap>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::DscpQosMap>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::DscpQosMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::InterfaceFields>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::InterfaceFields>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::LaneMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::LaneMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::LaneMap>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::LaneMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::LaneMap>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::rx, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
std::pair<strings::tx, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::rx, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::tx, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(rx, 1);
    STRUCT_CHILD_GETTERS(tx, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return rx(); }
    else if constexpr (__id == 2) { return tx(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::SwitchSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::SwitchSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SwitchSettings>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::SwitchSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SwitchSettings>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::l2LearningMode, Child<::facebook::fboss::cfg::L2LearningMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::L2LearningMode>>>,
std::pair<strings::qcmEnable, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::ptpTcEnable, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::l2AgeTimerSeconds, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::maxRouteCounterIDs, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::blockNeighbors, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Neighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::macAddrsToBlock, ChildThriftPath<::std::vector<::facebook::fboss::cfg::MacAndVlan>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::switchType, Child<::facebook::fboss::cfg::SwitchType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SwitchType>>>,
std::pair<strings::switchId, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::exactMatchTableConfigs, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExactMatchTableConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::switchIdToSwitchType_DEPRECATED, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::switchDrainState, Child<::facebook::fboss::cfg::SwitchDrainState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SwitchDrainState>>>,
std::pair<strings::switchIdToSwitchInfo, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::minLinksToRemainInVOQDomain, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::minLinksToJoinVOQDomain, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::vendorMacOuis, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::metaMacOuis, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::needL2EntryForNeighbor, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::cfg::L2LearningMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::L2LearningMode>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Neighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::MacAndVlan>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::facebook::fboss::cfg::SwitchType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SwitchType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExactMatchTableConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::facebook::fboss::cfg::SwitchDrainState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SwitchDrainState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::l2LearningMode, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::qcmEnable, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::ptpTcEnable, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::l2AgeTimerSeconds, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::maxRouteCounterIDs, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::blockNeighbors, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::macAddrsToBlock, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::switchType, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::switchId, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::exactMatchTableConfigs, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::switchIdToSwitchType_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::switchDrainState, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::switchIdToSwitchInfo, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::minLinksToRemainInVOQDomain, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::minLinksToJoinVOQDomain, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::vendorMacOuis, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::metaMacOuis, std::integral_constant<apache::thrift::field_id_t, 17>>,
std::pair<strings::needL2EntryForNeighbor, std::integral_constant<apache::thrift::field_id_t, 18>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(l2LearningMode, 1);
    STRUCT_CHILD_GETTERS(qcmEnable, 2);
    STRUCT_CHILD_GETTERS(ptpTcEnable, 3);
    STRUCT_CHILD_GETTERS(l2AgeTimerSeconds, 4);
    STRUCT_CHILD_GETTERS(maxRouteCounterIDs, 5);
    STRUCT_CHILD_GETTERS(blockNeighbors, 6);
    STRUCT_CHILD_GETTERS(macAddrsToBlock, 7);
    STRUCT_CHILD_GETTERS(switchType, 8);
    STRUCT_CHILD_GETTERS(switchId, 9);
    STRUCT_CHILD_GETTERS(exactMatchTableConfigs, 10);
    STRUCT_CHILD_GETTERS(switchIdToSwitchType_DEPRECATED, 11);
    STRUCT_CHILD_GETTERS(switchDrainState, 12);
    STRUCT_CHILD_GETTERS(switchIdToSwitchInfo, 13);
    STRUCT_CHILD_GETTERS(minLinksToRemainInVOQDomain, 14);
    STRUCT_CHILD_GETTERS(minLinksToJoinVOQDomain, 15);
    STRUCT_CHILD_GETTERS(vendorMacOuis, 16);
    STRUCT_CHILD_GETTERS(metaMacOuis, 17);
    STRUCT_CHILD_GETTERS(needL2EntryForNeighbor, 18);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return l2LearningMode(); }
    else if constexpr (__id == 2) { return qcmEnable(); }
    else if constexpr (__id == 3) { return ptpTcEnable(); }
    else if constexpr (__id == 4) { return l2AgeTimerSeconds(); }
    else if constexpr (__id == 5) { return maxRouteCounterIDs(); }
    else if constexpr (__id == 6) { return blockNeighbors(); }
    else if constexpr (__id == 7) { return macAddrsToBlock(); }
    else if constexpr (__id == 8) { return switchType(); }
    else if constexpr (__id == 9) { return switchId(); }
    else if constexpr (__id == 10) { return exactMatchTableConfigs(); }
    else if constexpr (__id == 11) { return switchIdToSwitchType_DEPRECATED(); }
    else if constexpr (__id == 12) { return switchDrainState(); }
    else if constexpr (__id == 13) { return switchIdToSwitchInfo(); }
    else if constexpr (__id == 14) { return minLinksToRemainInVOQDomain(); }
    else if constexpr (__id == 15) { return minLinksToJoinVOQDomain(); }
    else if constexpr (__id == 16) { return vendorMacOuis(); }
    else if constexpr (__id == 17) { return metaMacOuis(); }
    else if constexpr (__id == 18) { return needL2EntryForNeighbor(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::PortNeighbor>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortNeighbor>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::PortNeighbor>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortNeighbor>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::PortNeighbor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::TransceiverSpecFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::TransceiverSpecFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::TransceiverSpecFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::TransceiverSpecFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::TransceiverSpecFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::id, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::cableLength, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::mediaInterface, Child<::facebook::fboss::MediaInterfaceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::MediaInterfaceCode>>>,
std::pair<strings::managementInterface, Child<::facebook::fboss::TransceiverManagementInterface, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::TransceiverManagementInterface>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::MediaInterfaceCode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::MediaInterfaceCode>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::TransceiverManagementInterface, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::TransceiverManagementInterface>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::id, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::cableLength, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::mediaInterface, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::managementInterface, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(id, 1);
    STRUCT_CHILD_GETTERS(cableLength, 2);
    STRUCT_CHILD_GETTERS(mediaInterface, 3);
    STRUCT_CHILD_GETTERS(managementInterface, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return id(); }
    else if constexpr (__id == 2) { return cableLength(); }
    else if constexpr (__id == 3) { return mediaInterface(); }
    else if constexpr (__id == 4) { return managementInterface(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::DscpQosMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::DscpQosMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::DscpQosMap>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::DscpQosMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::DscpQosMap>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::internalTrafficClass, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::fromDscpToTrafficClass, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::fromTrafficClassToDscp, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::internalTrafficClass, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::fromDscpToTrafficClass, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::fromTrafficClassToDscp, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(internalTrafficClass, 1);
    STRUCT_CHILD_GETTERS(fromDscpToTrafficClass, 2);
    STRUCT_CHILD_GETTERS(fromTrafficClassToDscp, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return internalTrafficClass(); }
    else if constexpr (__id == 2) { return fromDscpToTrafficClass(); }
    else if constexpr (__id == 3) { return fromTrafficClassToDscp(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::ActiveQueueManagement>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::ActiveQueueManagement>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::ActiveQueueManagement>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::ActiveQueueManagement>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::ActiveQueueManagement>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::ActiveQueueManagement, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::AclTable, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::AclTable,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::AclTable>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::AclTable,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::AclTable>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::priority, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::aclEntries, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::actionTypes, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableActionType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::qualifiers, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableQualifier>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableActionType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableQualifier>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::priority, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::aclEntries, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::actionTypes, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::qualifiers, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(name, 1);
    STRUCT_CHILD_GETTERS(priority, 2);
    STRUCT_CHILD_GETTERS(aclEntries, 3);
    STRUCT_CHILD_GETTERS(actionTypes, 4);
    STRUCT_CHILD_GETTERS(qualifiers, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return name(); }
    else if constexpr (__id == 2) { return priority(); }
    else if constexpr (__id == 3) { return aclEntries(); }
    else if constexpr (__id == 4) { return actionTypes(); }
    else if constexpr (__id == 5) { return qualifiers(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::ExpQosMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::ExpQosMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::ExpQosMap>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::ExpQosMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::ExpQosMap>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::internalTrafficClass, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::fromExpToTrafficClass, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::fromTrafficClassToExp, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::internalTrafficClass, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::fromExpToTrafficClass, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::fromTrafficClassToExp, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(internalTrafficClass, 1);
    STRUCT_CHILD_GETTERS(fromExpToTrafficClass, 2);
    STRUCT_CHILD_GETTERS(fromTrafficClassToExp, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return internalTrafficClass(); }
    else if constexpr (__id == 2) { return fromExpToTrafficClass(); }
    else if constexpr (__id == 3) { return fromTrafficClassToExp(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::VlanFields>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::VlanFields>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteWithNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::StaticMplsRouteWithNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticMplsRouteWithNextHops>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::StaticMplsRouteWithNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticMplsRouteWithNextHops>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::StaticMplsRouteWithNextHops, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
   Parent>;
  using Child = Path<::std::int32_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::L4PortRange, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::L4PortRange,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::L4PortRange>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::L4PortRange,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::L4PortRange>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::min, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::max, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::invert, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::min, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::max, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::invert, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(min, 1);
    STRUCT_CHILD_GETTERS(max, 2);
    STRUCT_CHILD_GETTERS(invert, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return min(); }
    else if constexpr (__id == 2) { return max(); }
    else if constexpr (__id == 3) { return invert(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::StaticMplsRouteWithNextHops, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::StaticMplsRouteWithNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticMplsRouteWithNextHops>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::StaticMplsRouteWithNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticMplsRouteWithNextHops>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::ingressLabel, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::nexthops, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::ingressLabel, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::nexthops, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(ingressLabel, 1);
    STRUCT_CHILD_GETTERS(nexthops, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return ingressLabel(); }
    else if constexpr (__id == 2) { return nexthops(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::AclTableGroupFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::AclTableGroupFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::AclTableGroupFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::AclTableGroupFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::AclTableGroupFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::stage, Child<::facebook::fboss::cfg::AclStage, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclStage>>>,
std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::aclTableMap, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclTableFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::cfg::AclStage, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclStage>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclTableFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::stage, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::aclTableMap, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(stage, 1);
    STRUCT_CHILD_GETTERS(name, 2);
    STRUCT_CHILD_GETTERS(aclTableMap, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return stage(); }
    else if constexpr (__id == 2) { return name(); }
    else if constexpr (__id == 3) { return aclTableMap(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::state::PortPgFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::state::PortPgFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::state::PortPgFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::state::PortPgFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::state::PortPgFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::PortPgFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::StaticMplsRouteNoNextHops, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::StaticMplsRouteNoNextHops, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::StaticMplsRouteNoNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::StaticMplsRouteNoNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::ingressLabel, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::ingressLabel, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(ingressLabel, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return ingressLabel(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::VendorConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::VendorConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::VendorConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::VendorConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::VendorConfig>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_validation_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::vendorName, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::partNumberToTransceiverAttributes, ChildThriftPath<std::unordered_map<std::string, facebook::fboss::TransceiverAttributes>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<std::unordered_map<std::string, facebook::fboss::TransceiverAttributes>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::vendorName, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::partNumberToTransceiverAttributes, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(vendorName, 1);
    STRUCT_CHILD_GETTERS(partNumberToTransceiverAttributes, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return vendorName(); }
    else if constexpr (__id == 2) { return partNumberToTransceiverAttributes(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::PortQueueFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::PortQueueFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::PortQueueFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::PortQueueFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::PortQueueFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::AclEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::AclEntry>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::AclEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::AclEntry>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::AclEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Interface, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Interface,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Interface>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Interface,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Interface>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::intfID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::routerID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::vlanID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::mac, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::ipAddresses, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::ndp, ChildThriftPath<::facebook::fboss::cfg::NdpConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::mtu, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::isVirtual, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::isStateSyncDisabled, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::type, Child<::facebook::fboss::cfg::InterfaceType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::InterfaceType>>>,
std::pair<strings::dhcpRelayAddressV4, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dhcpRelayAddressV6, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::dhcpRelayOverridesV4, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dhcpRelayOverridesV6, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::scope, Child<::facebook::fboss::cfg::Scope, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::Scope>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::facebook::fboss::cfg::NdpConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::facebook::fboss::cfg::InterfaceType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::InterfaceType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::facebook::fboss::cfg::Scope, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::Scope>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::intfID, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::routerID, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::vlanID, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::mac, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::ipAddresses, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::ndp, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::mtu, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::isVirtual, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::isStateSyncDisabled, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::type, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::dhcpRelayAddressV4, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::dhcpRelayAddressV6, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::dhcpRelayOverridesV4, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::dhcpRelayOverridesV6, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::scope, std::integral_constant<apache::thrift::field_id_t, 16>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(intfID, 1);
    STRUCT_CHILD_GETTERS(routerID, 2);
    STRUCT_CHILD_GETTERS(vlanID, 3);
    STRUCT_CHILD_GETTERS(name, 4);
    STRUCT_CHILD_GETTERS(mac, 5);
    STRUCT_CHILD_GETTERS(ipAddresses, 6);
    STRUCT_CHILD_GETTERS(ndp, 7);
    STRUCT_CHILD_GETTERS(mtu, 8);
    STRUCT_CHILD_GETTERS(isVirtual, 9);
    STRUCT_CHILD_GETTERS(isStateSyncDisabled, 10);
    STRUCT_CHILD_GETTERS(type, 11);
    STRUCT_CHILD_GETTERS(dhcpRelayAddressV4, 12);
    STRUCT_CHILD_GETTERS(dhcpRelayAddressV6, 13);
    STRUCT_CHILD_GETTERS(dhcpRelayOverridesV4, 14);
    STRUCT_CHILD_GETTERS(dhcpRelayOverridesV6, 15);
    STRUCT_CHILD_GETTERS(scope, 16);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return intfID(); }
    else if constexpr (__id == 2) { return routerID(); }
    else if constexpr (__id == 3) { return vlanID(); }
    else if constexpr (__id == 4) { return name(); }
    else if constexpr (__id == 5) { return mac(); }
    else if constexpr (__id == 6) { return ipAddresses(); }
    else if constexpr (__id == 7) { return ndp(); }
    else if constexpr (__id == 8) { return mtu(); }
    else if constexpr (__id == 9) { return isVirtual(); }
    else if constexpr (__id == 10) { return isStateSyncDisabled(); }
    else if constexpr (__id == 11) { return type(); }
    else if constexpr (__id == 12) { return dhcpRelayAddressV4(); }
    else if constexpr (__id == 13) { return dhcpRelayAddressV6(); }
    else if constexpr (__id == 14) { return dhcpRelayOverridesV4(); }
    else if constexpr (__id == 15) { return dhcpRelayOverridesV6(); }
    else if constexpr (__id == 16) { return scope(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::std::int64_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i64_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::std::int64_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i64_t>,
   Parent>;
  using Child = Path<::std::int64_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i32_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i32_t>,
   Parent>;
  using Child = Path<::std::int32_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::InterfaceFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::InterfaceFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::InterfaceFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Port, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Port,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Port>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Port,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::Port>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::logicalID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::state, Child<::facebook::fboss::cfg::PortState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortState>>>,
std::pair<strings::minFrameSize, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::maxFrameSize, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::parserType, Child<::facebook::fboss::cfg::ParserType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::ParserType>>>,
std::pair<strings::routable, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::ingressVlan, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::speed, Child<::facebook::fboss::cfg::PortSpeed, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortSpeed>>>,
std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::description, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::queues_DEPRECATED, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::pause, ChildThriftPath<::facebook::fboss::cfg::PortPause, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::sFlowIngressRate, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::sFlowEgressRate, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::loopbackMode, Child<::facebook::fboss::cfg::PortLoopbackMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortLoopbackMode>>>,
std::pair<strings::ingressMirror, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::egressMirror, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::expectedLLDPValues, ChildThriftPath<::std::map<::facebook::fboss::cfg::LLDPTag, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::sampleDest, Child<::facebook::fboss::cfg::SampleDestination, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SampleDestination>>>,
std::pair<strings::portQueueConfigName, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::lookupClasses, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclLookupClass>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::profileID, Child<::facebook::fboss::cfg::PortProfileID, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortProfileID>>>,
std::pair<strings::pfc, ChildThriftPath<::facebook::fboss::cfg::PortPfc, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::counterTags, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::portType, Child<::facebook::fboss::cfg::PortType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortType>>>,
std::pair<strings::expectedNeighborReachability, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::drainState, Child<::facebook::fboss::cfg::PortDrainState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortDrainState>>>,
std::pair<strings::flowletConfigName, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::scope, Child<::facebook::fboss::cfg::Scope, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::Scope>>>,
std::pair<strings::portVoqConfigName, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::PortState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::facebook::fboss::cfg::ParserType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::ParserType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::facebook::fboss::cfg::PortSpeed, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortSpeed>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, ChildThriftPath<::facebook::fboss::cfg::PortPause, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::facebook::fboss::cfg::PortLoopbackMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortLoopbackMode>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, ChildThriftPath<::std::map<::facebook::fboss::cfg::LLDPTag, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, Child<::facebook::fboss::cfg::SampleDestination, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SampleDestination>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclLookupClass>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, Child<::facebook::fboss::cfg::PortProfileID, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortProfileID>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, ChildThriftPath<::facebook::fboss::cfg::PortPfc, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, Child<::facebook::fboss::cfg::PortType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 29>, Child<::facebook::fboss::cfg::PortDrainState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortDrainState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 31>, Child<::facebook::fboss::cfg::Scope, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::Scope>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 32>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::logicalID, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::state, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::minFrameSize, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::maxFrameSize, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::parserType, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::routable, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::ingressVlan, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::speed, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::description, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::queues_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::pause, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::sFlowIngressRate, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::sFlowEgressRate, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::loopbackMode, std::integral_constant<apache::thrift::field_id_t, 17>>,
std::pair<strings::ingressMirror, std::integral_constant<apache::thrift::field_id_t, 18>>,
std::pair<strings::egressMirror, std::integral_constant<apache::thrift::field_id_t, 19>>,
std::pair<strings::expectedLLDPValues, std::integral_constant<apache::thrift::field_id_t, 20>>,
std::pair<strings::sampleDest, std::integral_constant<apache::thrift::field_id_t, 21>>,
std::pair<strings::portQueueConfigName, std::integral_constant<apache::thrift::field_id_t, 22>>,
std::pair<strings::lookupClasses, std::integral_constant<apache::thrift::field_id_t, 23>>,
std::pair<strings::profileID, std::integral_constant<apache::thrift::field_id_t, 24>>,
std::pair<strings::pfc, std::integral_constant<apache::thrift::field_id_t, 25>>,
std::pair<strings::counterTags, std::integral_constant<apache::thrift::field_id_t, 26>>,
std::pair<strings::portType, std::integral_constant<apache::thrift::field_id_t, 27>>,
std::pair<strings::expectedNeighborReachability, std::integral_constant<apache::thrift::field_id_t, 28>>,
std::pair<strings::drainState, std::integral_constant<apache::thrift::field_id_t, 29>>,
std::pair<strings::flowletConfigName, std::integral_constant<apache::thrift::field_id_t, 30>>,
std::pair<strings::scope, std::integral_constant<apache::thrift::field_id_t, 31>>,
std::pair<strings::portVoqConfigName, std::integral_constant<apache::thrift::field_id_t, 32>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(logicalID, 1);
    STRUCT_CHILD_GETTERS(state, 2);
    STRUCT_CHILD_GETTERS(minFrameSize, 3);
    STRUCT_CHILD_GETTERS(maxFrameSize, 4);
    STRUCT_CHILD_GETTERS(parserType, 5);
    STRUCT_CHILD_GETTERS(routable, 6);
    STRUCT_CHILD_GETTERS(ingressVlan, 7);
    STRUCT_CHILD_GETTERS(speed, 8);
    STRUCT_CHILD_GETTERS(name, 9);
    STRUCT_CHILD_GETTERS(description, 10);
    STRUCT_CHILD_GETTERS(queues_DEPRECATED, 12);
    STRUCT_CHILD_GETTERS(pause, 13);
    STRUCT_CHILD_GETTERS(sFlowIngressRate, 14);
    STRUCT_CHILD_GETTERS(sFlowEgressRate, 15);
    STRUCT_CHILD_GETTERS(loopbackMode, 17);
    STRUCT_CHILD_GETTERS(ingressMirror, 18);
    STRUCT_CHILD_GETTERS(egressMirror, 19);
    STRUCT_CHILD_GETTERS(expectedLLDPValues, 20);
    STRUCT_CHILD_GETTERS(sampleDest, 21);
    STRUCT_CHILD_GETTERS(portQueueConfigName, 22);
    STRUCT_CHILD_GETTERS(lookupClasses, 23);
    STRUCT_CHILD_GETTERS(profileID, 24);
    STRUCT_CHILD_GETTERS(pfc, 25);
    STRUCT_CHILD_GETTERS(counterTags, 26);
    STRUCT_CHILD_GETTERS(portType, 27);
    STRUCT_CHILD_GETTERS(expectedNeighborReachability, 28);
    STRUCT_CHILD_GETTERS(drainState, 29);
    STRUCT_CHILD_GETTERS(flowletConfigName, 30);
    STRUCT_CHILD_GETTERS(scope, 31);
    STRUCT_CHILD_GETTERS(portVoqConfigName, 32);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return logicalID(); }
    else if constexpr (__id == 2) { return state(); }
    else if constexpr (__id == 3) { return minFrameSize(); }
    else if constexpr (__id == 4) { return maxFrameSize(); }
    else if constexpr (__id == 5) { return parserType(); }
    else if constexpr (__id == 6) { return routable(); }
    else if constexpr (__id == 7) { return ingressVlan(); }
    else if constexpr (__id == 8) { return speed(); }
    else if constexpr (__id == 9) { return name(); }
    else if constexpr (__id == 10) { return description(); }
    else if constexpr (__id == 12) { return queues_DEPRECATED(); }
    else if constexpr (__id == 13) { return pause(); }
    else if constexpr (__id == 14) { return sFlowIngressRate(); }
    else if constexpr (__id == 15) { return sFlowEgressRate(); }
    else if constexpr (__id == 17) { return loopbackMode(); }
    else if constexpr (__id == 18) { return ingressMirror(); }
    else if constexpr (__id == 19) { return egressMirror(); }
    else if constexpr (__id == 20) { return expectedLLDPValues(); }
    else if constexpr (__id == 21) { return sampleDest(); }
    else if constexpr (__id == 22) { return portQueueConfigName(); }
    else if constexpr (__id == 23) { return lookupClasses(); }
    else if constexpr (__id == 24) { return profileID(); }
    else if constexpr (__id == 25) { return pfc(); }
    else if constexpr (__id == 26) { return counterTags(); }
    else if constexpr (__id == 27) { return portType(); }
    else if constexpr (__id == 28) { return expectedNeighborReachability(); }
    else if constexpr (__id == 29) { return drainState(); }
    else if constexpr (__id == 30) { return flowletConfigName(); }
    else if constexpr (__id == 31) { return scope(); }
    else if constexpr (__id == 32) { return portVoqConfigName(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::StaticIp2MplsRoute, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::StaticIp2MplsRoute,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticIp2MplsRoute>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::StaticIp2MplsRoute,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::StaticIp2MplsRoute>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::routerID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::prefix, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::nexthops, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::routerID, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::prefix, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::nexthops, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(routerID, 1);
    STRUCT_CHILD_GETTERS(prefix, 2);
    STRUCT_CHILD_GETTERS(nexthops, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return routerID(); }
    else if constexpr (__id == 2) { return prefix(); }
    else if constexpr (__id == 3) { return nexthops(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::cfg::ChipConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::cfg::ChipConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::variant>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::union_t<::facebook::fboss::cfg::ChipConfig>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::cfg::ChipConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::variant>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::union_t<::facebook::fboss::cfg::ChipConfig>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::ChipConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchInfo>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SwitchInfo>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchInfo>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SwitchInfo>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::SwitchInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int64_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::MacAndVlan>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::MacAndVlan>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::MacAndVlan>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::MacAndVlan>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::MacAndVlan>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::MacAndVlan, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::SetDscpMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::SetDscpMatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SetDscpMatchAction>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::SetDscpMatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SetDscpMatchAction>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::dscpValue, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int8_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::byte_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::dscpValue, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(dscpValue, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return dscpValue(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::AclTableFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::AclTableFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::AclTableFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::AclTableFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::AclTableFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::id, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::priority, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::aclMap, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::actionTypes, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableActionType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::qualifiers, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableQualifier>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableActionType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableQualifier>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::id, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::priority, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::aclMap, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::actionTypes, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::qualifiers, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(id, 1);
    STRUCT_CHILD_GETTERS(priority, 2);
    STRUCT_CHILD_GETTERS(aclMap, 3);
    STRUCT_CHILD_GETTERS(actionTypes, 4);
    STRUCT_CHILD_GETTERS(qualifiers, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return id(); }
    else if constexpr (__id == 2) { return priority(); }
    else if constexpr (__id == 3) { return aclMap(); }
    else if constexpr (__id == 4) { return actionTypes(); }
    else if constexpr (__id == 5) { return qualifiers(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::ParticipantInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::facebook::fboss::state::ParticipantInfo>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::ParticipantInfo>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::facebook::fboss::state::ParticipantInfo>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::ParticipantInfo>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::ParticipantInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::AggregatePortFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::AggregatePortFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::AggregatePortFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::ParticipantInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::ParticipantInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::ParticipantInfo>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::ParticipantInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::ParticipantInfo>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::systemPriority, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::systemID, ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::key, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::portPriority, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::port, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::state, Child<::facebook::fboss::state::LacpState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::state::LacpState>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::facebook::fboss::state::LacpState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::state::LacpState>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::systemPriority, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::systemID, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::key, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::portPriority, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::port, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::state, std::integral_constant<apache::thrift::field_id_t, 6>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(systemPriority, 1);
    STRUCT_CHILD_GETTERS(systemID, 2);
    STRUCT_CHILD_GETTERS(key, 3);
    STRUCT_CHILD_GETTERS(portPriority, 4);
    STRUCT_CHILD_GETTERS(port, 5);
    STRUCT_CHILD_GETTERS(state, 6);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return systemPriority(); }
    else if constexpr (__id == 2) { return systemID(); }
    else if constexpr (__id == 3) { return key(); }
    else if constexpr (__id == 4) { return portPriority(); }
    else if constexpr (__id == 5) { return port(); }
    else if constexpr (__id == 6) { return state(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::TeFlowEntryFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::TeFlowEntryFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::TeFlowEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::CabledTestPair>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::CabledTestPair>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::CabledTestPair>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::CabledTestPair>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::CabledTestPair>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::CabledTestPair, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::MirrorDestination, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::MirrorDestination,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::MirrorDestination>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::MirrorDestination,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::MirrorDestination>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::egressPort, ChildThriftPath<::facebook::fboss::cfg::MirrorEgressPort, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::ip, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::tunnel, ChildThriftPath<::facebook::fboss::cfg::MirrorTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::MirrorEgressPort, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::cfg::MirrorTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::egressPort, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::ip, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::tunnel, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(egressPort, 1);
    STRUCT_CHILD_GETTERS(ip, 2);
    STRUCT_CHILD_GETTERS(tunnel, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return egressPort(); }
    else if constexpr (__id == 2) { return ip(); }
    else if constexpr (__id == 3) { return tunnel(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::TeFlowEntryFields>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::TeFlowEntryFields>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
   Parent>;
  using Child = Path<::std::int16_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::IpTunnelFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::IpTunnelFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::IpTunnelFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::SflowCollectorFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::SflowCollectorFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::SflowCollectorFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::SflowCollectorFields>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::SflowCollectorFields>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::struct_t<::facebook::fboss::cfg::DsfNode>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::struct_t<::facebook::fboss::cfg::DsfNode>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::LabelForwardingEntryFields>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::LabelForwardingEntryFields>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::AclTtl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::AclTtl,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::AclTtl>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::AclTtl,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::AclTtl>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::value, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::mask, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::value, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::mask, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(value, 1);
    STRUCT_CHILD_GETTERS(mask, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return value(); }
    else if constexpr (__id == 2) { return mask(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::state::BlockedMacAddress>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::state::BlockedMacAddress>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::state::BlockedMacAddress>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::state::BlockedMacAddress>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::state::BlockedMacAddress>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::BlockedMacAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::RouteFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::RouteFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::RouteFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::RouteFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::RouteFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::prefix, ChildThriftPath<::facebook::fboss::state::RoutePrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::nexthopsmulti, ChildThriftPath<::facebook::fboss::state::RouteNextHopsMulti, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::fwd, ChildThriftPath<::facebook::fboss::state::RouteNextHopEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::flags, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::classID, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::state::RoutePrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::state::RouteNextHopsMulti, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::state::RouteNextHopEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::prefix, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::nexthopsmulti, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::fwd, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::flags, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::classID, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(prefix, 1);
    STRUCT_CHILD_GETTERS(nexthopsmulti, 2);
    STRUCT_CHILD_GETTERS(fwd, 3);
    STRUCT_CHILD_GETTERS(flags, 4);
    STRUCT_CHILD_GETTERS(classID, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return prefix(); }
    else if constexpr (__id == 2) { return nexthopsmulti(); }
    else if constexpr (__id == 3) { return fwd(); }
    else if constexpr (__id == 4) { return flags(); }
    else if constexpr (__id == 5) { return classID(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, bool>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, bool>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::bool_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, bool>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::bool_t>,
   Parent>;
  using Child = Path<bool, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::Port>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::Port>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::Port>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::Port>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::Port>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::Port, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, bool>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, bool>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::bool_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, bool>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::bool_t>,
   Parent>;
  using Child = Path<bool, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::VlanFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::VlanFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::VlanFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::VlanInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::VlanInfo>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::VlanInfo>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::VlanInfo>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::VlanInfo>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::VlanInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PhyState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PhyState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PhyState>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PhyState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PhyState>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::phyChip, ChildThriftPath<::facebook::fboss::phy::DataPlanePhyChip, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::fwVersion, ChildThriftPath<::facebook::fboss::phy::PhyFwVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::speed, Child<::facebook::fboss::cfg::PortSpeed, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortSpeed>>>,
std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::linkState, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::system, ChildThriftPath<::facebook::fboss::phy::PhySideState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::line, ChildThriftPath<::facebook::fboss::phy::PhySideState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::switchID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::timeCollected, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::phy::DataPlanePhyChip, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::phy::PhyFwVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::PortSpeed, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortSpeed>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::facebook::fboss::phy::PhySideState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::facebook::fboss::phy::PhySideState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::phyChip, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::fwVersion, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::speed, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::linkState, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::system, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::line, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::switchID, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::timeCollected, std::integral_constant<apache::thrift::field_id_t, 9>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(phyChip, 1);
    STRUCT_CHILD_GETTERS(fwVersion, 2);
    STRUCT_CHILD_GETTERS(speed, 3);
    STRUCT_CHILD_GETTERS(name, 4);
    STRUCT_CHILD_GETTERS(linkState, 5);
    STRUCT_CHILD_GETTERS(system, 6);
    STRUCT_CHILD_GETTERS(line, 7);
    STRUCT_CHILD_GETTERS(switchID, 8);
    STRUCT_CHILD_GETTERS(timeCollected, 9);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return phyChip(); }
    else if constexpr (__id == 2) { return fwVersion(); }
    else if constexpr (__id == 3) { return speed(); }
    else if constexpr (__id == 4) { return name(); }
    else if constexpr (__id == 5) { return linkState(); }
    else if constexpr (__id == 6) { return system(); }
    else if constexpr (__id == 7) { return line(); }
    else if constexpr (__id == 8) { return switchID(); }
    else if constexpr (__id == 9) { return timeCollected(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclStage>, ::apache::thrift::type::struct_t<::facebook::fboss::state::AclTableGroupFields>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclStage>, ::apache::thrift::type::struct_t<::facebook::fboss::state::AclTableGroupFields>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::NeighborEntryFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::NeighborEntryFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::NeighborEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::MirrorEgressPort, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::MirrorEgressPort,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   ::apache::thrift::type::union_t<::facebook::fboss::cfg::MirrorEgressPort>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::MirrorEgressPort,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   ::apache::thrift::type::union_t<::facebook::fboss::cfg::MirrorEgressPort>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::logicalID, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::logicalID, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(name, 1);
    STRUCT_CHILD_GETTERS(logicalID, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return name(); }
    else if constexpr (__id == 2) { return logicalID(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::VlanInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::VlanInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::VlanInfo>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::VlanInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::VlanInfo>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::tagged, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::tagged, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(tagged, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return tagged(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::switch_reachability::SwitchReachability>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int64_t, ::facebook::fboss::switch_reachability::SwitchReachability>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::struct_t<::facebook::fboss::switch_reachability::SwitchReachability>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int64_t, ::facebook::fboss::switch_reachability::SwitchReachability>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::struct_t<::facebook::fboss::switch_reachability::SwitchReachability>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::switch_reachability::SwitchReachability, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int64_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::Neighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::Neighbor>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::Neighbor>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::Neighbor>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::Neighbor>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::Neighbor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::MKASakKey, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::MKASakKey,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::MKASakKey>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::MKASakKey,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::MKASakKey>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::sci, ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::associationNum, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::sci, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::associationNum, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(sci, 1);
    STRUCT_CHILD_GETTERS(associationNum, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return sci(); }
    else if constexpr (__id == 2) { return associationNum(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::SwitchInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::SwitchInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SwitchInfo>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::SwitchInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::cfg::SwitchInfo>,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::switchType, Child<::facebook::fboss::cfg::SwitchType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SwitchType>>>,
std::pair<strings::asicType, Child<::facebook::fboss::cfg::AsicType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AsicType>>>,
std::pair<strings::switchIndex, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::portIdRange, ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::systemPortRange, ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::switchMac, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::connectionHandle, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::cfg::SwitchType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SwitchType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::AsicType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AsicType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::switchType, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::asicType, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::switchIndex, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::portIdRange, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::systemPortRange, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::switchMac, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::connectionHandle, std::integral_constant<apache::thrift::field_id_t, 7>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(switchType, 1);
    STRUCT_CHILD_GETTERS(asicType, 2);
    STRUCT_CHILD_GETTERS(switchIndex, 3);
    STRUCT_CHILD_GETTERS(portIdRange, 4);
    STRUCT_CHILD_GETTERS(systemPortRange, 5);
    STRUCT_CHILD_GETTERS(switchMac, 6);
    STRUCT_CHILD_GETTERS(connectionHandle, 7);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return switchType(); }
    else if constexpr (__id == 2) { return asicType(); }
    else if constexpr (__id == 3) { return switchIndex(); }
    else if constexpr (__id == 4) { return portIdRange(); }
    else if constexpr (__id == 5) { return systemPortRange(); }
    else if constexpr (__id == 6) { return switchMac(); }
    else if constexpr (__id == 7) { return connectionHandle(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::PortError>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::PortError>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::list<::apache::thrift::type::enum_t<::facebook::fboss::PortError>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::PortError>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   ::apache::thrift::type::list<::apache::thrift::type::enum_t<::facebook::fboss::PortError>>,
   Parent>;
  using Child = Path<::facebook::fboss::PortError, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::PortError>, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::FibContainerFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::FibContainerFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::FibContainerFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::FibContainerFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::FibContainerFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::vrf, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::fibV4, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::RouteFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::fibV6, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::RouteFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::RouteFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::RouteFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::vrf, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::fibV4, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::fibV6, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(vrf, 1);
    STRUCT_CHILD_GETTERS(fibV4, 2);
    STRUCT_CHILD_GETTERS(fibV6, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return vrf(); }
    else if constexpr (__id == 2) { return fibV4(); }
    else if constexpr (__id == 3) { return fibV6(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::PortQueueFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::PortQueueFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::PortQueueFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::PortQueueFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::PortQueueFields>,
   Parent>;
  using strings = ::facebook::fboss::ctrl_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::id, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::weight, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::reserved, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::scalingFactor, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::scheduling, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::streamType, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::aqms, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ActiveQueueManagement>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::packetsPerSec_DEPRECATED, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::sharedBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::portQueueRate, ChildThriftPath<::facebook::fboss::cfg::PortQueueRate, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::bandwidthBurstMinKbits, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::bandwidthBurstMaxKbits, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::trafficClass, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::pfcPriorities, ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::maxDynamicSharedBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ActiveQueueManagement>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::facebook::fboss::cfg::PortQueueRate, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::id, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::weight, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::reserved, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::scalingFactor, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::scheduling, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::streamType, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::aqms, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::packetsPerSec_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::sharedBytes, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::portQueueRate, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::bandwidthBurstMinKbits, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::bandwidthBurstMaxKbits, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::trafficClass, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::pfcPriorities, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::maxDynamicSharedBytes, std::integral_constant<apache::thrift::field_id_t, 17>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(id, 1);
    STRUCT_CHILD_GETTERS(weight, 2);
    STRUCT_CHILD_GETTERS(reserved, 3);
    STRUCT_CHILD_GETTERS(scalingFactor, 4);
    STRUCT_CHILD_GETTERS(scheduling, 5);
    STRUCT_CHILD_GETTERS(streamType, 6);
    STRUCT_CHILD_GETTERS(aqms, 7);
    STRUCT_CHILD_GETTERS(name, 8);
    STRUCT_CHILD_GETTERS(packetsPerSec_DEPRECATED, 10);
    STRUCT_CHILD_GETTERS(sharedBytes, 11);
    STRUCT_CHILD_GETTERS(portQueueRate, 12);
    STRUCT_CHILD_GETTERS(bandwidthBurstMinKbits, 13);
    STRUCT_CHILD_GETTERS(bandwidthBurstMaxKbits, 14);
    STRUCT_CHILD_GETTERS(trafficClass, 15);
    STRUCT_CHILD_GETTERS(pfcPriorities, 16);
    STRUCT_CHILD_GETTERS(maxDynamicSharedBytes, 17);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return id(); }
    else if constexpr (__id == 2) { return weight(); }
    else if constexpr (__id == 3) { return reserved(); }
    else if constexpr (__id == 4) { return scalingFactor(); }
    else if constexpr (__id == 5) { return scheduling(); }
    else if constexpr (__id == 6) { return streamType(); }
    else if constexpr (__id == 7) { return aqms(); }
    else if constexpr (__id == 8) { return name(); }
    else if constexpr (__id == 10) { return packetsPerSec_DEPRECATED(); }
    else if constexpr (__id == 11) { return sharedBytes(); }
    else if constexpr (__id == 12) { return portQueueRate(); }
    else if constexpr (__id == 13) { return bandwidthBurstMinKbits(); }
    else if constexpr (__id == 14) { return bandwidthBurstMaxKbits(); }
    else if constexpr (__id == 15) { return trafficClass(); }
    else if constexpr (__id == 16) { return pfcPriorities(); }
    else if constexpr (__id == 17) { return maxDynamicSharedBytes(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::MacEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::MacEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::MacEntryFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::MacEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::MacEntryFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::mac, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::portId, ChildThriftPath<::facebook::fboss::cfg::PortDescriptor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::classID, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
std::pair<strings::type, Child<::facebook::fboss::state::MacEntryType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::state::MacEntryType>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::PortDescriptor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::state::MacEntryType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::state::MacEntryType>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::mac, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::portId, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::classID, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::type, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(mac, 1);
    STRUCT_CHILD_GETTERS(portId, 2);
    STRUCT_CHILD_GETTERS(classID, 3);
    STRUCT_CHILD_GETTERS(type, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return mac(); }
    else if constexpr (__id == 2) { return portId(); }
    else if constexpr (__id == 3) { return classID(); }
    else if constexpr (__id == 4) { return type(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclTableFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::AclTableFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::AclTableFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::AclTableFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::AclTableFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::AclTableFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::PortFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::PortFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::PortFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::PortFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::PortFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::portId, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::portName, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::portDescription, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::portState, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::portOperState, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::ingressVlan, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::portSpeed, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::rxPause, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::txPause, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::vlanMemberShips, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::VlanInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::sFlowIngressRate, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::sFlowEgressRate, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::queues, ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::portLoopbackMode, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::ingressMirror, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::egressMirror, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::qosPolicy, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::sampleDest, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::portProfileID, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::lookupClassesToDistrubuteTrafficOn, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclLookupClass>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::maxFrameSize, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::pfc, ChildThriftPath<::facebook::fboss::cfg::PortPfc, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::pgConfigs, ChildThriftPath<::std::vector<::facebook::fboss::state::PortPgFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::profileConfig, ChildThriftPath<::facebook::fboss::phy::ProfileSideConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::pinConfigs, ChildThriftPath<::std::vector<::facebook::fboss::phy::PinConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::lineProfileConfig, ChildThriftPath<::facebook::fboss::phy::ProfileSideConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::linePinConfigs, ChildThriftPath<::std::vector<::facebook::fboss::phy::PinConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::portType, Child<::facebook::fboss::cfg::PortType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortType>>>,
std::pair<strings::iPhyLinkFaultStatus, ChildThriftPath<::facebook::fboss::phy::LinkFaultStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::asicPrbs, ChildThriftPath<::facebook::fboss::phy::PortPrbsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::gbSystemPrbs, ChildThriftPath<::facebook::fboss::phy::PortPrbsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::gbLinePrbs, ChildThriftPath<::facebook::fboss::phy::PortPrbsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::pfcPriorities, ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::expectedLLDPValues, ChildThriftPath<::std::map<::facebook::fboss::cfg::LLDPTag, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::rxSecureAssociationKeys, ChildThriftPath<::std::vector<::facebook::fboss::state::RxSak>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::txSecureAssociationKey, ChildThriftPath<::facebook::fboss::mka::MKASak, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::macsecDesired, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::dropUnencrypted, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::interfaceIDs, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::expectedNeighborReachability, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::drainState, Child<::facebook::fboss::cfg::PortDrainState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortDrainState>>>,
std::pair<strings::flowletConfigName, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::flowletConfig, ChildThriftPath<::facebook::fboss::state::PortFlowletFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::portLedExternalState, Child<::facebook::fboss::PortLedExternalState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::PortLedExternalState>>>,
std::pair<strings::rxLaneSquelch, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::zeroPreemphasis, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::portActiveState, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::disableTTLDecrement, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::txEnable, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::activeErrors, ChildThriftPath<::std::vector<::facebook::fboss::PortError>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::scope, Child<::facebook::fboss::cfg::Scope, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::Scope>>>,
std::pair<strings::reachabilityGroupId, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::VlanInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclLookupClass>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, ChildThriftPath<::facebook::fboss::cfg::PortPfc, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, ChildThriftPath<::std::vector<::facebook::fboss::state::PortPgFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, ChildThriftPath<::facebook::fboss::phy::ProfileSideConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, ChildThriftPath<::std::vector<::facebook::fboss::phy::PinConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, ChildThriftPath<::facebook::fboss::phy::ProfileSideConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 29>, ChildThriftPath<::std::vector<::facebook::fboss::phy::PinConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, Child<::facebook::fboss::cfg::PortType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 31>, ChildThriftPath<::facebook::fboss::phy::LinkFaultStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 32>, ChildThriftPath<::facebook::fboss::phy::PortPrbsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 33>, ChildThriftPath<::facebook::fboss::phy::PortPrbsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 34>, ChildThriftPath<::facebook::fboss::phy::PortPrbsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 35>, ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 36>, ChildThriftPath<::std::map<::facebook::fboss::cfg::LLDPTag, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 37>, ChildThriftPath<::std::vector<::facebook::fboss::state::RxSak>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 38>, ChildThriftPath<::facebook::fboss::mka::MKASak, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 39>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 40>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 41>, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 42>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 43>, Child<::facebook::fboss::cfg::PortDrainState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::PortDrainState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 44>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 45>, ChildThriftPath<::facebook::fboss::state::PortFlowletFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 46>, Child<::facebook::fboss::PortLedExternalState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::PortLedExternalState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 47>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 48>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 49>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 50>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 51>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 52>, ChildThriftPath<::std::vector<::facebook::fboss::PortError>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 53>, Child<::facebook::fboss::cfg::Scope, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::Scope>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 54>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::portId, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::portName, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::portDescription, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::portState, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::portOperState, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::ingressVlan, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::portSpeed, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::rxPause, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::txPause, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::vlanMemberShips, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::sFlowIngressRate, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::sFlowEgressRate, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::queues, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::portLoopbackMode, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::ingressMirror, std::integral_constant<apache::thrift::field_id_t, 17>>,
std::pair<strings::egressMirror, std::integral_constant<apache::thrift::field_id_t, 18>>,
std::pair<strings::qosPolicy, std::integral_constant<apache::thrift::field_id_t, 19>>,
std::pair<strings::sampleDest, std::integral_constant<apache::thrift::field_id_t, 20>>,
std::pair<strings::portProfileID, std::integral_constant<apache::thrift::field_id_t, 21>>,
std::pair<strings::lookupClassesToDistrubuteTrafficOn, std::integral_constant<apache::thrift::field_id_t, 22>>,
std::pair<strings::maxFrameSize, std::integral_constant<apache::thrift::field_id_t, 23>>,
std::pair<strings::pfc, std::integral_constant<apache::thrift::field_id_t, 24>>,
std::pair<strings::pgConfigs, std::integral_constant<apache::thrift::field_id_t, 25>>,
std::pair<strings::profileConfig, std::integral_constant<apache::thrift::field_id_t, 26>>,
std::pair<strings::pinConfigs, std::integral_constant<apache::thrift::field_id_t, 27>>,
std::pair<strings::lineProfileConfig, std::integral_constant<apache::thrift::field_id_t, 28>>,
std::pair<strings::linePinConfigs, std::integral_constant<apache::thrift::field_id_t, 29>>,
std::pair<strings::portType, std::integral_constant<apache::thrift::field_id_t, 30>>,
std::pair<strings::iPhyLinkFaultStatus, std::integral_constant<apache::thrift::field_id_t, 31>>,
std::pair<strings::asicPrbs, std::integral_constant<apache::thrift::field_id_t, 32>>,
std::pair<strings::gbSystemPrbs, std::integral_constant<apache::thrift::field_id_t, 33>>,
std::pair<strings::gbLinePrbs, std::integral_constant<apache::thrift::field_id_t, 34>>,
std::pair<strings::pfcPriorities, std::integral_constant<apache::thrift::field_id_t, 35>>,
std::pair<strings::expectedLLDPValues, std::integral_constant<apache::thrift::field_id_t, 36>>,
std::pair<strings::rxSecureAssociationKeys, std::integral_constant<apache::thrift::field_id_t, 37>>,
std::pair<strings::txSecureAssociationKey, std::integral_constant<apache::thrift::field_id_t, 38>>,
std::pair<strings::macsecDesired, std::integral_constant<apache::thrift::field_id_t, 39>>,
std::pair<strings::dropUnencrypted, std::integral_constant<apache::thrift::field_id_t, 40>>,
std::pair<strings::interfaceIDs, std::integral_constant<apache::thrift::field_id_t, 41>>,
std::pair<strings::expectedNeighborReachability, std::integral_constant<apache::thrift::field_id_t, 42>>,
std::pair<strings::drainState, std::integral_constant<apache::thrift::field_id_t, 43>>,
std::pair<strings::flowletConfigName, std::integral_constant<apache::thrift::field_id_t, 44>>,
std::pair<strings::flowletConfig, std::integral_constant<apache::thrift::field_id_t, 45>>,
std::pair<strings::portLedExternalState, std::integral_constant<apache::thrift::field_id_t, 46>>,
std::pair<strings::rxLaneSquelch, std::integral_constant<apache::thrift::field_id_t, 47>>,
std::pair<strings::zeroPreemphasis, std::integral_constant<apache::thrift::field_id_t, 48>>,
std::pair<strings::portActiveState, std::integral_constant<apache::thrift::field_id_t, 49>>,
std::pair<strings::disableTTLDecrement, std::integral_constant<apache::thrift::field_id_t, 50>>,
std::pair<strings::txEnable, std::integral_constant<apache::thrift::field_id_t, 51>>,
std::pair<strings::activeErrors, std::integral_constant<apache::thrift::field_id_t, 52>>,
std::pair<strings::scope, std::integral_constant<apache::thrift::field_id_t, 53>>,
std::pair<strings::reachabilityGroupId, std::integral_constant<apache::thrift::field_id_t, 54>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(portId, 1);
    STRUCT_CHILD_GETTERS(portName, 2);
    STRUCT_CHILD_GETTERS(portDescription, 3);
    STRUCT_CHILD_GETTERS(portState, 4);
    STRUCT_CHILD_GETTERS(portOperState, 5);
    STRUCT_CHILD_GETTERS(ingressVlan, 6);
    STRUCT_CHILD_GETTERS(portSpeed, 7);
    STRUCT_CHILD_GETTERS(rxPause, 10);
    STRUCT_CHILD_GETTERS(txPause, 11);
    STRUCT_CHILD_GETTERS(vlanMemberShips, 12);
    STRUCT_CHILD_GETTERS(sFlowIngressRate, 13);
    STRUCT_CHILD_GETTERS(sFlowEgressRate, 14);
    STRUCT_CHILD_GETTERS(queues, 15);
    STRUCT_CHILD_GETTERS(portLoopbackMode, 16);
    STRUCT_CHILD_GETTERS(ingressMirror, 17);
    STRUCT_CHILD_GETTERS(egressMirror, 18);
    STRUCT_CHILD_GETTERS(qosPolicy, 19);
    STRUCT_CHILD_GETTERS(sampleDest, 20);
    STRUCT_CHILD_GETTERS(portProfileID, 21);
    STRUCT_CHILD_GETTERS(lookupClassesToDistrubuteTrafficOn, 22);
    STRUCT_CHILD_GETTERS(maxFrameSize, 23);
    STRUCT_CHILD_GETTERS(pfc, 24);
    STRUCT_CHILD_GETTERS(pgConfigs, 25);
    STRUCT_CHILD_GETTERS(profileConfig, 26);
    STRUCT_CHILD_GETTERS(pinConfigs, 27);
    STRUCT_CHILD_GETTERS(lineProfileConfig, 28);
    STRUCT_CHILD_GETTERS(linePinConfigs, 29);
    STRUCT_CHILD_GETTERS(portType, 30);
    STRUCT_CHILD_GETTERS(iPhyLinkFaultStatus, 31);
    STRUCT_CHILD_GETTERS(asicPrbs, 32);
    STRUCT_CHILD_GETTERS(gbSystemPrbs, 33);
    STRUCT_CHILD_GETTERS(gbLinePrbs, 34);
    STRUCT_CHILD_GETTERS(pfcPriorities, 35);
    STRUCT_CHILD_GETTERS(expectedLLDPValues, 36);
    STRUCT_CHILD_GETTERS(rxSecureAssociationKeys, 37);
    STRUCT_CHILD_GETTERS(txSecureAssociationKey, 38);
    STRUCT_CHILD_GETTERS(macsecDesired, 39);
    STRUCT_CHILD_GETTERS(dropUnencrypted, 40);
    STRUCT_CHILD_GETTERS(interfaceIDs, 41);
    STRUCT_CHILD_GETTERS(expectedNeighborReachability, 42);
    STRUCT_CHILD_GETTERS(drainState, 43);
    STRUCT_CHILD_GETTERS(flowletConfigName, 44);
    STRUCT_CHILD_GETTERS(flowletConfig, 45);
    STRUCT_CHILD_GETTERS(portLedExternalState, 46);
    STRUCT_CHILD_GETTERS(rxLaneSquelch, 47);
    STRUCT_CHILD_GETTERS(zeroPreemphasis, 48);
    STRUCT_CHILD_GETTERS(portActiveState, 49);
    STRUCT_CHILD_GETTERS(disableTTLDecrement, 50);
    STRUCT_CHILD_GETTERS(txEnable, 51);
    STRUCT_CHILD_GETTERS(activeErrors, 52);
    STRUCT_CHILD_GETTERS(scope, 53);
    STRUCT_CHILD_GETTERS(reachabilityGroupId, 54);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return portId(); }
    else if constexpr (__id == 2) { return portName(); }
    else if constexpr (__id == 3) { return portDescription(); }
    else if constexpr (__id == 4) { return portState(); }
    else if constexpr (__id == 5) { return portOperState(); }
    else if constexpr (__id == 6) { return ingressVlan(); }
    else if constexpr (__id == 7) { return portSpeed(); }
    else if constexpr (__id == 10) { return rxPause(); }
    else if constexpr (__id == 11) { return txPause(); }
    else if constexpr (__id == 12) { return vlanMemberShips(); }
    else if constexpr (__id == 13) { return sFlowIngressRate(); }
    else if constexpr (__id == 14) { return sFlowEgressRate(); }
    else if constexpr (__id == 15) { return queues(); }
    else if constexpr (__id == 16) { return portLoopbackMode(); }
    else if constexpr (__id == 17) { return ingressMirror(); }
    else if constexpr (__id == 18) { return egressMirror(); }
    else if constexpr (__id == 19) { return qosPolicy(); }
    else if constexpr (__id == 20) { return sampleDest(); }
    else if constexpr (__id == 21) { return portProfileID(); }
    else if constexpr (__id == 22) { return lookupClassesToDistrubuteTrafficOn(); }
    else if constexpr (__id == 23) { return maxFrameSize(); }
    else if constexpr (__id == 24) { return pfc(); }
    else if constexpr (__id == 25) { return pgConfigs(); }
    else if constexpr (__id == 26) { return profileConfig(); }
    else if constexpr (__id == 27) { return pinConfigs(); }
    else if constexpr (__id == 28) { return lineProfileConfig(); }
    else if constexpr (__id == 29) { return linePinConfigs(); }
    else if constexpr (__id == 30) { return portType(); }
    else if constexpr (__id == 31) { return iPhyLinkFaultStatus(); }
    else if constexpr (__id == 32) { return asicPrbs(); }
    else if constexpr (__id == 33) { return gbSystemPrbs(); }
    else if constexpr (__id == 34) { return gbLinePrbs(); }
    else if constexpr (__id == 35) { return pfcPriorities(); }
    else if constexpr (__id == 36) { return expectedLLDPValues(); }
    else if constexpr (__id == 37) { return rxSecureAssociationKeys(); }
    else if constexpr (__id == 38) { return txSecureAssociationKey(); }
    else if constexpr (__id == 39) { return macsecDesired(); }
    else if constexpr (__id == 40) { return dropUnencrypted(); }
    else if constexpr (__id == 41) { return interfaceIDs(); }
    else if constexpr (__id == 42) { return expectedNeighborReachability(); }
    else if constexpr (__id == 43) { return drainState(); }
    else if constexpr (__id == 44) { return flowletConfigName(); }
    else if constexpr (__id == 45) { return flowletConfig(); }
    else if constexpr (__id == 46) { return portLedExternalState(); }
    else if constexpr (__id == 47) { return rxLaneSquelch(); }
    else if constexpr (__id == 48) { return zeroPreemphasis(); }
    else if constexpr (__id == 49) { return portActiveState(); }
    else if constexpr (__id == 50) { return disableTTLDecrement(); }
    else if constexpr (__id == 51) { return txEnable(); }
    else if constexpr (__id == 52) { return activeErrors(); }
    else if constexpr (__id == 53) { return scope(); }
    else if constexpr (__id == 54) { return reachabilityGroupId(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::PortFlowletConfigName, ::facebook::fboss::cfg::PortFlowletConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::PortFlowletConfigName, ::facebook::fboss::cfg::PortFlowletConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortFlowletConfig>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::PortFlowletConfigName, ::facebook::fboss::cfg::PortFlowletConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::cfg::PortFlowletConfig>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::PortFlowletConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::PortFlowletConfigName);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::mka::MKASak, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::mka::MKASak,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::mka::MKASak>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::mka::MKASak,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::mka::MKASak>,
   Parent>;
  using strings = ::facebook::fboss::mka::mka_structs_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::sci, ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::l2Port, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::assocNum, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::keyHex, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::keyIdHex, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::confidentOffset, Child<::facebook::fboss::mka::MKAConfidentialityOffset, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::mka::MKAConfidentialityOffset>>>,
std::pair<strings::primary, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::dropUnencrypted, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::facebook::fboss::mka::MKAConfidentialityOffset, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::mka::MKAConfidentialityOffset>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::sci, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::l2Port, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::assocNum, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::keyHex, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::keyIdHex, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::confidentOffset, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::primary, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::dropUnencrypted, std::integral_constant<apache::thrift::field_id_t, 8>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(sci, 1);
    STRUCT_CHILD_GETTERS(l2Port, 2);
    STRUCT_CHILD_GETTERS(assocNum, 3);
    STRUCT_CHILD_GETTERS(keyHex, 4);
    STRUCT_CHILD_GETTERS(keyIdHex, 5);
    STRUCT_CHILD_GETTERS(confidentOffset, 6);
    STRUCT_CHILD_GETTERS(primary, 7);
    STRUCT_CHILD_GETTERS(dropUnencrypted, 8);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return sci(); }
    else if constexpr (__id == 2) { return l2Port(); }
    else if constexpr (__id == 3) { return assocNum(); }
    else if constexpr (__id == 4) { return keyHex(); }
    else if constexpr (__id == 5) { return keyIdHex(); }
    else if constexpr (__id == 6) { return confidentOffset(); }
    else if constexpr (__id == 7) { return primary(); }
    else if constexpr (__id == 8) { return dropUnencrypted(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::NeighborEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::NeighborEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::NeighborEntryFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::NeighborEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::NeighborEntryFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::ipaddress, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::mac, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::portId, ChildThriftPath<::facebook::fboss::cfg::PortDescriptor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::interfaceId, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::state, Child<::facebook::fboss::state::NeighborState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::state::NeighborState>>>,
std::pair<strings::classID, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
std::pair<strings::encapIndex, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::isLocal, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::type, Child<::facebook::fboss::state::NeighborEntryType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::state::NeighborEntryType>>>,
std::pair<strings::resolvedSince, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::noHostRoute, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::disableTTLDecrement, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::cfg::PortDescriptor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::facebook::fboss::state::NeighborState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::state::NeighborState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::AclLookupClass>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::facebook::fboss::state::NeighborEntryType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::state::NeighborEntryType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::ipaddress, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::mac, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::portId, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::interfaceId, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::state, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::classID, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::encapIndex, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::isLocal, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::type, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::resolvedSince, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::noHostRoute, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::disableTTLDecrement, std::integral_constant<apache::thrift::field_id_t, 12>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(ipaddress, 1);
    STRUCT_CHILD_GETTERS(mac, 2);
    STRUCT_CHILD_GETTERS(portId, 3);
    STRUCT_CHILD_GETTERS(interfaceId, 4);
    STRUCT_CHILD_GETTERS(state, 5);
    STRUCT_CHILD_GETTERS(classID, 6);
    STRUCT_CHILD_GETTERS(encapIndex, 7);
    STRUCT_CHILD_GETTERS(isLocal, 8);
    STRUCT_CHILD_GETTERS(type, 9);
    STRUCT_CHILD_GETTERS(resolvedSince, 10);
    STRUCT_CHILD_GETTERS(noHostRoute, 11);
    STRUCT_CHILD_GETTERS(disableTTLDecrement, 12);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return ipaddress(); }
    else if constexpr (__id == 2) { return mac(); }
    else if constexpr (__id == 3) { return portId(); }
    else if constexpr (__id == 4) { return interfaceId(); }
    else if constexpr (__id == 5) { return state(); }
    else if constexpr (__id == 6) { return classID(); }
    else if constexpr (__id == 7) { return encapIndex(); }
    else if constexpr (__id == 8) { return isLocal(); }
    else if constexpr (__id == 9) { return type(); }
    else if constexpr (__id == 10) { return resolvedSince(); }
    else if constexpr (__id == 11) { return noHostRoute(); }
    else if constexpr (__id == 12) { return disableTTLDecrement(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::TrafficCounter>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::TrafficCounter>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::TrafficCounter>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::TrafficCounter>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::cfg::TrafficCounter>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::TrafficCounter, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::QosPolicyFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::QosPolicyFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::QosPolicyFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::AclEntryFields>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::AclEntryFields>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::ProfileSideConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::ProfileSideConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::ProfileSideConfig>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::ProfileSideConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::ProfileSideConfig>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::numLanes, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::modulation, Child<::facebook::fboss::phy::IpModulation, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::phy::IpModulation>>>,
std::pair<strings::fec, Child<::facebook::fboss::phy::FecMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::phy::FecMode>>>,
std::pair<strings::medium, Child<::facebook::fboss::TransmitterTechnology, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::TransmitterTechnology>>>,
std::pair<strings::interfaceMode, Child<::facebook::fboss::phy::InterfaceMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::phy::InterfaceMode>>>,
std::pair<strings::interfaceType, Child<::facebook::fboss::phy::InterfaceType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::phy::InterfaceType>>>,
std::pair<strings::interPacketGapBits, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::phy::IpModulation, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::phy::IpModulation>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::phy::FecMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::phy::FecMode>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::TransmitterTechnology, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::TransmitterTechnology>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::facebook::fboss::phy::InterfaceMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::phy::InterfaceMode>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::facebook::fboss::phy::InterfaceType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::phy::InterfaceType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::numLanes, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::modulation, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::fec, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::medium, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::interfaceMode, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::interfaceType, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::interPacketGapBits, std::integral_constant<apache::thrift::field_id_t, 7>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(numLanes, 1);
    STRUCT_CHILD_GETTERS(modulation, 2);
    STRUCT_CHILD_GETTERS(fec, 3);
    STRUCT_CHILD_GETTERS(medium, 4);
    STRUCT_CHILD_GETTERS(interfaceMode, 5);
    STRUCT_CHILD_GETTERS(interfaceType, 6);
    STRUCT_CHILD_GETTERS(interPacketGapBits, 7);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return numLanes(); }
    else if constexpr (__id == 2) { return modulation(); }
    else if constexpr (__id == 3) { return fec(); }
    else if constexpr (__id == 4) { return medium(); }
    else if constexpr (__id == 5) { return interfaceMode(); }
    else if constexpr (__id == 6) { return interfaceType(); }
    else if constexpr (__id == 7) { return interPacketGapBits(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::SwitchSettingsFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::SwitchSettingsFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::SwitchSettingsFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::SwitchSettingsFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::SwitchSettingsFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::l2LearningMode, Child<::facebook::fboss::cfg::L2LearningMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::L2LearningMode>>>,
std::pair<strings::qcmEnable, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::ptpTcEnable, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::l2AgeTimerSeconds, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::maxRouteCounterIDs, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::blockNeighbors, ChildThriftPath<::std::vector<::facebook::fboss::state::BlockedNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::macAddrsToBlock, ChildThriftPath<::std::vector<::facebook::fboss::state::BlockedMacAddress>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::switchType_DEPRECATED, Child<::facebook::fboss::cfg::SwitchType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SwitchType>>>,
std::pair<strings::switchId_DEPRECATED, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::exactMatchTableConfigs, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExactMatchTableConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::systemPortRange_DEPRECATED, ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::defaultVlan, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::arpTimeout, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::ndpTimeout, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::arpAgerInterval, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::maxNeighborProbes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::staleEntryInterval, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::dhcpV4RelaySrc, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dhcpV6RelaySrc, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dhcpV4ReplySrc, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::dhcpV6ReplySrc, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::qcmCfg, ChildThriftPath<::facebook::fboss::state::QcmCfgFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::defaultDataPlaneQosPolicy, ChildThriftPath<::facebook::fboss::state::QosPolicyFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::udfConfig, ChildThriftPath<::facebook::fboss::cfg::UdfConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::flowletSwitchingConfig, ChildThriftPath<::facebook::fboss::cfg::FlowletSwitchingConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::switchIdToSwitchType_DEPRECATED, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::switchDrainState, Child<::facebook::fboss::cfg::SwitchDrainState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SwitchDrainState>>>,
std::pair<strings::switchIdToSwitchInfo, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::minLinksToRemainInVOQDomain, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::minLinksToJoinVOQDomain, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::actualSwitchDrainState, Child<::facebook::fboss::cfg::SwitchDrainState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SwitchDrainState>>>,
std::pair<strings::defaultVoqConfig, ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::switchInfo, ChildThriftPath<::facebook::fboss::cfg::SwitchInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::vendorMacOuis, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::metaMacOuis, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::swSwitchRunState, Child<::facebook::fboss::SwitchRunState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::SwitchRunState>>>,
std::pair<strings::forceTrafficOverFabric, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::creditWatchdog, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::forceEcmpDynamicMemberUp, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::hostname, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::icmpV4UnavailableSrcAddress, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
std::pair<strings::reachabilityGroupListSize, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::cfg::L2LearningMode, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::L2LearningMode>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::vector<::facebook::fboss::state::BlockedNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::vector<::facebook::fboss::state::BlockedMacAddress>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::facebook::fboss::cfg::SwitchType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SwitchType>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExactMatchTableConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, ChildThriftPath<::facebook::fboss::state::QcmCfgFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, ChildThriftPath<::facebook::fboss::state::QosPolicyFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, ChildThriftPath<::facebook::fboss::cfg::UdfConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, ChildThriftPath<::facebook::fboss::cfg::FlowletSwitchingConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, Child<::facebook::fboss::cfg::SwitchDrainState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SwitchDrainState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 29>, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 31>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 32>, Child<::facebook::fboss::cfg::SwitchDrainState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::cfg::SwitchDrainState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 33>, ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 34>, ChildThriftPath<::facebook::fboss::cfg::SwitchInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 35>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 36>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 37>, Child<::facebook::fboss::SwitchRunState, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::SwitchRunState>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 38>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 39>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 40>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 41>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 42>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 43>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::l2LearningMode, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::qcmEnable, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::ptpTcEnable, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::l2AgeTimerSeconds, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::maxRouteCounterIDs, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::blockNeighbors, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::macAddrsToBlock, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::switchType_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::switchId_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::exactMatchTableConfigs, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::systemPortRange_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::defaultVlan, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::arpTimeout, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::ndpTimeout, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::arpAgerInterval, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::maxNeighborProbes, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::staleEntryInterval, std::integral_constant<apache::thrift::field_id_t, 17>>,
std::pair<strings::dhcpV4RelaySrc, std::integral_constant<apache::thrift::field_id_t, 18>>,
std::pair<strings::dhcpV6RelaySrc, std::integral_constant<apache::thrift::field_id_t, 19>>,
std::pair<strings::dhcpV4ReplySrc, std::integral_constant<apache::thrift::field_id_t, 20>>,
std::pair<strings::dhcpV6ReplySrc, std::integral_constant<apache::thrift::field_id_t, 21>>,
std::pair<strings::qcmCfg, std::integral_constant<apache::thrift::field_id_t, 23>>,
std::pair<strings::defaultDataPlaneQosPolicy, std::integral_constant<apache::thrift::field_id_t, 24>>,
std::pair<strings::udfConfig, std::integral_constant<apache::thrift::field_id_t, 25>>,
std::pair<strings::flowletSwitchingConfig, std::integral_constant<apache::thrift::field_id_t, 26>>,
std::pair<strings::switchIdToSwitchType_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 27>>,
std::pair<strings::switchDrainState, std::integral_constant<apache::thrift::field_id_t, 28>>,
std::pair<strings::switchIdToSwitchInfo, std::integral_constant<apache::thrift::field_id_t, 29>>,
std::pair<strings::minLinksToRemainInVOQDomain, std::integral_constant<apache::thrift::field_id_t, 30>>,
std::pair<strings::minLinksToJoinVOQDomain, std::integral_constant<apache::thrift::field_id_t, 31>>,
std::pair<strings::actualSwitchDrainState, std::integral_constant<apache::thrift::field_id_t, 32>>,
std::pair<strings::defaultVoqConfig, std::integral_constant<apache::thrift::field_id_t, 33>>,
std::pair<strings::switchInfo, std::integral_constant<apache::thrift::field_id_t, 34>>,
std::pair<strings::vendorMacOuis, std::integral_constant<apache::thrift::field_id_t, 35>>,
std::pair<strings::metaMacOuis, std::integral_constant<apache::thrift::field_id_t, 36>>,
std::pair<strings::swSwitchRunState, std::integral_constant<apache::thrift::field_id_t, 37>>,
std::pair<strings::forceTrafficOverFabric, std::integral_constant<apache::thrift::field_id_t, 38>>,
std::pair<strings::creditWatchdog, std::integral_constant<apache::thrift::field_id_t, 39>>,
std::pair<strings::forceEcmpDynamicMemberUp, std::integral_constant<apache::thrift::field_id_t, 40>>,
std::pair<strings::hostname, std::integral_constant<apache::thrift::field_id_t, 41>>,
std::pair<strings::icmpV4UnavailableSrcAddress, std::integral_constant<apache::thrift::field_id_t, 42>>,
std::pair<strings::reachabilityGroupListSize, std::integral_constant<apache::thrift::field_id_t, 43>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(l2LearningMode, 1);
    STRUCT_CHILD_GETTERS(qcmEnable, 2);
    STRUCT_CHILD_GETTERS(ptpTcEnable, 3);
    STRUCT_CHILD_GETTERS(l2AgeTimerSeconds, 4);
    STRUCT_CHILD_GETTERS(maxRouteCounterIDs, 5);
    STRUCT_CHILD_GETTERS(blockNeighbors, 6);
    STRUCT_CHILD_GETTERS(macAddrsToBlock, 7);
    STRUCT_CHILD_GETTERS(switchType_DEPRECATED, 8);
    STRUCT_CHILD_GETTERS(switchId_DEPRECATED, 9);
    STRUCT_CHILD_GETTERS(exactMatchTableConfigs, 10);
    STRUCT_CHILD_GETTERS(systemPortRange_DEPRECATED, 11);
    STRUCT_CHILD_GETTERS(defaultVlan, 12);
    STRUCT_CHILD_GETTERS(arpTimeout, 13);
    STRUCT_CHILD_GETTERS(ndpTimeout, 14);
    STRUCT_CHILD_GETTERS(arpAgerInterval, 15);
    STRUCT_CHILD_GETTERS(maxNeighborProbes, 16);
    STRUCT_CHILD_GETTERS(staleEntryInterval, 17);
    STRUCT_CHILD_GETTERS(dhcpV4RelaySrc, 18);
    STRUCT_CHILD_GETTERS(dhcpV6RelaySrc, 19);
    STRUCT_CHILD_GETTERS(dhcpV4ReplySrc, 20);
    STRUCT_CHILD_GETTERS(dhcpV6ReplySrc, 21);
    STRUCT_CHILD_GETTERS(qcmCfg, 23);
    STRUCT_CHILD_GETTERS(defaultDataPlaneQosPolicy, 24);
    STRUCT_CHILD_GETTERS(udfConfig, 25);
    STRUCT_CHILD_GETTERS(flowletSwitchingConfig, 26);
    STRUCT_CHILD_GETTERS(switchIdToSwitchType_DEPRECATED, 27);
    STRUCT_CHILD_GETTERS(switchDrainState, 28);
    STRUCT_CHILD_GETTERS(switchIdToSwitchInfo, 29);
    STRUCT_CHILD_GETTERS(minLinksToRemainInVOQDomain, 30);
    STRUCT_CHILD_GETTERS(minLinksToJoinVOQDomain, 31);
    STRUCT_CHILD_GETTERS(actualSwitchDrainState, 32);
    STRUCT_CHILD_GETTERS(defaultVoqConfig, 33);
    STRUCT_CHILD_GETTERS(switchInfo, 34);
    STRUCT_CHILD_GETTERS(vendorMacOuis, 35);
    STRUCT_CHILD_GETTERS(metaMacOuis, 36);
    STRUCT_CHILD_GETTERS(swSwitchRunState, 37);
    STRUCT_CHILD_GETTERS(forceTrafficOverFabric, 38);
    STRUCT_CHILD_GETTERS(creditWatchdog, 39);
    STRUCT_CHILD_GETTERS(forceEcmpDynamicMemberUp, 40);
    STRUCT_CHILD_GETTERS(hostname, 41);
    STRUCT_CHILD_GETTERS(icmpV4UnavailableSrcAddress, 42);
    STRUCT_CHILD_GETTERS(reachabilityGroupListSize, 43);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return l2LearningMode(); }
    else if constexpr (__id == 2) { return qcmEnable(); }
    else if constexpr (__id == 3) { return ptpTcEnable(); }
    else if constexpr (__id == 4) { return l2AgeTimerSeconds(); }
    else if constexpr (__id == 5) { return maxRouteCounterIDs(); }
    else if constexpr (__id == 6) { return blockNeighbors(); }
    else if constexpr (__id == 7) { return macAddrsToBlock(); }
    else if constexpr (__id == 8) { return switchType_DEPRECATED(); }
    else if constexpr (__id == 9) { return switchId_DEPRECATED(); }
    else if constexpr (__id == 10) { return exactMatchTableConfigs(); }
    else if constexpr (__id == 11) { return systemPortRange_DEPRECATED(); }
    else if constexpr (__id == 12) { return defaultVlan(); }
    else if constexpr (__id == 13) { return arpTimeout(); }
    else if constexpr (__id == 14) { return ndpTimeout(); }
    else if constexpr (__id == 15) { return arpAgerInterval(); }
    else if constexpr (__id == 16) { return maxNeighborProbes(); }
    else if constexpr (__id == 17) { return staleEntryInterval(); }
    else if constexpr (__id == 18) { return dhcpV4RelaySrc(); }
    else if constexpr (__id == 19) { return dhcpV6RelaySrc(); }
    else if constexpr (__id == 20) { return dhcpV4ReplySrc(); }
    else if constexpr (__id == 21) { return dhcpV6ReplySrc(); }
    else if constexpr (__id == 23) { return qcmCfg(); }
    else if constexpr (__id == 24) { return defaultDataPlaneQosPolicy(); }
    else if constexpr (__id == 25) { return udfConfig(); }
    else if constexpr (__id == 26) { return flowletSwitchingConfig(); }
    else if constexpr (__id == 27) { return switchIdToSwitchType_DEPRECATED(); }
    else if constexpr (__id == 28) { return switchDrainState(); }
    else if constexpr (__id == 29) { return switchIdToSwitchInfo(); }
    else if constexpr (__id == 30) { return minLinksToRemainInVOQDomain(); }
    else if constexpr (__id == 31) { return minLinksToJoinVOQDomain(); }
    else if constexpr (__id == 32) { return actualSwitchDrainState(); }
    else if constexpr (__id == 33) { return defaultVoqConfig(); }
    else if constexpr (__id == 34) { return switchInfo(); }
    else if constexpr (__id == 35) { return vendorMacOuis(); }
    else if constexpr (__id == 36) { return metaMacOuis(); }
    else if constexpr (__id == 37) { return swSwitchRunState(); }
    else if constexpr (__id == 38) { return forceTrafficOverFabric(); }
    else if constexpr (__id == 39) { return creditWatchdog(); }
    else if constexpr (__id == 40) { return forceEcmpDynamicMemberUp(); }
    else if constexpr (__id == 41) { return hostname(); }
    else if constexpr (__id == 42) { return icmpV4UnavailableSrcAddress(); }
    else if constexpr (__id == 43) { return reachabilityGroupListSize(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::BufferPoolFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::BufferPoolFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::BufferPoolFields>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::BufferPoolFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::BufferPoolFields>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::id, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::headroomBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::sharedBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::id, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::headroomBytes, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::sharedBytes, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(id, 1);
    STRUCT_CHILD_GETTERS(headroomBytes, 2);
    STRUCT_CHILD_GETTERS(sharedBytes, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return id(); }
    else if constexpr (__id == 2) { return headroomBytes(); }
    else if constexpr (__id == 3) { return sharedBytes(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::TrafficClassToQosAttributeEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::TrafficClassToQosAttributeEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::TrafficClassToQosAttributeEntry>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::TrafficClassToQosAttributeEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::state::TrafficClassToQosAttributeEntry>,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::trafficClass, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::attr, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::trafficClass, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::attr, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(trafficClass, 1);
    STRUCT_CHILD_GETTERS(attr, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return trafficClass(); }
    else if constexpr (__id == 2) { return attr(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::MacEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::MacEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::MacEntryFields>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::MacEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::state::MacEntryFields>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::MacEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::std::set<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::std::set<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::set<::apache::thrift::type::i32_t>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::std::set<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::set<::apache::thrift::type::i32_t>>,
   Parent>;
  using Child = ChildThriftPath<::std::set<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};



template<>
class RootThriftPath<::facebook::fboss::fsdb::FsdbOperStateRoot> :
  public ChildThriftPath<
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   folly::Unit> {
  public:
  using Self = ChildThriftPath<
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   folly::Unit>;

  RootThriftPath(): Self({}, {}, {}, false) {}

};

template<typename Parent>
class ChildThriftPath<::facebook::fboss::fsdb::FsdbOperStatsRoot, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::fsdb::FsdbOperStatsRoot>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::fsdb::FsdbOperStatsRoot>,
   Parent>;
  using strings = ::facebook::fboss::fsdb::fsdb_model_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::agent, ChildThriftPath<::facebook::fboss::AgentStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::qsfp_service, ChildThriftPath<::facebook::fboss::stats::QsfpStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::sensor_service, ChildThriftPath<::facebook::fboss::stats::SensorServiceStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::AgentStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::stats::QsfpStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::stats::SensorServiceStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::agent, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::qsfp_service, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::sensor_service, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(agent, 1);
    STRUCT_CHILD_GETTERS(qsfp_service, 3);
    STRUCT_CHILD_GETTERS(sensor_service, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return agent(); }
    else if constexpr (__id == 3) { return qsfp_service(); }
    else if constexpr (__id == 4) { return sensor_service(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::platform::sensor_config::Thresholds, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::platform::sensor_config::Thresholds,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::platform::sensor_config::Thresholds>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::platform::sensor_config::Thresholds,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::platform::sensor_config::Thresholds>,
   Parent>;
  using strings = ::facebook::fboss::platform::sensor_config::sensor_config_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::maxAlarmVal, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::minAlarmVal, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::upperCriticalVal, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::lowerCriticalVal, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::maxAlarmVal, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::minAlarmVal, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::upperCriticalVal, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::lowerCriticalVal, std::integral_constant<apache::thrift::field_id_t, 6>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(maxAlarmVal, 3);
    STRUCT_CHILD_GETTERS(minAlarmVal, 4);
    STRUCT_CHILD_GETTERS(upperCriticalVal, 5);
    STRUCT_CHILD_GETTERS(lowerCriticalVal, 6);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 3) { return maxAlarmVal(); }
    else if constexpr (__id == 4) { return minAlarmVal(); }
    else if constexpr (__id == 5) { return upperCriticalVal(); }
    else if constexpr (__id == 6) { return lowerCriticalVal(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::Channel>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::Channel>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::Channel>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::Channel>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::Channel>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::Channel, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::VdmPerfMonitorPortSideStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::VdmPerfMonitorPortSideStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::VdmPerfMonitorPortSideStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::VdmPerfMonitorPortSideStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::VdmPerfMonitorPortSideStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::VdmPerfMonitorPortSideStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::CdbDatapathSymErrHistogram>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::CdbDatapathSymErrHistogram>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::CdbDatapathSymErrHistogram>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::CdbDatapathSymErrHistogram>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::CdbDatapathSymErrHistogram>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::CdbDatapathSymErrHistogram, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::FlagLevels, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::FlagLevels,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::FlagLevels>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::FlagLevels,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::FlagLevels>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::alarm, ChildThriftPath<::facebook::fboss::Flags, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::warn, ChildThriftPath<::facebook::fboss::Flags, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::Flags, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::Flags, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::alarm, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::warn, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(alarm, 1);
    STRUCT_CHILD_GETTERS(warn, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return alarm(); }
    else if constexpr (__id == 2) { return warn(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::platform::sensor_service::SensorData, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::platform::sensor_service::SensorData,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::platform::sensor_service::SensorData>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::platform::sensor_service::SensorData,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::platform::sensor_service::SensorData>,
   Parent>;
  using strings = ::facebook::fboss::platform::sensor_service::sensor_service_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::value, Child<float, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::float_t>>,
std::pair<strings::timeStamp, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::thresholds, ChildThriftPath<::facebook::fboss::platform::sensor_config::Thresholds, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::sensorType, Child<::facebook::fboss::platform::sensor_config::SensorType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::platform::sensor_config::SensorType>>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<float, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::float_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::platform::sensor_config::Thresholds, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::facebook::fboss::platform::sensor_config::SensorType, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::platform::sensor_config::SensorType>>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::name, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::value, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::timeStamp, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::thresholds, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::sensorType, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(name, 1);
    STRUCT_CHILD_GETTERS(value, 2);
    STRUCT_CHILD_GETTERS(timeStamp, 3);
    STRUCT_CHILD_GETTERS(thresholds, 4);
    STRUCT_CHILD_GETTERS(sensorType, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return name(); }
    else if constexpr (__id == 2) { return value(); }
    else if constexpr (__id == 3) { return timeStamp(); }
    else if constexpr (__id == 4) { return thresholds(); }
    else if constexpr (__id == 5) { return sensorType(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::Sensor,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::Sensor>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::Sensor,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::Sensor>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::value, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::flags, ChildThriftPath<::facebook::fboss::FlagLevels, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::FlagLevels, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::value, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::flags, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(value, 1);
    STRUCT_CHILD_GETTERS(flags, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return value(); }
    else if constexpr (__id == 2) { return flags(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::VdmPerfMonitorPortSideStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::VdmPerfMonitorPortSideStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::VdmPerfMonitorPortSideStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::VdmPerfMonitorPortSideStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::VdmPerfMonitorPortSideStats>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::datapathBER, ChildThriftPath<::facebook::fboss::link::LinkPerfMonitorParamEachSideVal, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::datapathErroredFrames, ChildThriftPath<::facebook::fboss::link::LinkPerfMonitorParamEachSideVal, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::laneSNR, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::lanePam4Level0SD, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::lanePam4Level1SD, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::lanePam4Level2SD, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::lanePam4Level3SD, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::lanePam4MPI, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::lanePam4LTP, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::fecTailMax, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::fecTailCurr, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::link::LinkPerfMonitorParamEachSideVal, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::link::LinkPerfMonitorParamEachSideVal, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::datapathBER, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::datapathErroredFrames, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::laneSNR, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::lanePam4Level0SD, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::lanePam4Level1SD, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::lanePam4Level2SD, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::lanePam4Level3SD, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::lanePam4MPI, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::lanePam4LTP, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::fecTailMax, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::fecTailCurr, std::integral_constant<apache::thrift::field_id_t, 11>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(datapathBER, 1);
    STRUCT_CHILD_GETTERS(datapathErroredFrames, 2);
    STRUCT_CHILD_GETTERS(laneSNR, 3);
    STRUCT_CHILD_GETTERS(lanePam4Level0SD, 4);
    STRUCT_CHILD_GETTERS(lanePam4Level1SD, 5);
    STRUCT_CHILD_GETTERS(lanePam4Level2SD, 6);
    STRUCT_CHILD_GETTERS(lanePam4Level3SD, 7);
    STRUCT_CHILD_GETTERS(lanePam4MPI, 8);
    STRUCT_CHILD_GETTERS(lanePam4LTP, 9);
    STRUCT_CHILD_GETTERS(fecTailMax, 10);
    STRUCT_CHILD_GETTERS(fecTailCurr, 11);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return datapathBER(); }
    else if constexpr (__id == 2) { return datapathErroredFrames(); }
    else if constexpr (__id == 3) { return laneSNR(); }
    else if constexpr (__id == 4) { return lanePam4Level0SD(); }
    else if constexpr (__id == 5) { return lanePam4Level1SD(); }
    else if constexpr (__id == 6) { return lanePam4Level2SD(); }
    else if constexpr (__id == 7) { return lanePam4Level3SD(); }
    else if constexpr (__id == 8) { return lanePam4MPI(); }
    else if constexpr (__id == 9) { return lanePam4LTP(); }
    else if constexpr (__id == 10) { return fecTailMax(); }
    else if constexpr (__id == 11) { return fecTailCurr(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, double>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::double_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, double>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::double_t>,
   Parent>;
  using Child = Path<double, ::facebook::fboss::fsdb::FsdbOperStatsRoot, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::VdmPerfMonitorStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::VdmPerfMonitorStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::VdmPerfMonitorStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::VdmPerfMonitorStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::VdmPerfMonitorStats>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::mediaPortVdmStats, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::VdmPerfMonitorPortSideStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::hostPortVdmStats, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::VdmPerfMonitorPortSideStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::statsCollectionTme, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::VdmPerfMonitorPortSideStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::VdmPerfMonitorPortSideStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::mediaPortVdmStats, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::hostPortVdmStats, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::statsCollectionTme, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(mediaPortVdmStats, 1);
    STRUCT_CHILD_GETTERS(hostPortVdmStats, 2);
    STRUCT_CHILD_GETTERS(statsCollectionTme, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return mediaPortVdmStats(); }
    else if constexpr (__id == 2) { return hostPortVdmStats(); }
    else if constexpr (__id == 3) { return statsCollectionTme(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::VdmDiagsStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::VdmDiagsStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::VdmDiagsStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::VdmDiagsStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::VdmDiagsStats>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::preFecBerMediaMin, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::preFecBerMediaMax, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::preFecBerMediaAvg, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::preFecBerMediaCur, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::eSnrMediaChannel, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::preFecBerHostMin, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::preFecBerHostMax, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::preFecBerHostAvg, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::preFecBerHostCur, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::statsCollectionTme, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::errFrameMediaMin, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::errFrameMediaMax, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::errFrameMediaAvg, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::errFrameMediaCur, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::errFrameHostMin, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::errFrameHostMax, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::errFrameHostAvg, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::errFrameHostCur, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::pam4Level0SDLine, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::pam4Level1SDLine, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::pam4Level2SDLine, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::pam4Level3SDLine, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::pam4MPILine, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::pam4LtpMediaChannel, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::fecTailMediaMax, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::fecTailMediaCurr, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::fecTailHostMax, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::fecTailHostCurr, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::preFecBerMediaMin, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::preFecBerMediaMax, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::preFecBerMediaAvg, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::preFecBerMediaCur, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::eSnrMediaChannel, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::preFecBerHostMin, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::preFecBerHostMax, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::preFecBerHostAvg, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::preFecBerHostCur, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::statsCollectionTme, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::errFrameMediaMin, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::errFrameMediaMax, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::errFrameMediaAvg, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::errFrameMediaCur, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::errFrameHostMin, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::errFrameHostMax, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::errFrameHostAvg, std::integral_constant<apache::thrift::field_id_t, 17>>,
std::pair<strings::errFrameHostCur, std::integral_constant<apache::thrift::field_id_t, 18>>,
std::pair<strings::pam4Level0SDLine, std::integral_constant<apache::thrift::field_id_t, 19>>,
std::pair<strings::pam4Level1SDLine, std::integral_constant<apache::thrift::field_id_t, 20>>,
std::pair<strings::pam4Level2SDLine, std::integral_constant<apache::thrift::field_id_t, 21>>,
std::pair<strings::pam4Level3SDLine, std::integral_constant<apache::thrift::field_id_t, 22>>,
std::pair<strings::pam4MPILine, std::integral_constant<apache::thrift::field_id_t, 23>>,
std::pair<strings::pam4LtpMediaChannel, std::integral_constant<apache::thrift::field_id_t, 24>>,
std::pair<strings::fecTailMediaMax, std::integral_constant<apache::thrift::field_id_t, 25>>,
std::pair<strings::fecTailMediaCurr, std::integral_constant<apache::thrift::field_id_t, 26>>,
std::pair<strings::fecTailHostMax, std::integral_constant<apache::thrift::field_id_t, 27>>,
std::pair<strings::fecTailHostCurr, std::integral_constant<apache::thrift::field_id_t, 28>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(preFecBerMediaMin, 1);
    STRUCT_CHILD_GETTERS(preFecBerMediaMax, 2);
    STRUCT_CHILD_GETTERS(preFecBerMediaAvg, 3);
    STRUCT_CHILD_GETTERS(preFecBerMediaCur, 4);
    STRUCT_CHILD_GETTERS(eSnrMediaChannel, 5);
    STRUCT_CHILD_GETTERS(preFecBerHostMin, 6);
    STRUCT_CHILD_GETTERS(preFecBerHostMax, 7);
    STRUCT_CHILD_GETTERS(preFecBerHostAvg, 8);
    STRUCT_CHILD_GETTERS(preFecBerHostCur, 9);
    STRUCT_CHILD_GETTERS(statsCollectionTme, 10);
    STRUCT_CHILD_GETTERS(errFrameMediaMin, 11);
    STRUCT_CHILD_GETTERS(errFrameMediaMax, 12);
    STRUCT_CHILD_GETTERS(errFrameMediaAvg, 13);
    STRUCT_CHILD_GETTERS(errFrameMediaCur, 14);
    STRUCT_CHILD_GETTERS(errFrameHostMin, 15);
    STRUCT_CHILD_GETTERS(errFrameHostMax, 16);
    STRUCT_CHILD_GETTERS(errFrameHostAvg, 17);
    STRUCT_CHILD_GETTERS(errFrameHostCur, 18);
    STRUCT_CHILD_GETTERS(pam4Level0SDLine, 19);
    STRUCT_CHILD_GETTERS(pam4Level1SDLine, 20);
    STRUCT_CHILD_GETTERS(pam4Level2SDLine, 21);
    STRUCT_CHILD_GETTERS(pam4Level3SDLine, 22);
    STRUCT_CHILD_GETTERS(pam4MPILine, 23);
    STRUCT_CHILD_GETTERS(pam4LtpMediaChannel, 24);
    STRUCT_CHILD_GETTERS(fecTailMediaMax, 25);
    STRUCT_CHILD_GETTERS(fecTailMediaCurr, 26);
    STRUCT_CHILD_GETTERS(fecTailHostMax, 27);
    STRUCT_CHILD_GETTERS(fecTailHostCurr, 28);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return preFecBerMediaMin(); }
    else if constexpr (__id == 2) { return preFecBerMediaMax(); }
    else if constexpr (__id == 3) { return preFecBerMediaAvg(); }
    else if constexpr (__id == 4) { return preFecBerMediaCur(); }
    else if constexpr (__id == 5) { return eSnrMediaChannel(); }
    else if constexpr (__id == 6) { return preFecBerHostMin(); }
    else if constexpr (__id == 7) { return preFecBerHostMax(); }
    else if constexpr (__id == 8) { return preFecBerHostAvg(); }
    else if constexpr (__id == 9) { return preFecBerHostCur(); }
    else if constexpr (__id == 10) { return statsCollectionTme(); }
    else if constexpr (__id == 11) { return errFrameMediaMin(); }
    else if constexpr (__id == 12) { return errFrameMediaMax(); }
    else if constexpr (__id == 13) { return errFrameMediaAvg(); }
    else if constexpr (__id == 14) { return errFrameMediaCur(); }
    else if constexpr (__id == 15) { return errFrameHostMin(); }
    else if constexpr (__id == 16) { return errFrameHostMax(); }
    else if constexpr (__id == 17) { return errFrameHostAvg(); }
    else if constexpr (__id == 18) { return errFrameHostCur(); }
    else if constexpr (__id == 19) { return pam4Level0SDLine(); }
    else if constexpr (__id == 20) { return pam4Level1SDLine(); }
    else if constexpr (__id == 21) { return pam4Level2SDLine(); }
    else if constexpr (__id == 22) { return pam4Level3SDLine(); }
    else if constexpr (__id == 23) { return pam4MPILine(); }
    else if constexpr (__id == 24) { return pam4LtpMediaChannel(); }
    else if constexpr (__id == 25) { return fecTailMediaMax(); }
    else if constexpr (__id == 26) { return fecTailMediaCurr(); }
    else if constexpr (__id == 27) { return fecTailHostMax(); }
    else if constexpr (__id == 28) { return fecTailHostCurr(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::Flags, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::Flags,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::Flags>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::Flags,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::Flags>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::high, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::low, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::high, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::low, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(high, 1);
    STRUCT_CHILD_GETTERS(low, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return high(); }
    else if constexpr (__id == 2) { return low(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::HwPortStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwPortStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::HwPortStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwPortStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HwPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::TransceiverStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::TransceiverStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::TransceiverStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::TransceiverStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::TransceiverStats>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::readDownTime, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::writeDownTime, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::numReadAttempted, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::numReadFailed, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::numWriteAttempted, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::numWriteFailed, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::readDownTime, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::writeDownTime, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::numReadAttempted, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::numReadFailed, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::numWriteAttempted, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::numWriteFailed, std::integral_constant<apache::thrift::field_id_t, 6>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(readDownTime, 1);
    STRUCT_CHILD_GETTERS(writeDownTime, 2);
    STRUCT_CHILD_GETTERS(numReadAttempted, 3);
    STRUCT_CHILD_GETTERS(numReadFailed, 4);
    STRUCT_CHILD_GETTERS(numWriteAttempted, 5);
    STRUCT_CHILD_GETTERS(numWriteFailed, 6);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return readDownTime(); }
    else if constexpr (__id == 2) { return writeDownTime(); }
    else if constexpr (__id == 3) { return numReadAttempted(); }
    else if constexpr (__id == 4) { return numReadFailed(); }
    else if constexpr (__id == 5) { return numWriteAttempted(); }
    else if constexpr (__id == 6) { return numWriteFailed(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::CdbDatapathSymErrHistogram, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::CdbDatapathSymErrHistogram,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::CdbDatapathSymErrHistogram>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::CdbDatapathSymErrHistogram,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::CdbDatapathSymErrHistogram>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::media, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::SymErrHistogramBin>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::host, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::SymErrHistogramBin>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::SymErrHistogramBin>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::SymErrHistogramBin>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::media, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::host, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(media, 1);
    STRUCT_CHILD_GETTERS(host, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return media(); }
    else if constexpr (__id == 2) { return host(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::VdmPerfMonitorStatsForOds, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::VdmPerfMonitorStatsForOds,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::VdmPerfMonitorStatsForOds>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::VdmPerfMonitorStatsForOds,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::VdmPerfMonitorStatsForOds>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::mediaPortVdmStats, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::VdmPerfMonitorPortSideStatsForOds>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::hostPortVdmStats, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::VdmPerfMonitorPortSideStatsForOds>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::statsCollectionTme, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::VdmPerfMonitorPortSideStatsForOds>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::VdmPerfMonitorPortSideStatsForOds>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::mediaPortVdmStats, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::hostPortVdmStats, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::statsCollectionTme, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(mediaPortVdmStats, 1);
    STRUCT_CHILD_GETTERS(hostPortVdmStats, 2);
    STRUCT_CHILD_GETTERS(statsCollectionTme, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return mediaPortVdmStats(); }
    else if constexpr (__id == 2) { return hostPortVdmStats(); }
    else if constexpr (__id == 3) { return statsCollectionTme(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::link::LinkPerfMonitorParamEachSideVal, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::link::LinkPerfMonitorParamEachSideVal,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::link::LinkPerfMonitorParamEachSideVal>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::link::LinkPerfMonitorParamEachSideVal,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::link::LinkPerfMonitorParamEachSideVal>,
   Parent>;
  using strings = ::facebook::fboss::link::link_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::min, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::max, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::avg, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::cur, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::min, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::max, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::avg, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::cur, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(min, 1);
    STRUCT_CHILD_GETTERS(max, 2);
    STRUCT_CHILD_GETTERS(avg, 3);
    STRUCT_CHILD_GETTERS(cur, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return min(); }
    else if constexpr (__id == 2) { return max(); }
    else if constexpr (__id == 3) { return avg(); }
    else if constexpr (__id == 4) { return cur(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::TcvrStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::TcvrStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::TcvrStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::TcvrStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::TcvrStats>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::sensor, ChildThriftPath<::facebook::fboss::GlobalSensors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::channels, ChildThriftPath<::std::vector<::facebook::fboss::Channel>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::stats, ChildThriftPath<::facebook::fboss::TransceiverStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::remediationCounter, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::vdmDiagsStats, ChildThriftPath<::facebook::fboss::VdmDiagsStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::vdmDiagsStatsForOds, ChildThriftPath<::facebook::fboss::VdmDiagsStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::portNameToHostLanes, ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::portNameToMediaLanes, ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::timeCollected, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::lastFwUpgradeStartTime, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::lastFwUpgradeEndTime, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::vdmPerfMonitorStats, ChildThriftPath<::facebook::fboss::VdmPerfMonitorStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::vdmPerfMonitorStatsForOds, ChildThriftPath<::facebook::fboss::VdmPerfMonitorStatsForOds, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::cdbDatapathSymErrHistogram, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::CdbDatapathSymErrHistogram>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::GlobalSensors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::Channel>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::TransceiverStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::VdmDiagsStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::facebook::fboss::VdmDiagsStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::facebook::fboss::VdmPerfMonitorStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, ChildThriftPath<::facebook::fboss::VdmPerfMonitorStatsForOds, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::CdbDatapathSymErrHistogram>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::sensor, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::channels, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::stats, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::remediationCounter, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::vdmDiagsStats, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::vdmDiagsStatsForOds, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::portNameToHostLanes, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::portNameToMediaLanes, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::timeCollected, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::lastFwUpgradeStartTime, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::lastFwUpgradeEndTime, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::vdmPerfMonitorStats, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::vdmPerfMonitorStatsForOds, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::cdbDatapathSymErrHistogram, std::integral_constant<apache::thrift::field_id_t, 14>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(sensor, 1);
    STRUCT_CHILD_GETTERS(channels, 2);
    STRUCT_CHILD_GETTERS(stats, 3);
    STRUCT_CHILD_GETTERS(remediationCounter, 4);
    STRUCT_CHILD_GETTERS(vdmDiagsStats, 5);
    STRUCT_CHILD_GETTERS(vdmDiagsStatsForOds, 6);
    STRUCT_CHILD_GETTERS(portNameToHostLanes, 7);
    STRUCT_CHILD_GETTERS(portNameToMediaLanes, 8);
    STRUCT_CHILD_GETTERS(timeCollected, 9);
    STRUCT_CHILD_GETTERS(lastFwUpgradeStartTime, 10);
    STRUCT_CHILD_GETTERS(lastFwUpgradeEndTime, 11);
    STRUCT_CHILD_GETTERS(vdmPerfMonitorStats, 12);
    STRUCT_CHILD_GETTERS(vdmPerfMonitorStatsForOds, 13);
    STRUCT_CHILD_GETTERS(cdbDatapathSymErrHistogram, 14);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return sensor(); }
    else if constexpr (__id == 2) { return channels(); }
    else if constexpr (__id == 3) { return stats(); }
    else if constexpr (__id == 4) { return remediationCounter(); }
    else if constexpr (__id == 5) { return vdmDiagsStats(); }
    else if constexpr (__id == 6) { return vdmDiagsStatsForOds(); }
    else if constexpr (__id == 7) { return portNameToHostLanes(); }
    else if constexpr (__id == 8) { return portNameToMediaLanes(); }
    else if constexpr (__id == 9) { return timeCollected(); }
    else if constexpr (__id == 10) { return lastFwUpgradeStartTime(); }
    else if constexpr (__id == 11) { return lastFwUpgradeEndTime(); }
    else if constexpr (__id == 12) { return vdmPerfMonitorStats(); }
    else if constexpr (__id == 13) { return vdmPerfMonitorStatsForOds(); }
    else if constexpr (__id == 14) { return cdbDatapathSymErrHistogram(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::MacsecSciFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::MacsecSciFlowStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::MacsecSciFlowStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::MacsecSciFlowStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::MacsecSciFlowStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::MacsecSciFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::mka::MKASecureAssociationId, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::mka::MKASecureAssociationId,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::mka::MKASecureAssociationId>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::mka::MKASecureAssociationId,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::mka::MKASecureAssociationId>,
   Parent>;
  using strings = ::facebook::fboss::mka::mka_structs_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::sci, ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::assocNum, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::sci, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::assocNum, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(sci, 1);
    STRUCT_CHILD_GETTERS(assocNum, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return sci(); }
    else if constexpr (__id == 2) { return assocNum(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::LaneStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::LaneStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::LaneStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::LaneStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::LaneStats>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::lane, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
std::pair<strings::eyes, ChildThriftPath<::std::vector<::facebook::fboss::phy::EyeInfo>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::snr, Child<float, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::float_t>>,
std::pair<strings::signalDetectChangedCount, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::cdrLockChangedCount, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::phy::EyeInfo>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<float, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::float_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::lane, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::eyes, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::snr, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::signalDetectChangedCount, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::cdrLockChangedCount, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(lane, 1);
    STRUCT_CHILD_GETTERS(eyes, 2);
    STRUCT_CHILD_GETTERS(snr, 3);
    STRUCT_CHILD_GETTERS(signalDetectChangedCount, 4);
    STRUCT_CHILD_GETTERS(cdrLockChangedCount, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return lane(); }
    else if constexpr (__id == 2) { return eyes(); }
    else if constexpr (__id == 3) { return snr(); }
    else if constexpr (__id == 4) { return signalDetectChangedCount(); }
    else if constexpr (__id == 5) { return cdrLockChangedCount(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::mka::MacsecSaStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::mka::MacsecSaStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::mka::MacsecSaStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::mka::MacsecSaStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::mka::MacsecSaStats>,
   Parent>;
  using strings = ::facebook::fboss::mka::mka_structs_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::directionIngress, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::octetsEncrypted, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::octetsProtected, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outEncryptedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outProtectedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inUncheckedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inDelayedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inLatePkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inInvalidPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inNotValidPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inNoSaPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inUnusedSaPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inOkPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outCurrentXpn, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inCurrentXpn, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::directionIngress, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::octetsEncrypted, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::octetsProtected, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::outEncryptedPkts, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::outProtectedPkts, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::inUncheckedPkts, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::inDelayedPkts, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::inLatePkts, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::inInvalidPkts, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::inNotValidPkts, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::inNoSaPkts, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::inUnusedSaPkts, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::inOkPkts, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::outCurrentXpn, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::inCurrentXpn, std::integral_constant<apache::thrift::field_id_t, 15>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(directionIngress, 1);
    STRUCT_CHILD_GETTERS(octetsEncrypted, 2);
    STRUCT_CHILD_GETTERS(octetsProtected, 3);
    STRUCT_CHILD_GETTERS(outEncryptedPkts, 4);
    STRUCT_CHILD_GETTERS(outProtectedPkts, 5);
    STRUCT_CHILD_GETTERS(inUncheckedPkts, 6);
    STRUCT_CHILD_GETTERS(inDelayedPkts, 7);
    STRUCT_CHILD_GETTERS(inLatePkts, 8);
    STRUCT_CHILD_GETTERS(inInvalidPkts, 9);
    STRUCT_CHILD_GETTERS(inNotValidPkts, 10);
    STRUCT_CHILD_GETTERS(inNoSaPkts, 11);
    STRUCT_CHILD_GETTERS(inUnusedSaPkts, 12);
    STRUCT_CHILD_GETTERS(inOkPkts, 13);
    STRUCT_CHILD_GETTERS(outCurrentXpn, 14);
    STRUCT_CHILD_GETTERS(inCurrentXpn, 15);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return directionIngress(); }
    else if constexpr (__id == 2) { return octetsEncrypted(); }
    else if constexpr (__id == 3) { return octetsProtected(); }
    else if constexpr (__id == 4) { return outEncryptedPkts(); }
    else if constexpr (__id == 5) { return outProtectedPkts(); }
    else if constexpr (__id == 6) { return inUncheckedPkts(); }
    else if constexpr (__id == 7) { return inDelayedPkts(); }
    else if constexpr (__id == 8) { return inLatePkts(); }
    else if constexpr (__id == 9) { return inInvalidPkts(); }
    else if constexpr (__id == 10) { return inNotValidPkts(); }
    else if constexpr (__id == 11) { return inNoSaPkts(); }
    else if constexpr (__id == 12) { return inUnusedSaPkts(); }
    else if constexpr (__id == 13) { return inOkPkts(); }
    else if constexpr (__id == 14) { return outCurrentXpn(); }
    else if constexpr (__id == 15) { return inCurrentXpn(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::MacsecSaIdSaStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::MacsecSaIdSaStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::MacsecSaIdSaStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::MacsecSaIdSaStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::MacsecSaIdSaStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::MacsecSaIdSaStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwFlowletStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwFlowletStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwFlowletStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwFlowletStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwFlowletStats>,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::l3EcmpDlbFailPackets, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::l3EcmpDlbPortReassignmentCount, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::l3EcmpDlbFailPackets, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::l3EcmpDlbPortReassignmentCount, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(l3EcmpDlbFailPackets, 1);
    STRUCT_CHILD_GETTERS(l3EcmpDlbPortReassignmentCount, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return l3EcmpDlbFailPackets(); }
    else if constexpr (__id == 2) { return l3EcmpDlbPortReassignmentCount(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::std::int64_t>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i64_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::std::int64_t>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i64_t>,
   Parent>;
  using Child = Path<::std::int64_t, ::facebook::fboss::fsdb::FsdbOperStatsRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::MacsecSciFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::MacsecSciFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::MacsecSciFlowStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::MacsecSciFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::MacsecSciFlowStats>,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::sci, ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::flowStats, ChildThriftPath<::facebook::fboss::mka::MacsecFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::mka::MacsecFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::sci, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::flowStats, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(sci, 1);
    STRUCT_CHILD_GETTERS(flowStats, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return sci(); }
    else if constexpr (__id == 2) { return flowStats(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::VdmPerfMonitorPortSideStatsForOds, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::VdmPerfMonitorPortSideStatsForOds,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::VdmPerfMonitorPortSideStatsForOds>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::VdmPerfMonitorPortSideStatsForOds,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::VdmPerfMonitorPortSideStatsForOds>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::datapathBERMax, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::datapathErroredFramesMax, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::laneSNRMin, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::lanePam4Level0SDMax, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::lanePam4Level1SDMax, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::lanePam4Level2SDMax, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::lanePam4Level3SDMax, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::lanePam4MPIMax, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::lanePam4LTPMax, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::fecTailMax, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int16_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::datapathBERMax, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::datapathErroredFramesMax, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::laneSNRMin, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::lanePam4Level0SDMax, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::lanePam4Level1SDMax, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::lanePam4Level2SDMax, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::lanePam4Level3SDMax, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::lanePam4MPIMax, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::lanePam4LTPMax, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::fecTailMax, std::integral_constant<apache::thrift::field_id_t, 10>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(datapathBERMax, 1);
    STRUCT_CHILD_GETTERS(datapathErroredFramesMax, 2);
    STRUCT_CHILD_GETTERS(laneSNRMin, 3);
    STRUCT_CHILD_GETTERS(lanePam4Level0SDMax, 4);
    STRUCT_CHILD_GETTERS(lanePam4Level1SDMax, 5);
    STRUCT_CHILD_GETTERS(lanePam4Level2SDMax, 6);
    STRUCT_CHILD_GETTERS(lanePam4Level3SDMax, 7);
    STRUCT_CHILD_GETTERS(lanePam4MPIMax, 8);
    STRUCT_CHILD_GETTERS(lanePam4LTPMax, 9);
    STRUCT_CHILD_GETTERS(fecTailMax, 10);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return datapathBERMax(); }
    else if constexpr (__id == 2) { return datapathErroredFramesMax(); }
    else if constexpr (__id == 3) { return laneSNRMin(); }
    else if constexpr (__id == 4) { return lanePam4Level0SDMax(); }
    else if constexpr (__id == 5) { return lanePam4Level1SDMax(); }
    else if constexpr (__id == 6) { return lanePam4Level2SDMax(); }
    else if constexpr (__id == 7) { return lanePam4Level3SDMax(); }
    else if constexpr (__id == 8) { return lanePam4MPIMax(); }
    else if constexpr (__id == 9) { return lanePam4LTPMax(); }
    else if constexpr (__id == 10) { return fecTailMax(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::ChannelSensors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::ChannelSensors,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::ChannelSensors>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::ChannelSensors,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::ChannelSensors>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::rxPwr, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::txBias, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::txPwr, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::txSnr, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::rxSnr, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::rxPwrdBm, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::txPwrdBm, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::rxPwr, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::txBias, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::txPwr, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::txSnr, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::rxSnr, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::rxPwrdBm, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::txPwrdBm, std::integral_constant<apache::thrift::field_id_t, 7>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(rxPwr, 1);
    STRUCT_CHILD_GETTERS(txBias, 2);
    STRUCT_CHILD_GETTERS(txPwr, 3);
    STRUCT_CHILD_GETTERS(txSnr, 4);
    STRUCT_CHILD_GETTERS(rxSnr, 5);
    STRUCT_CHILD_GETTERS(rxPwrdBm, 6);
    STRUCT_CHILD_GETTERS(txPwrdBm, 7);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return rxPwr(); }
    else if constexpr (__id == 2) { return txBias(); }
    else if constexpr (__id == 3) { return txPwr(); }
    else if constexpr (__id == 4) { return txSnr(); }
    else if constexpr (__id == 5) { return rxSnr(); }
    else if constexpr (__id == 6) { return rxPwrdBm(); }
    else if constexpr (__id == 7) { return txPwrdBm(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::Channel, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::Channel,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::Channel>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::Channel,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::Channel>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::channel, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::sensors, ChildThriftPath<::facebook::fboss::ChannelSensors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::facebook::fboss::ChannelSensors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::channel, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::sensors, std::integral_constant<apache::thrift::field_id_t, 6>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(channel, 1);
    STRUCT_CHILD_GETTERS(sensors, 6);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return channel(); }
    else if constexpr (__id == 6) { return sensors(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwSwitchWatermarkStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwSwitchWatermarkStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwSwitchWatermarkStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwSwitchWatermarkStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwSwitchWatermarkStats>,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::fdrRciWatermarkBytes, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::coreRciWatermarkBytes, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::dtlQueueWatermarkBytes, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::deviceWatermarkBytes, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::globalHeadroomWatermarkBytes, ChildThriftPath<::std::map<::std::string, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::globalSharedWatermarkBytes, ChildThriftPath<::std::map<::std::string, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::egressCoreBufferWatermarkBytes, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::map<::std::string, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::map<::std::string, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::fdrRciWatermarkBytes, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::coreRciWatermarkBytes, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::dtlQueueWatermarkBytes, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::deviceWatermarkBytes, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::globalHeadroomWatermarkBytes, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::globalSharedWatermarkBytes, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::egressCoreBufferWatermarkBytes, std::integral_constant<apache::thrift::field_id_t, 7>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(fdrRciWatermarkBytes, 1);
    STRUCT_CHILD_GETTERS(coreRciWatermarkBytes, 2);
    STRUCT_CHILD_GETTERS(dtlQueueWatermarkBytes, 3);
    STRUCT_CHILD_GETTERS(deviceWatermarkBytes, 4);
    STRUCT_CHILD_GETTERS(globalHeadroomWatermarkBytes, 5);
    STRUCT_CHILD_GETTERS(globalSharedWatermarkBytes, 6);
    STRUCT_CHILD_GETTERS(egressCoreBufferWatermarkBytes, 7);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return fdrRciWatermarkBytes(); }
    else if constexpr (__id == 2) { return coreRciWatermarkBytes(); }
    else if constexpr (__id == 3) { return dtlQueueWatermarkBytes(); }
    else if constexpr (__id == 4) { return deviceWatermarkBytes(); }
    else if constexpr (__id == 5) { return globalHeadroomWatermarkBytes(); }
    else if constexpr (__id == 6) { return globalSharedWatermarkBytes(); }
    else if constexpr (__id == 7) { return egressCoreBufferWatermarkBytes(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::mka::MacsecPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::mka::MacsecPortStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::mka::MacsecPortStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::mka::MacsecPortStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::mka::MacsecPortStats>,
   Parent>;
  using strings = ::facebook::fboss::mka::mka_structs_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::preMacsecDropPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::controlPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::dataPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::octetsEncrypted, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inBadOrNoMacsecTagDroppedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inNoSciDroppedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inUnknownSciPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inOverrunDroppedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inDelayedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inLateDroppedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inNotValidDroppedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inInvalidPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inNoSaDroppedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inUnusedSaPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inCurrentXpn, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outTooLongDroppedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outCurrentXpn, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::noMacsecTagPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 31>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 45>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::preMacsecDropPkts, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::controlPkts, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::dataPkts, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::octetsEncrypted, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::inBadOrNoMacsecTagDroppedPkts, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::inNoSciDroppedPkts, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::inUnknownSciPkts, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::inOverrunDroppedPkts, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::inDelayedPkts, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::inLateDroppedPkts, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::inNotValidDroppedPkts, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::inInvalidPkts, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::inNoSaDroppedPkts, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::inUnusedSaPkts, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::inCurrentXpn, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::outTooLongDroppedPkts, std::integral_constant<apache::thrift::field_id_t, 30>>,
std::pair<strings::outCurrentXpn, std::integral_constant<apache::thrift::field_id_t, 31>>,
std::pair<strings::noMacsecTagPkts, std::integral_constant<apache::thrift::field_id_t, 45>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(preMacsecDropPkts, 1);
    STRUCT_CHILD_GETTERS(controlPkts, 2);
    STRUCT_CHILD_GETTERS(dataPkts, 3);
    STRUCT_CHILD_GETTERS(octetsEncrypted, 4);
    STRUCT_CHILD_GETTERS(inBadOrNoMacsecTagDroppedPkts, 5);
    STRUCT_CHILD_GETTERS(inNoSciDroppedPkts, 6);
    STRUCT_CHILD_GETTERS(inUnknownSciPkts, 7);
    STRUCT_CHILD_GETTERS(inOverrunDroppedPkts, 8);
    STRUCT_CHILD_GETTERS(inDelayedPkts, 9);
    STRUCT_CHILD_GETTERS(inLateDroppedPkts, 10);
    STRUCT_CHILD_GETTERS(inNotValidDroppedPkts, 11);
    STRUCT_CHILD_GETTERS(inInvalidPkts, 12);
    STRUCT_CHILD_GETTERS(inNoSaDroppedPkts, 13);
    STRUCT_CHILD_GETTERS(inUnusedSaPkts, 14);
    STRUCT_CHILD_GETTERS(inCurrentXpn, 15);
    STRUCT_CHILD_GETTERS(outTooLongDroppedPkts, 30);
    STRUCT_CHILD_GETTERS(outCurrentXpn, 31);
    STRUCT_CHILD_GETTERS(noMacsecTagPkts, 45);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return preMacsecDropPkts(); }
    else if constexpr (__id == 2) { return controlPkts(); }
    else if constexpr (__id == 3) { return dataPkts(); }
    else if constexpr (__id == 4) { return octetsEncrypted(); }
    else if constexpr (__id == 5) { return inBadOrNoMacsecTagDroppedPkts(); }
    else if constexpr (__id == 6) { return inNoSciDroppedPkts(); }
    else if constexpr (__id == 7) { return inUnknownSciPkts(); }
    else if constexpr (__id == 8) { return inOverrunDroppedPkts(); }
    else if constexpr (__id == 9) { return inDelayedPkts(); }
    else if constexpr (__id == 10) { return inLateDroppedPkts(); }
    else if constexpr (__id == 11) { return inNotValidDroppedPkts(); }
    else if constexpr (__id == 12) { return inInvalidPkts(); }
    else if constexpr (__id == 13) { return inNoSaDroppedPkts(); }
    else if constexpr (__id == 14) { return inUnusedSaPkts(); }
    else if constexpr (__id == 15) { return inCurrentXpn(); }
    else if constexpr (__id == 30) { return outTooLongDroppedPkts(); }
    else if constexpr (__id == 31) { return outCurrentXpn(); }
    else if constexpr (__id == 45) { return noMacsecTagPkts(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::SymErrHistogramBin>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::facebook::fboss::SymErrHistogramBin>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::facebook::fboss::SymErrHistogramBin>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::facebook::fboss::SymErrHistogramBin>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::facebook::fboss::SymErrHistogramBin>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::SymErrHistogramBin, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::MacsecSaIdSaStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::MacsecSaIdSaStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::MacsecSaIdSaStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::MacsecSaIdSaStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::MacsecSaIdSaStats>,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::saId, ChildThriftPath<::facebook::fboss::mka::MKASecureAssociationId, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::saStats, ChildThriftPath<::facebook::fboss::mka::MacsecSaStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::mka::MKASecureAssociationId, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::mka::MacsecSaStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::saId, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::saStats, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(saId, 1);
    STRUCT_CHILD_GETTERS(saStats, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return saId(); }
    else if constexpr (__id == 2) { return saStats(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::CpuPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::CpuPortStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::CpuPortStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::CpuPortStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::CpuPortStats>,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::queueInPackets_, ChildThriftPath<::std::map<::std::int32_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::queueDiscardPackets_, ChildThriftPath<::std::map<::std::int32_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::queueToName_, ChildThriftPath<::std::map<::std::int32_t, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::portStats_, ChildThriftPath<::facebook::fboss::HwPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::int32_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::int32_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::std::int32_t, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::HwPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::queueInPackets_, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::queueDiscardPackets_, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::queueToName_, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::portStats_, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(queueInPackets_, 1);
    STRUCT_CHILD_GETTERS(queueDiscardPackets_, 2);
    STRUCT_CHILD_GETTERS(queueToName_, 3);
    STRUCT_CHILD_GETTERS(portStats_, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return queueInPackets_(); }
    else if constexpr (__id == 2) { return queueDiscardPackets_(); }
    else if constexpr (__id == 3) { return queueToName_(); }
    else if constexpr (__id == 4) { return portStats_(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::phy::PhyStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::phy::PhyStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::phy::PhyStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::phy::PhyStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::phy::PhyStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::phy::PhyStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwFlowletStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::HwFlowletStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwFlowletStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::HwFlowletStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwFlowletStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HwFlowletStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::IOStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::IOStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::IOStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::IOStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::IOStats>,
   Parent>;
  using strings = ::facebook::fboss::io_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::readDownTime, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::writeDownTime, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::numReadAttempted, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::numReadFailed, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::numWriteAttempted, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::numWriteFailed, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::readDownTime, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::writeDownTime, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::numReadAttempted, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::numReadFailed, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::numWriteAttempted, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::numWriteFailed, std::integral_constant<apache::thrift::field_id_t, 6>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(readDownTime, 1);
    STRUCT_CHILD_GETTERS(writeDownTime, 2);
    STRUCT_CHILD_GETTERS(numReadAttempted, 3);
    STRUCT_CHILD_GETTERS(numReadFailed, 4);
    STRUCT_CHILD_GETTERS(numWriteAttempted, 5);
    STRUCT_CHILD_GETTERS(numWriteFailed, 6);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return readDownTime(); }
    else if constexpr (__id == 2) { return writeDownTime(); }
    else if constexpr (__id == 3) { return numReadAttempted(); }
    else if constexpr (__id == 4) { return numReadFailed(); }
    else if constexpr (__id == 5) { return numWriteAttempted(); }
    else if constexpr (__id == 6) { return numWriteFailed(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::SymErrHistogramBin, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::SymErrHistogramBin,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::SymErrHistogramBin>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::SymErrHistogramBin,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::SymErrHistogramBin>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::nbitSymbolErrorMax, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::nbitSymbolErrorAvg, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::nbitSymbolErrorCur, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::nbitSymbolErrorMax, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::nbitSymbolErrorAvg, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::nbitSymbolErrorCur, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(nbitSymbolErrorMax, 1);
    STRUCT_CHILD_GETTERS(nbitSymbolErrorAvg, 2);
    STRUCT_CHILD_GETTERS(nbitSymbolErrorCur, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return nbitSymbolErrorMax(); }
    else if constexpr (__id == 2) { return nbitSymbolErrorAvg(); }
    else if constexpr (__id == 3) { return nbitSymbolErrorCur(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PmdStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PmdStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PmdStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PmdStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PmdStats>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::lanes, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::LaneStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::LaneStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::lanes, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(lanes, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return lanes(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PhyStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PhyStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PhyStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PhyStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PhyStats>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::system, ChildThriftPath<::facebook::fboss::phy::PhySideStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::line, ChildThriftPath<::facebook::fboss::phy::PhySideStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::linkFlapCount, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::ioStats, ChildThriftPath<::facebook::fboss::IOStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::timeCollected, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::phy::PhySideStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::phy::PhySideStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::facebook::fboss::IOStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::system, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::line, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::linkFlapCount, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::ioStats, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::timeCollected, std::integral_constant<apache::thrift::field_id_t, 10>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(system, 1);
    STRUCT_CHILD_GETTERS(line, 2);
    STRUCT_CHILD_GETTERS(linkFlapCount, 3);
    STRUCT_CHILD_GETTERS(ioStats, 9);
    STRUCT_CHILD_GETTERS(timeCollected, 10);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return system(); }
    else if constexpr (__id == 2) { return line(); }
    else if constexpr (__id == 3) { return linkFlapCount(); }
    else if constexpr (__id == 9) { return ioStats(); }
    else if constexpr (__id == 10) { return timeCollected(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::mka::MKASci,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::mka::MKASci>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::mka::MKASci,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::mka::MKASci>,
   Parent>;
  using strings = ::facebook::fboss::mka::mka_structs_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::macAddress, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::port, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::macAddress, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::port, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(macAddress, 1);
    STRUCT_CHILD_GETTERS(port, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return macAddress(); }
    else if constexpr (__id == 2) { return port(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwSwitchDropStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwSwitchDropStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwSwitchDropStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwSwitchDropStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwSwitchDropStats>,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::globalDrops, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::globalReachabilityDrops, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::packetIntegrityDrops, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::fdrCellDrops, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::voqResourceExhaustionDrops, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::globalResourceExhaustionDrops, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::sramResourceExhaustionDrops, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::vsqResourceExhaustionDrops, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::dropPrecedenceDrops, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::queueResolutionDrops, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::ingressPacketPipelineRejectDrops, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::corruptedCellPacketIntegrityDrops, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::missingCellPacketIntegrityDrops, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::globalDrops, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::globalReachabilityDrops, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::packetIntegrityDrops, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::fdrCellDrops, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::voqResourceExhaustionDrops, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::globalResourceExhaustionDrops, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::sramResourceExhaustionDrops, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::vsqResourceExhaustionDrops, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::dropPrecedenceDrops, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::queueResolutionDrops, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::ingressPacketPipelineRejectDrops, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::corruptedCellPacketIntegrityDrops, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::missingCellPacketIntegrityDrops, std::integral_constant<apache::thrift::field_id_t, 13>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(globalDrops, 1);
    STRUCT_CHILD_GETTERS(globalReachabilityDrops, 2);
    STRUCT_CHILD_GETTERS(packetIntegrityDrops, 3);
    STRUCT_CHILD_GETTERS(fdrCellDrops, 4);
    STRUCT_CHILD_GETTERS(voqResourceExhaustionDrops, 5);
    STRUCT_CHILD_GETTERS(globalResourceExhaustionDrops, 6);
    STRUCT_CHILD_GETTERS(sramResourceExhaustionDrops, 7);
    STRUCT_CHILD_GETTERS(vsqResourceExhaustionDrops, 8);
    STRUCT_CHILD_GETTERS(dropPrecedenceDrops, 9);
    STRUCT_CHILD_GETTERS(queueResolutionDrops, 10);
    STRUCT_CHILD_GETTERS(ingressPacketPipelineRejectDrops, 11);
    STRUCT_CHILD_GETTERS(corruptedCellPacketIntegrityDrops, 12);
    STRUCT_CHILD_GETTERS(missingCellPacketIntegrityDrops, 13);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return globalDrops(); }
    else if constexpr (__id == 2) { return globalReachabilityDrops(); }
    else if constexpr (__id == 3) { return packetIntegrityDrops(); }
    else if constexpr (__id == 4) { return fdrCellDrops(); }
    else if constexpr (__id == 5) { return voqResourceExhaustionDrops(); }
    else if constexpr (__id == 6) { return globalResourceExhaustionDrops(); }
    else if constexpr (__id == 7) { return sramResourceExhaustionDrops(); }
    else if constexpr (__id == 8) { return vsqResourceExhaustionDrops(); }
    else if constexpr (__id == 9) { return dropPrecedenceDrops(); }
    else if constexpr (__id == 10) { return queueResolutionDrops(); }
    else if constexpr (__id == 11) { return ingressPacketPipelineRejectDrops(); }
    else if constexpr (__id == 12) { return corruptedCellPacketIntegrityDrops(); }
    else if constexpr (__id == 13) { return missingCellPacketIntegrityDrops(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::std::int64_t>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i64_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::std::int64_t>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i64_t>,
   Parent>;
  using Child = Path<::std::int64_t, ::facebook::fboss::fsdb::FsdbOperStatsRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::phy::EyeInfo>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::phy::EyeInfo>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::phy::EyeInfo>>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::phy::EyeInfo>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::fboss::phy::EyeInfo>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::phy::EyeInfo, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::VdmPerfMonitorPortSideStatsForOds>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::VdmPerfMonitorPortSideStatsForOds>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::VdmPerfMonitorPortSideStatsForOds>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::VdmPerfMonitorPortSideStatsForOds>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::VdmPerfMonitorPortSideStatsForOds>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::VdmPerfMonitorPortSideStatsForOds, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwResourceStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwResourceStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwResourceStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwResourceStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwResourceStats>,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::hw_table_stats_stale, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::l3_host_max, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::l3_host_used, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::l3_host_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::l3_ipv4_host_used, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::l3_ipv4_host_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::l3_ipv6_host_used, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::l3_ipv6_host_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::l3_nexthops_max, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::l3_nexthops_used, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::l3_nexthops_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::l3_ipv4_nexthops_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::l3_ipv6_nexthops_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::l3_ecmp_groups_max, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::l3_ecmp_groups_used, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::l3_ecmp_groups_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::l3_ecmp_group_members_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::lpm_ipv4_max, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::lpm_ipv4_used, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::lpm_ipv4_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::lpm_ipv6_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::lpm_ipv6_mask_0_64_max, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::lpm_ipv6_mask_0_64_used, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::lpm_ipv6_mask_0_64_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::lpm_ipv6_mask_65_127_max, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::lpm_ipv6_mask_65_127_used, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::lpm_ipv6_mask_65_127_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::lpm_slots_max, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::lpm_slots_used, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::lpm_slots_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::acl_entries_used, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::acl_entries_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::acl_entries_max, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::acl_counters_used, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::acl_counters_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::acl_counters_max, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::acl_meters_used, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::acl_meters_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::acl_meters_max, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::mirrors_used, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::mirrors_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::mirrors_max, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::mirrors_span, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::mirrors_erspan, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::mirrors_sflow, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::em_entries_used, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::em_entries_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::em_entries_max, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::em_counters_used, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::em_counters_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::em_counters_max, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::system_ports_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::voqs_free, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 29>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 31>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 32>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 33>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 34>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 35>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 36>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 37>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 38>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 39>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 40>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 41>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 42>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 43>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 44>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 45>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 46>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 47>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 48>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 49>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 50>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 51>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 52>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 53>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::hw_table_stats_stale, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::l3_host_max, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::l3_host_used, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::l3_host_free, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::l3_ipv4_host_used, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::l3_ipv4_host_free, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::l3_ipv6_host_used, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::l3_ipv6_host_free, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::l3_nexthops_max, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::l3_nexthops_used, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::l3_nexthops_free, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::l3_ipv4_nexthops_free, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::l3_ipv6_nexthops_free, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::l3_ecmp_groups_max, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::l3_ecmp_groups_used, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::l3_ecmp_groups_free, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::l3_ecmp_group_members_free, std::integral_constant<apache::thrift::field_id_t, 17>>,
std::pair<strings::lpm_ipv4_max, std::integral_constant<apache::thrift::field_id_t, 18>>,
std::pair<strings::lpm_ipv4_used, std::integral_constant<apache::thrift::field_id_t, 19>>,
std::pair<strings::lpm_ipv4_free, std::integral_constant<apache::thrift::field_id_t, 20>>,
std::pair<strings::lpm_ipv6_free, std::integral_constant<apache::thrift::field_id_t, 21>>,
std::pair<strings::lpm_ipv6_mask_0_64_max, std::integral_constant<apache::thrift::field_id_t, 22>>,
std::pair<strings::lpm_ipv6_mask_0_64_used, std::integral_constant<apache::thrift::field_id_t, 23>>,
std::pair<strings::lpm_ipv6_mask_0_64_free, std::integral_constant<apache::thrift::field_id_t, 24>>,
std::pair<strings::lpm_ipv6_mask_65_127_max, std::integral_constant<apache::thrift::field_id_t, 25>>,
std::pair<strings::lpm_ipv6_mask_65_127_used, std::integral_constant<apache::thrift::field_id_t, 26>>,
std::pair<strings::lpm_ipv6_mask_65_127_free, std::integral_constant<apache::thrift::field_id_t, 27>>,
std::pair<strings::lpm_slots_max, std::integral_constant<apache::thrift::field_id_t, 28>>,
std::pair<strings::lpm_slots_used, std::integral_constant<apache::thrift::field_id_t, 29>>,
std::pair<strings::lpm_slots_free, std::integral_constant<apache::thrift::field_id_t, 30>>,
std::pair<strings::acl_entries_used, std::integral_constant<apache::thrift::field_id_t, 31>>,
std::pair<strings::acl_entries_free, std::integral_constant<apache::thrift::field_id_t, 32>>,
std::pair<strings::acl_entries_max, std::integral_constant<apache::thrift::field_id_t, 33>>,
std::pair<strings::acl_counters_used, std::integral_constant<apache::thrift::field_id_t, 34>>,
std::pair<strings::acl_counters_free, std::integral_constant<apache::thrift::field_id_t, 35>>,
std::pair<strings::acl_counters_max, std::integral_constant<apache::thrift::field_id_t, 36>>,
std::pair<strings::acl_meters_used, std::integral_constant<apache::thrift::field_id_t, 37>>,
std::pair<strings::acl_meters_free, std::integral_constant<apache::thrift::field_id_t, 38>>,
std::pair<strings::acl_meters_max, std::integral_constant<apache::thrift::field_id_t, 39>>,
std::pair<strings::mirrors_used, std::integral_constant<apache::thrift::field_id_t, 40>>,
std::pair<strings::mirrors_free, std::integral_constant<apache::thrift::field_id_t, 41>>,
std::pair<strings::mirrors_max, std::integral_constant<apache::thrift::field_id_t, 42>>,
std::pair<strings::mirrors_span, std::integral_constant<apache::thrift::field_id_t, 43>>,
std::pair<strings::mirrors_erspan, std::integral_constant<apache::thrift::field_id_t, 44>>,
std::pair<strings::mirrors_sflow, std::integral_constant<apache::thrift::field_id_t, 45>>,
std::pair<strings::em_entries_used, std::integral_constant<apache::thrift::field_id_t, 46>>,
std::pair<strings::em_entries_free, std::integral_constant<apache::thrift::field_id_t, 47>>,
std::pair<strings::em_entries_max, std::integral_constant<apache::thrift::field_id_t, 48>>,
std::pair<strings::em_counters_used, std::integral_constant<apache::thrift::field_id_t, 49>>,
std::pair<strings::em_counters_free, std::integral_constant<apache::thrift::field_id_t, 50>>,
std::pair<strings::em_counters_max, std::integral_constant<apache::thrift::field_id_t, 51>>,
std::pair<strings::system_ports_free, std::integral_constant<apache::thrift::field_id_t, 52>>,
std::pair<strings::voqs_free, std::integral_constant<apache::thrift::field_id_t, 53>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(hw_table_stats_stale, 1);
    STRUCT_CHILD_GETTERS(l3_host_max, 2);
    STRUCT_CHILD_GETTERS(l3_host_used, 3);
    STRUCT_CHILD_GETTERS(l3_host_free, 4);
    STRUCT_CHILD_GETTERS(l3_ipv4_host_used, 5);
    STRUCT_CHILD_GETTERS(l3_ipv4_host_free, 6);
    STRUCT_CHILD_GETTERS(l3_ipv6_host_used, 7);
    STRUCT_CHILD_GETTERS(l3_ipv6_host_free, 8);
    STRUCT_CHILD_GETTERS(l3_nexthops_max, 9);
    STRUCT_CHILD_GETTERS(l3_nexthops_used, 10);
    STRUCT_CHILD_GETTERS(l3_nexthops_free, 11);
    STRUCT_CHILD_GETTERS(l3_ipv4_nexthops_free, 12);
    STRUCT_CHILD_GETTERS(l3_ipv6_nexthops_free, 13);
    STRUCT_CHILD_GETTERS(l3_ecmp_groups_max, 14);
    STRUCT_CHILD_GETTERS(l3_ecmp_groups_used, 15);
    STRUCT_CHILD_GETTERS(l3_ecmp_groups_free, 16);
    STRUCT_CHILD_GETTERS(l3_ecmp_group_members_free, 17);
    STRUCT_CHILD_GETTERS(lpm_ipv4_max, 18);
    STRUCT_CHILD_GETTERS(lpm_ipv4_used, 19);
    STRUCT_CHILD_GETTERS(lpm_ipv4_free, 20);
    STRUCT_CHILD_GETTERS(lpm_ipv6_free, 21);
    STRUCT_CHILD_GETTERS(lpm_ipv6_mask_0_64_max, 22);
    STRUCT_CHILD_GETTERS(lpm_ipv6_mask_0_64_used, 23);
    STRUCT_CHILD_GETTERS(lpm_ipv6_mask_0_64_free, 24);
    STRUCT_CHILD_GETTERS(lpm_ipv6_mask_65_127_max, 25);
    STRUCT_CHILD_GETTERS(lpm_ipv6_mask_65_127_used, 26);
    STRUCT_CHILD_GETTERS(lpm_ipv6_mask_65_127_free, 27);
    STRUCT_CHILD_GETTERS(lpm_slots_max, 28);
    STRUCT_CHILD_GETTERS(lpm_slots_used, 29);
    STRUCT_CHILD_GETTERS(lpm_slots_free, 30);
    STRUCT_CHILD_GETTERS(acl_entries_used, 31);
    STRUCT_CHILD_GETTERS(acl_entries_free, 32);
    STRUCT_CHILD_GETTERS(acl_entries_max, 33);
    STRUCT_CHILD_GETTERS(acl_counters_used, 34);
    STRUCT_CHILD_GETTERS(acl_counters_free, 35);
    STRUCT_CHILD_GETTERS(acl_counters_max, 36);
    STRUCT_CHILD_GETTERS(acl_meters_used, 37);
    STRUCT_CHILD_GETTERS(acl_meters_free, 38);
    STRUCT_CHILD_GETTERS(acl_meters_max, 39);
    STRUCT_CHILD_GETTERS(mirrors_used, 40);
    STRUCT_CHILD_GETTERS(mirrors_free, 41);
    STRUCT_CHILD_GETTERS(mirrors_max, 42);
    STRUCT_CHILD_GETTERS(mirrors_span, 43);
    STRUCT_CHILD_GETTERS(mirrors_erspan, 44);
    STRUCT_CHILD_GETTERS(mirrors_sflow, 45);
    STRUCT_CHILD_GETTERS(em_entries_used, 46);
    STRUCT_CHILD_GETTERS(em_entries_free, 47);
    STRUCT_CHILD_GETTERS(em_entries_max, 48);
    STRUCT_CHILD_GETTERS(em_counters_used, 49);
    STRUCT_CHILD_GETTERS(em_counters_free, 50);
    STRUCT_CHILD_GETTERS(em_counters_max, 51);
    STRUCT_CHILD_GETTERS(system_ports_free, 52);
    STRUCT_CHILD_GETTERS(voqs_free, 53);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return hw_table_stats_stale(); }
    else if constexpr (__id == 2) { return l3_host_max(); }
    else if constexpr (__id == 3) { return l3_host_used(); }
    else if constexpr (__id == 4) { return l3_host_free(); }
    else if constexpr (__id == 5) { return l3_ipv4_host_used(); }
    else if constexpr (__id == 6) { return l3_ipv4_host_free(); }
    else if constexpr (__id == 7) { return l3_ipv6_host_used(); }
    else if constexpr (__id == 8) { return l3_ipv6_host_free(); }
    else if constexpr (__id == 9) { return l3_nexthops_max(); }
    else if constexpr (__id == 10) { return l3_nexthops_used(); }
    else if constexpr (__id == 11) { return l3_nexthops_free(); }
    else if constexpr (__id == 12) { return l3_ipv4_nexthops_free(); }
    else if constexpr (__id == 13) { return l3_ipv6_nexthops_free(); }
    else if constexpr (__id == 14) { return l3_ecmp_groups_max(); }
    else if constexpr (__id == 15) { return l3_ecmp_groups_used(); }
    else if constexpr (__id == 16) { return l3_ecmp_groups_free(); }
    else if constexpr (__id == 17) { return l3_ecmp_group_members_free(); }
    else if constexpr (__id == 18) { return lpm_ipv4_max(); }
    else if constexpr (__id == 19) { return lpm_ipv4_used(); }
    else if constexpr (__id == 20) { return lpm_ipv4_free(); }
    else if constexpr (__id == 21) { return lpm_ipv6_free(); }
    else if constexpr (__id == 22) { return lpm_ipv6_mask_0_64_max(); }
    else if constexpr (__id == 23) { return lpm_ipv6_mask_0_64_used(); }
    else if constexpr (__id == 24) { return lpm_ipv6_mask_0_64_free(); }
    else if constexpr (__id == 25) { return lpm_ipv6_mask_65_127_max(); }
    else if constexpr (__id == 26) { return lpm_ipv6_mask_65_127_used(); }
    else if constexpr (__id == 27) { return lpm_ipv6_mask_65_127_free(); }
    else if constexpr (__id == 28) { return lpm_slots_max(); }
    else if constexpr (__id == 29) { return lpm_slots_used(); }
    else if constexpr (__id == 30) { return lpm_slots_free(); }
    else if constexpr (__id == 31) { return acl_entries_used(); }
    else if constexpr (__id == 32) { return acl_entries_free(); }
    else if constexpr (__id == 33) { return acl_entries_max(); }
    else if constexpr (__id == 34) { return acl_counters_used(); }
    else if constexpr (__id == 35) { return acl_counters_free(); }
    else if constexpr (__id == 36) { return acl_counters_max(); }
    else if constexpr (__id == 37) { return acl_meters_used(); }
    else if constexpr (__id == 38) { return acl_meters_free(); }
    else if constexpr (__id == 39) { return acl_meters_max(); }
    else if constexpr (__id == 40) { return mirrors_used(); }
    else if constexpr (__id == 41) { return mirrors_free(); }
    else if constexpr (__id == 42) { return mirrors_max(); }
    else if constexpr (__id == 43) { return mirrors_span(); }
    else if constexpr (__id == 44) { return mirrors_erspan(); }
    else if constexpr (__id == 45) { return mirrors_sflow(); }
    else if constexpr (__id == 46) { return em_entries_used(); }
    else if constexpr (__id == 47) { return em_entries_free(); }
    else if constexpr (__id == 48) { return em_entries_max(); }
    else if constexpr (__id == 49) { return em_counters_used(); }
    else if constexpr (__id == 50) { return em_counters_free(); }
    else if constexpr (__id == 51) { return em_counters_max(); }
    else if constexpr (__id == 52) { return system_ports_free(); }
    else if constexpr (__id == 53) { return voqs_free(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::LaneStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::phy::LaneStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::phy::LaneStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::phy::LaneStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::phy::LaneStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::phy::LaneStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::MacsecStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::MacsecStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::MacsecStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::MacsecStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::MacsecStats>,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::ingressPortStats, ChildThriftPath<::facebook::fboss::mka::MacsecPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::egressPortStats, ChildThriftPath<::facebook::fboss::mka::MacsecPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::ingressFlowStats, ChildThriftPath<::std::vector<::facebook::fboss::MacsecSciFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::egressFlowStats, ChildThriftPath<::std::vector<::facebook::fboss::MacsecSciFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::rxSecureAssociationStats, ChildThriftPath<::std::vector<::facebook::fboss::MacsecSaIdSaStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::txSecureAssociationStats, ChildThriftPath<::std::vector<::facebook::fboss::MacsecSaIdSaStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::ingressAclStats, ChildThriftPath<::facebook::fboss::mka::MacsecAclStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::egressAclStats, ChildThriftPath<::facebook::fboss::mka::MacsecAclStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::mka::MacsecPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::mka::MacsecPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::facebook::fboss::MacsecSciFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::vector<::facebook::fboss::MacsecSciFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::vector<::facebook::fboss::MacsecSaIdSaStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::vector<::facebook::fboss::MacsecSaIdSaStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::facebook::fboss::mka::MacsecAclStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::facebook::fboss::mka::MacsecAclStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::ingressPortStats, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::egressPortStats, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::ingressFlowStats, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::egressFlowStats, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::rxSecureAssociationStats, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::txSecureAssociationStats, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::ingressAclStats, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::egressAclStats, std::integral_constant<apache::thrift::field_id_t, 8>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(ingressPortStats, 1);
    STRUCT_CHILD_GETTERS(egressPortStats, 2);
    STRUCT_CHILD_GETTERS(ingressFlowStats, 3);
    STRUCT_CHILD_GETTERS(egressFlowStats, 4);
    STRUCT_CHILD_GETTERS(rxSecureAssociationStats, 5);
    STRUCT_CHILD_GETTERS(txSecureAssociationStats, 6);
    STRUCT_CHILD_GETTERS(ingressAclStats, 7);
    STRUCT_CHILD_GETTERS(egressAclStats, 8);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return ingressPortStats(); }
    else if constexpr (__id == 2) { return egressPortStats(); }
    else if constexpr (__id == 3) { return ingressFlowStats(); }
    else if constexpr (__id == 4) { return egressFlowStats(); }
    else if constexpr (__id == 5) { return rxSecureAssociationStats(); }
    else if constexpr (__id == 6) { return txSecureAssociationStats(); }
    else if constexpr (__id == 7) { return ingressAclStats(); }
    else if constexpr (__id == 8) { return egressAclStats(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PhySideStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PhySideStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PhySideStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PhySideStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PhySideStats>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::side, Child<::facebook::fboss::phy::Side, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::phy::Side>>>,
std::pair<strings::pcs, ChildThriftPath<::facebook::fboss::phy::PcsStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::pmd, ChildThriftPath<::facebook::fboss::phy::PmdStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::phy::Side, ::apache::thrift::type_class::enumeration, ::apache::thrift::type::enum_t<::facebook::fboss::phy::Side>>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::phy::PcsStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::phy::PmdStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::side, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::pcs, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::pmd, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(side, 1);
    STRUCT_CHILD_GETTERS(pcs, 2);
    STRUCT_CHILD_GETTERS(pmd, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return side(); }
    else if constexpr (__id == 2) { return pcs(); }
    else if constexpr (__id == 3) { return pmd(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwPortStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwPortStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwPortStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwPortStats>,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::inBytes_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inUnicastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inMulticastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inBroadcastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inErrors_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inPause_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inIpv4HdrErrors_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inIpv6HdrErrors_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inDstNullDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inDiscardsRaw_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outBytes_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outUnicastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outMulticastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outBroadcastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outErrors_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outPause_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outCongestionDiscardPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::wredDroppedPackets_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::queueOutDiscardBytes_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::queueOutBytes_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::outEcnCounter_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::queueOutPackets_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::queueOutDiscardPackets_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::queueWatermarkBytes_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::fecCorrectableErrors, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::fecUncorrectableErrors, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inPfcCtrl_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outPfcCtrl_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inPfc_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::inPfcXon_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::outPfc_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::queueWredDroppedPackets_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::queueEcnMarkedPackets_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::fecCorrectedBits_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::fecCodewords_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::pqpErrorEgressDroppedPackets_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::fabricLinkDownDroppedCells_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::timestamp_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::portName_, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
std::pair<strings::macsecStats, ChildThriftPath<::facebook::fboss::MacsecStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::inLabelMissDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::queueWatermarkLevel_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::inCongestionDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inAclDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inTrapDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outForwardingDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::fabricConnectivityMismatch_DEPRECATED, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::logicalPortId, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::leakyBucketFlapCount_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::cableLengthMeters, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::dataCellsFilterOn, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::egressGvoqWatermarkBytes_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 29>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 31>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 32>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 33>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 34>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 35>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 36>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 37>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 38>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 39>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 50>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 51>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 52>, ChildThriftPath<::facebook::fboss::MacsecStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 53>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 54>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 55>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 56>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 57>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 58>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 59>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 60>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 61>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 62>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 63>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 64>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::inBytes_, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::inUnicastPkts_, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::inMulticastPkts_, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::inBroadcastPkts_, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::inDiscards_, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::inErrors_, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::inPause_, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::inIpv4HdrErrors_, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::inIpv6HdrErrors_, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::inDstNullDiscards_, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::inDiscardsRaw_, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::outBytes_, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::outUnicastPkts_, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::outMulticastPkts_, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::outBroadcastPkts_, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::outDiscards_, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::outErrors_, std::integral_constant<apache::thrift::field_id_t, 17>>,
std::pair<strings::outPause_, std::integral_constant<apache::thrift::field_id_t, 18>>,
std::pair<strings::outCongestionDiscardPkts_, std::integral_constant<apache::thrift::field_id_t, 19>>,
std::pair<strings::wredDroppedPackets_, std::integral_constant<apache::thrift::field_id_t, 20>>,
std::pair<strings::queueOutDiscardBytes_, std::integral_constant<apache::thrift::field_id_t, 21>>,
std::pair<strings::queueOutBytes_, std::integral_constant<apache::thrift::field_id_t, 22>>,
std::pair<strings::outEcnCounter_, std::integral_constant<apache::thrift::field_id_t, 23>>,
std::pair<strings::queueOutPackets_, std::integral_constant<apache::thrift::field_id_t, 24>>,
std::pair<strings::queueOutDiscardPackets_, std::integral_constant<apache::thrift::field_id_t, 25>>,
std::pair<strings::queueWatermarkBytes_, std::integral_constant<apache::thrift::field_id_t, 26>>,
std::pair<strings::fecCorrectableErrors, std::integral_constant<apache::thrift::field_id_t, 27>>,
std::pair<strings::fecUncorrectableErrors, std::integral_constant<apache::thrift::field_id_t, 28>>,
std::pair<strings::inPfcCtrl_, std::integral_constant<apache::thrift::field_id_t, 29>>,
std::pair<strings::outPfcCtrl_, std::integral_constant<apache::thrift::field_id_t, 30>>,
std::pair<strings::inPfc_, std::integral_constant<apache::thrift::field_id_t, 31>>,
std::pair<strings::inPfcXon_, std::integral_constant<apache::thrift::field_id_t, 32>>,
std::pair<strings::outPfc_, std::integral_constant<apache::thrift::field_id_t, 33>>,
std::pair<strings::queueWredDroppedPackets_, std::integral_constant<apache::thrift::field_id_t, 34>>,
std::pair<strings::queueEcnMarkedPackets_, std::integral_constant<apache::thrift::field_id_t, 35>>,
std::pair<strings::fecCorrectedBits_, std::integral_constant<apache::thrift::field_id_t, 36>>,
std::pair<strings::fecCodewords_, std::integral_constant<apache::thrift::field_id_t, 37>>,
std::pair<strings::pqpErrorEgressDroppedPackets_, std::integral_constant<apache::thrift::field_id_t, 38>>,
std::pair<strings::fabricLinkDownDroppedCells_, std::integral_constant<apache::thrift::field_id_t, 39>>,
std::pair<strings::timestamp_, std::integral_constant<apache::thrift::field_id_t, 50>>,
std::pair<strings::portName_, std::integral_constant<apache::thrift::field_id_t, 51>>,
std::pair<strings::macsecStats, std::integral_constant<apache::thrift::field_id_t, 52>>,
std::pair<strings::inLabelMissDiscards_, std::integral_constant<apache::thrift::field_id_t, 53>>,
std::pair<strings::queueWatermarkLevel_, std::integral_constant<apache::thrift::field_id_t, 54>>,
std::pair<strings::inCongestionDiscards_, std::integral_constant<apache::thrift::field_id_t, 55>>,
std::pair<strings::inAclDiscards_, std::integral_constant<apache::thrift::field_id_t, 56>>,
std::pair<strings::inTrapDiscards_, std::integral_constant<apache::thrift::field_id_t, 57>>,
std::pair<strings::outForwardingDiscards_, std::integral_constant<apache::thrift::field_id_t, 58>>,
std::pair<strings::fabricConnectivityMismatch_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 59>>,
std::pair<strings::logicalPortId, std::integral_constant<apache::thrift::field_id_t, 60>>,
std::pair<strings::leakyBucketFlapCount_, std::integral_constant<apache::thrift::field_id_t, 61>>,
std::pair<strings::cableLengthMeters, std::integral_constant<apache::thrift::field_id_t, 62>>,
std::pair<strings::dataCellsFilterOn, std::integral_constant<apache::thrift::field_id_t, 63>>,
std::pair<strings::egressGvoqWatermarkBytes_, std::integral_constant<apache::thrift::field_id_t, 64>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(inBytes_, 1);
    STRUCT_CHILD_GETTERS(inUnicastPkts_, 2);
    STRUCT_CHILD_GETTERS(inMulticastPkts_, 3);
    STRUCT_CHILD_GETTERS(inBroadcastPkts_, 4);
    STRUCT_CHILD_GETTERS(inDiscards_, 5);
    STRUCT_CHILD_GETTERS(inErrors_, 6);
    STRUCT_CHILD_GETTERS(inPause_, 7);
    STRUCT_CHILD_GETTERS(inIpv4HdrErrors_, 8);
    STRUCT_CHILD_GETTERS(inIpv6HdrErrors_, 9);
    STRUCT_CHILD_GETTERS(inDstNullDiscards_, 10);
    STRUCT_CHILD_GETTERS(inDiscardsRaw_, 11);
    STRUCT_CHILD_GETTERS(outBytes_, 12);
    STRUCT_CHILD_GETTERS(outUnicastPkts_, 13);
    STRUCT_CHILD_GETTERS(outMulticastPkts_, 14);
    STRUCT_CHILD_GETTERS(outBroadcastPkts_, 15);
    STRUCT_CHILD_GETTERS(outDiscards_, 16);
    STRUCT_CHILD_GETTERS(outErrors_, 17);
    STRUCT_CHILD_GETTERS(outPause_, 18);
    STRUCT_CHILD_GETTERS(outCongestionDiscardPkts_, 19);
    STRUCT_CHILD_GETTERS(wredDroppedPackets_, 20);
    STRUCT_CHILD_GETTERS(queueOutDiscardBytes_, 21);
    STRUCT_CHILD_GETTERS(queueOutBytes_, 22);
    STRUCT_CHILD_GETTERS(outEcnCounter_, 23);
    STRUCT_CHILD_GETTERS(queueOutPackets_, 24);
    STRUCT_CHILD_GETTERS(queueOutDiscardPackets_, 25);
    STRUCT_CHILD_GETTERS(queueWatermarkBytes_, 26);
    STRUCT_CHILD_GETTERS(fecCorrectableErrors, 27);
    STRUCT_CHILD_GETTERS(fecUncorrectableErrors, 28);
    STRUCT_CHILD_GETTERS(inPfcCtrl_, 29);
    STRUCT_CHILD_GETTERS(outPfcCtrl_, 30);
    STRUCT_CHILD_GETTERS(inPfc_, 31);
    STRUCT_CHILD_GETTERS(inPfcXon_, 32);
    STRUCT_CHILD_GETTERS(outPfc_, 33);
    STRUCT_CHILD_GETTERS(queueWredDroppedPackets_, 34);
    STRUCT_CHILD_GETTERS(queueEcnMarkedPackets_, 35);
    STRUCT_CHILD_GETTERS(fecCorrectedBits_, 36);
    STRUCT_CHILD_GETTERS(fecCodewords_, 37);
    STRUCT_CHILD_GETTERS(pqpErrorEgressDroppedPackets_, 38);
    STRUCT_CHILD_GETTERS(fabricLinkDownDroppedCells_, 39);
    STRUCT_CHILD_GETTERS(timestamp_, 50);
    STRUCT_CHILD_GETTERS(portName_, 51);
    STRUCT_CHILD_GETTERS(macsecStats, 52);
    STRUCT_CHILD_GETTERS(inLabelMissDiscards_, 53);
    STRUCT_CHILD_GETTERS(queueWatermarkLevel_, 54);
    STRUCT_CHILD_GETTERS(inCongestionDiscards_, 55);
    STRUCT_CHILD_GETTERS(inAclDiscards_, 56);
    STRUCT_CHILD_GETTERS(inTrapDiscards_, 57);
    STRUCT_CHILD_GETTERS(outForwardingDiscards_, 58);
    STRUCT_CHILD_GETTERS(fabricConnectivityMismatch_DEPRECATED, 59);
    STRUCT_CHILD_GETTERS(logicalPortId, 60);
    STRUCT_CHILD_GETTERS(leakyBucketFlapCount_, 61);
    STRUCT_CHILD_GETTERS(cableLengthMeters, 62);
    STRUCT_CHILD_GETTERS(dataCellsFilterOn, 63);
    STRUCT_CHILD_GETTERS(egressGvoqWatermarkBytes_, 64);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return inBytes_(); }
    else if constexpr (__id == 2) { return inUnicastPkts_(); }
    else if constexpr (__id == 3) { return inMulticastPkts_(); }
    else if constexpr (__id == 4) { return inBroadcastPkts_(); }
    else if constexpr (__id == 5) { return inDiscards_(); }
    else if constexpr (__id == 6) { return inErrors_(); }
    else if constexpr (__id == 7) { return inPause_(); }
    else if constexpr (__id == 8) { return inIpv4HdrErrors_(); }
    else if constexpr (__id == 9) { return inIpv6HdrErrors_(); }
    else if constexpr (__id == 10) { return inDstNullDiscards_(); }
    else if constexpr (__id == 11) { return inDiscardsRaw_(); }
    else if constexpr (__id == 12) { return outBytes_(); }
    else if constexpr (__id == 13) { return outUnicastPkts_(); }
    else if constexpr (__id == 14) { return outMulticastPkts_(); }
    else if constexpr (__id == 15) { return outBroadcastPkts_(); }
    else if constexpr (__id == 16) { return outDiscards_(); }
    else if constexpr (__id == 17) { return outErrors_(); }
    else if constexpr (__id == 18) { return outPause_(); }
    else if constexpr (__id == 19) { return outCongestionDiscardPkts_(); }
    else if constexpr (__id == 20) { return wredDroppedPackets_(); }
    else if constexpr (__id == 21) { return queueOutDiscardBytes_(); }
    else if constexpr (__id == 22) { return queueOutBytes_(); }
    else if constexpr (__id == 23) { return outEcnCounter_(); }
    else if constexpr (__id == 24) { return queueOutPackets_(); }
    else if constexpr (__id == 25) { return queueOutDiscardPackets_(); }
    else if constexpr (__id == 26) { return queueWatermarkBytes_(); }
    else if constexpr (__id == 27) { return fecCorrectableErrors(); }
    else if constexpr (__id == 28) { return fecUncorrectableErrors(); }
    else if constexpr (__id == 29) { return inPfcCtrl_(); }
    else if constexpr (__id == 30) { return outPfcCtrl_(); }
    else if constexpr (__id == 31) { return inPfc_(); }
    else if constexpr (__id == 32) { return inPfcXon_(); }
    else if constexpr (__id == 33) { return outPfc_(); }
    else if constexpr (__id == 34) { return queueWredDroppedPackets_(); }
    else if constexpr (__id == 35) { return queueEcnMarkedPackets_(); }
    else if constexpr (__id == 36) { return fecCorrectedBits_(); }
    else if constexpr (__id == 37) { return fecCodewords_(); }
    else if constexpr (__id == 38) { return pqpErrorEgressDroppedPackets_(); }
    else if constexpr (__id == 39) { return fabricLinkDownDroppedCells_(); }
    else if constexpr (__id == 50) { return timestamp_(); }
    else if constexpr (__id == 51) { return portName_(); }
    else if constexpr (__id == 52) { return macsecStats(); }
    else if constexpr (__id == 53) { return inLabelMissDiscards_(); }
    else if constexpr (__id == 54) { return queueWatermarkLevel_(); }
    else if constexpr (__id == 55) { return inCongestionDiscards_(); }
    else if constexpr (__id == 56) { return inAclDiscards_(); }
    else if constexpr (__id == 57) { return inTrapDiscards_(); }
    else if constexpr (__id == 58) { return outForwardingDiscards_(); }
    else if constexpr (__id == 59) { return fabricConnectivityMismatch_DEPRECATED(); }
    else if constexpr (__id == 60) { return logicalPortId(); }
    else if constexpr (__id == 61) { return leakyBucketFlapCount_(); }
    else if constexpr (__id == 62) { return cableLengthMeters(); }
    else if constexpr (__id == 63) { return dataCellsFilterOn(); }
    else if constexpr (__id == 64) { return egressGvoqWatermarkBytes_(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwTrunkStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::HwTrunkStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwTrunkStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::HwTrunkStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwTrunkStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HwTrunkStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwBufferPoolStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwBufferPoolStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwBufferPoolStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwBufferPoolStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwBufferPoolStats>,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::deviceWatermarkBytes, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::deviceWatermarkBytes, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(deviceWatermarkBytes, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return deviceWatermarkBytes(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::std::int64_t>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i64_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::std::int64_t>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i64_t>,
   Parent>;
  using Child = Path<::std::int64_t, ::facebook::fboss::fsdb::FsdbOperStatsRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::CpuPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::CpuPortStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::CpuPortStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::CpuPortStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::CpuPortStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::CpuPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::RsFecInfo, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::RsFecInfo,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::RsFecInfo>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::RsFecInfo,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::RsFecInfo>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::correctedCodewords, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::uncorrectedCodewords, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::correctedBits, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::preFECBer, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
std::pair<strings::codewordStats, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<double, ::apache::thrift::type_class::floating_point, ::apache::thrift::type::double_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::correctedCodewords, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::uncorrectedCodewords, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::correctedBits, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::preFECBer, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::codewordStats, std::integral_constant<apache::thrift::field_id_t, 5>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(correctedCodewords, 1);
    STRUCT_CHILD_GETTERS(uncorrectedCodewords, 2);
    STRUCT_CHILD_GETTERS(correctedBits, 3);
    STRUCT_CHILD_GETTERS(preFECBer, 4);
    STRUCT_CHILD_GETTERS(codewordStats, 5);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return correctedCodewords(); }
    else if constexpr (__id == 2) { return uncorrectedCodewords(); }
    else if constexpr (__id == 3) { return correctedBits(); }
    else if constexpr (__id == 4) { return preFECBer(); }
    else if constexpr (__id == 5) { return codewordStats(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::TcvrStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::facebook::fboss::TcvrStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::facebook::fboss::TcvrStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::facebook::fboss::TcvrStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::facebook::fboss::TcvrStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::TcvrStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwTeFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::HwTeFlowStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwTeFlowStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::HwTeFlowStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwTeFlowStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HwTeFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwAgentEventSyncStatus>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::HwAgentEventSyncStatus>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwAgentEventSyncStatus>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::HwAgentEventSyncStatus>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwAgentEventSyncStatus>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HwAgentEventSyncStatus, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwAsicErrors>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::HwAsicErrors>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwAsicErrors>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::HwAsicErrors>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwAsicErrors>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HwAsicErrors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::stats::SensorServiceStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::stats::SensorServiceStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::stats::SensorServiceStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::stats::SensorServiceStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::stats::SensorServiceStats>,
   Parent>;
  using strings = ::facebook::fboss::stats::sensor_service_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::sensorData, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::platform::sensor_service::SensorData>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::platform::sensor_service::SensorData>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::sensorData, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(sensorData, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return sensorData(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwResourceStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::HwResourceStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwResourceStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::HwResourceStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwResourceStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HwResourceStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::AgentStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::AgentStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::AgentStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::AgentStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::AgentStats>,
   Parent>;
  using strings = ::facebook::fboss::agent_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::hwPortStats, ChildThriftPath<folly::F14FastMap<::std::string, ::facebook::fboss::HwPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::hwTrunkStats, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwTrunkStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::hwResourceStats, ChildThriftPath<::facebook::fboss::HwResourceStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::hwAsicErrors, ChildThriftPath<::facebook::fboss::HwAsicErrors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::linkFlaps, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::sysPortStats, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwSysPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::teFlowStats, ChildThriftPath<::facebook::fboss::TeFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::bufferPoolStats, ChildThriftPath<::facebook::fboss::HwBufferPoolStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::hwResourceStatsMap, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwResourceStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::hwAsicErrorsMap, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwAsicErrors>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::teFlowStatsMap, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::TeFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::bufferPoolStatsMap_DEPRECATED, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwBufferPoolStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::sysPortStatsMap, ChildThriftPath<::std::map<::std::int16_t, ::std::map<::std::string, ::facebook::fboss::HwSysPortStats>>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::switchDropStatsMap, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwSwitchDropStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::flowletStats, ChildThriftPath<::facebook::fboss::HwFlowletStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::phyStats, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::phy::PhyStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::flowletStatsMap, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwFlowletStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::trappedPktsDropped, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::threadHeartBeatMiss, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::cpuPortStatsMap, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::CpuPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::hwagentConnectionStatus, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::hwagentOperSyncTimeoutCount, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::hwAgentEventSyncStatusMap, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwAgentEventSyncStatus>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::fabricOverdrainPct, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::switchWatermarkStatsMap, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwSwitchWatermarkStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::fabricReachabilityStatsMap, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::FabricReachabilityStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<folly::F14FastMap<::std::string, ::facebook::fboss::HwPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwTrunkStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::HwResourceStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::HwAsicErrors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwSysPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::facebook::fboss::TeFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::facebook::fboss::HwBufferPoolStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwResourceStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwAsicErrors>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::TeFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwBufferPoolStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, ChildThriftPath<::std::map<::std::int16_t, ::std::map<::std::string, ::facebook::fboss::HwSysPortStats>>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwSwitchDropStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, ChildThriftPath<::facebook::fboss::HwFlowletStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::phy::PhyStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwFlowletStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::CpuPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwAgentEventSyncStatus>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwSwitchWatermarkStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::FabricReachabilityStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::hwPortStats, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::hwTrunkStats, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::hwResourceStats, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::hwAsicErrors, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::linkFlaps, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::sysPortStats, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::teFlowStats, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::bufferPoolStats, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::hwResourceStatsMap, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::hwAsicErrorsMap, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::teFlowStatsMap, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::bufferPoolStatsMap_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::sysPortStatsMap, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::switchDropStatsMap, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::flowletStats, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::phyStats, std::integral_constant<apache::thrift::field_id_t, 17>>,
std::pair<strings::flowletStatsMap, std::integral_constant<apache::thrift::field_id_t, 18>>,
std::pair<strings::trappedPktsDropped, std::integral_constant<apache::thrift::field_id_t, 19>>,
std::pair<strings::threadHeartBeatMiss, std::integral_constant<apache::thrift::field_id_t, 20>>,
std::pair<strings::cpuPortStatsMap, std::integral_constant<apache::thrift::field_id_t, 21>>,
std::pair<strings::hwagentConnectionStatus, std::integral_constant<apache::thrift::field_id_t, 22>>,
std::pair<strings::hwagentOperSyncTimeoutCount, std::integral_constant<apache::thrift::field_id_t, 23>>,
std::pair<strings::hwAgentEventSyncStatusMap, std::integral_constant<apache::thrift::field_id_t, 24>>,
std::pair<strings::fabricOverdrainPct, std::integral_constant<apache::thrift::field_id_t, 25>>,
std::pair<strings::switchWatermarkStatsMap, std::integral_constant<apache::thrift::field_id_t, 26>>,
std::pair<strings::fabricReachabilityStatsMap, std::integral_constant<apache::thrift::field_id_t, 27>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(hwPortStats, 1);
    STRUCT_CHILD_GETTERS(hwTrunkStats, 2);
    STRUCT_CHILD_GETTERS(hwResourceStats, 3);
    STRUCT_CHILD_GETTERS(hwAsicErrors, 4);
    STRUCT_CHILD_GETTERS(linkFlaps, 5);
    STRUCT_CHILD_GETTERS(sysPortStats, 7);
    STRUCT_CHILD_GETTERS(teFlowStats, 8);
    STRUCT_CHILD_GETTERS(bufferPoolStats, 9);
    STRUCT_CHILD_GETTERS(hwResourceStatsMap, 10);
    STRUCT_CHILD_GETTERS(hwAsicErrorsMap, 11);
    STRUCT_CHILD_GETTERS(teFlowStatsMap, 12);
    STRUCT_CHILD_GETTERS(bufferPoolStatsMap_DEPRECATED, 13);
    STRUCT_CHILD_GETTERS(sysPortStatsMap, 14);
    STRUCT_CHILD_GETTERS(switchDropStatsMap, 15);
    STRUCT_CHILD_GETTERS(flowletStats, 16);
    STRUCT_CHILD_GETTERS(phyStats, 17);
    STRUCT_CHILD_GETTERS(flowletStatsMap, 18);
    STRUCT_CHILD_GETTERS(trappedPktsDropped, 19);
    STRUCT_CHILD_GETTERS(threadHeartBeatMiss, 20);
    STRUCT_CHILD_GETTERS(cpuPortStatsMap, 21);
    STRUCT_CHILD_GETTERS(hwagentConnectionStatus, 22);
    STRUCT_CHILD_GETTERS(hwagentOperSyncTimeoutCount, 23);
    STRUCT_CHILD_GETTERS(hwAgentEventSyncStatusMap, 24);
    STRUCT_CHILD_GETTERS(fabricOverdrainPct, 25);
    STRUCT_CHILD_GETTERS(switchWatermarkStatsMap, 26);
    STRUCT_CHILD_GETTERS(fabricReachabilityStatsMap, 27);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return hwPortStats(); }
    else if constexpr (__id == 2) { return hwTrunkStats(); }
    else if constexpr (__id == 3) { return hwResourceStats(); }
    else if constexpr (__id == 4) { return hwAsicErrors(); }
    else if constexpr (__id == 5) { return linkFlaps(); }
    else if constexpr (__id == 7) { return sysPortStats(); }
    else if constexpr (__id == 8) { return teFlowStats(); }
    else if constexpr (__id == 9) { return bufferPoolStats(); }
    else if constexpr (__id == 10) { return hwResourceStatsMap(); }
    else if constexpr (__id == 11) { return hwAsicErrorsMap(); }
    else if constexpr (__id == 12) { return teFlowStatsMap(); }
    else if constexpr (__id == 13) { return bufferPoolStatsMap_DEPRECATED(); }
    else if constexpr (__id == 14) { return sysPortStatsMap(); }
    else if constexpr (__id == 15) { return switchDropStatsMap(); }
    else if constexpr (__id == 16) { return flowletStats(); }
    else if constexpr (__id == 17) { return phyStats(); }
    else if constexpr (__id == 18) { return flowletStatsMap(); }
    else if constexpr (__id == 19) { return trappedPktsDropped(); }
    else if constexpr (__id == 20) { return threadHeartBeatMiss(); }
    else if constexpr (__id == 21) { return cpuPortStatsMap(); }
    else if constexpr (__id == 22) { return hwagentConnectionStatus(); }
    else if constexpr (__id == 23) { return hwagentOperSyncTimeoutCount(); }
    else if constexpr (__id == 24) { return hwAgentEventSyncStatusMap(); }
    else if constexpr (__id == 25) { return fabricOverdrainPct(); }
    else if constexpr (__id == 26) { return switchWatermarkStatsMap(); }
    else if constexpr (__id == 27) { return fabricReachabilityStatsMap(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwSysPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::HwSysPortStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwSysPortStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::HwSysPortStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwSysPortStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HwSysPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::EyeInfo, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::EyeInfo,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::EyeInfo>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::EyeInfo,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::EyeInfo>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::width, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::height, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::width, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::height, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(width, 1);
    STRUCT_CHILD_GETTERS(height, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return width(); }
    else if constexpr (__id == 2) { return height(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwSwitchDropStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::HwSwitchDropStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwSwitchDropStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::HwSwitchDropStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwSwitchDropStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HwSwitchDropStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};

template<typename Parent>
class ChildThriftPath<folly::F14FastMap<::std::string, ::facebook::fboss::HwPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   folly::F14FastMap<::std::string, ::facebook::fboss::HwPortStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::cpp_type<folly::F14FastMap<::std::string, ::facebook::fboss::HwPortStats>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwPortStats>>>,
   Parent> {
 public:
  using Self = Path<
   folly::F14FastMap<::std::string, ::facebook::fboss::HwPortStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::cpp_type<folly::F14FastMap<::std::string, ::facebook::fboss::HwPortStats>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwPortStats>>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HwPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::string_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,
   ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::string_t>,
   Parent>;
  using Child = Path<::std::string, ::facebook::fboss::fsdb::FsdbOperStatsRoot, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::platform::sensor_service::SensorData>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::platform::sensor_service::SensorData>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::platform::sensor_service::SensorData>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::platform::sensor_service::SensorData>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::platform::sensor_service::SensorData>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::platform::sensor_service::SensorData, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwAgentEventSyncStatus, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwAgentEventSyncStatus,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwAgentEventSyncStatus>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwAgentEventSyncStatus,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwAgentEventSyncStatus>,
   Parent>;
  using strings = ::facebook::fboss::agent_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::statsEventSyncActive, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::fdbEventSyncActive, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::linkEventSyncActive, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::linkActiveEventSyncActive_DEPRECATED, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::rxPktEventSyncActive, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::txPktEventSyncActive, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::statsEventSyncDisconnects, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::fdbEventSyncDisconnects, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::linkEventSyncDisconnects, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::linkActiveEventSyncDisconnects_DEPRECATED, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::rxPktEventSyncDisconnects, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::txPktEventSyncDisconnects, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::switchReachabilityChangeEventSyncActive, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
std::pair<strings::switchReachabilityChangeEventSyncDisconnects, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int32_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::statsEventSyncActive, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::fdbEventSyncActive, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::linkEventSyncActive, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::linkActiveEventSyncActive_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::rxPktEventSyncActive, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::txPktEventSyncActive, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::statsEventSyncDisconnects, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::fdbEventSyncDisconnects, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::linkEventSyncDisconnects, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::linkActiveEventSyncDisconnects_DEPRECATED, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::rxPktEventSyncDisconnects, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::txPktEventSyncDisconnects, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::switchReachabilityChangeEventSyncActive, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::switchReachabilityChangeEventSyncDisconnects, std::integral_constant<apache::thrift::field_id_t, 14>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(statsEventSyncActive, 1);
    STRUCT_CHILD_GETTERS(fdbEventSyncActive, 2);
    STRUCT_CHILD_GETTERS(linkEventSyncActive, 3);
    STRUCT_CHILD_GETTERS(linkActiveEventSyncActive_DEPRECATED, 4);
    STRUCT_CHILD_GETTERS(rxPktEventSyncActive, 5);
    STRUCT_CHILD_GETTERS(txPktEventSyncActive, 6);
    STRUCT_CHILD_GETTERS(statsEventSyncDisconnects, 7);
    STRUCT_CHILD_GETTERS(fdbEventSyncDisconnects, 8);
    STRUCT_CHILD_GETTERS(linkEventSyncDisconnects, 9);
    STRUCT_CHILD_GETTERS(linkActiveEventSyncDisconnects_DEPRECATED, 10);
    STRUCT_CHILD_GETTERS(rxPktEventSyncDisconnects, 11);
    STRUCT_CHILD_GETTERS(txPktEventSyncDisconnects, 12);
    STRUCT_CHILD_GETTERS(switchReachabilityChangeEventSyncActive, 13);
    STRUCT_CHILD_GETTERS(switchReachabilityChangeEventSyncDisconnects, 14);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return statsEventSyncActive(); }
    else if constexpr (__id == 2) { return fdbEventSyncActive(); }
    else if constexpr (__id == 3) { return linkEventSyncActive(); }
    else if constexpr (__id == 4) { return linkActiveEventSyncActive_DEPRECATED(); }
    else if constexpr (__id == 5) { return rxPktEventSyncActive(); }
    else if constexpr (__id == 6) { return txPktEventSyncActive(); }
    else if constexpr (__id == 7) { return statsEventSyncDisconnects(); }
    else if constexpr (__id == 8) { return fdbEventSyncDisconnects(); }
    else if constexpr (__id == 9) { return linkEventSyncDisconnects(); }
    else if constexpr (__id == 10) { return linkActiveEventSyncDisconnects_DEPRECATED(); }
    else if constexpr (__id == 11) { return rxPktEventSyncDisconnects(); }
    else if constexpr (__id == 12) { return txPktEventSyncDisconnects(); }
    else if constexpr (__id == 13) { return switchReachabilityChangeEventSyncActive(); }
    else if constexpr (__id == 14) { return switchReachabilityChangeEventSyncDisconnects(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwSysPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwSysPortStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwSysPortStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwSysPortStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwSysPortStats>,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::queueOutDiscardBytes_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::queueOutBytes_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::queueWatermarkBytes_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::queueWredDroppedPackets_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::queueCreditWatchdogDeletedPackets_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::queueLatencyWatermarkNsec_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::timestamp_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::portName_, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 100>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 101>, Child<::std::string, ::apache::thrift::type_class::string, ::apache::thrift::type::string_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::queueOutDiscardBytes_, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::queueOutBytes_, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::queueWatermarkBytes_, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::queueWredDroppedPackets_, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::queueCreditWatchdogDeletedPackets_, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::queueLatencyWatermarkNsec_, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::timestamp_, std::integral_constant<apache::thrift::field_id_t, 100>>,
std::pair<strings::portName_, std::integral_constant<apache::thrift::field_id_t, 101>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(queueOutDiscardBytes_, 1);
    STRUCT_CHILD_GETTERS(queueOutBytes_, 2);
    STRUCT_CHILD_GETTERS(queueWatermarkBytes_, 3);
    STRUCT_CHILD_GETTERS(queueWredDroppedPackets_, 4);
    STRUCT_CHILD_GETTERS(queueCreditWatchdogDeletedPackets_, 5);
    STRUCT_CHILD_GETTERS(queueLatencyWatermarkNsec_, 6);
    STRUCT_CHILD_GETTERS(timestamp_, 100);
    STRUCT_CHILD_GETTERS(portName_, 101);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return queueOutDiscardBytes_(); }
    else if constexpr (__id == 2) { return queueOutBytes_(); }
    else if constexpr (__id == 3) { return queueWatermarkBytes_(); }
    else if constexpr (__id == 4) { return queueWredDroppedPackets_(); }
    else if constexpr (__id == 5) { return queueCreditWatchdogDeletedPackets_(); }
    else if constexpr (__id == 6) { return queueLatencyWatermarkNsec_(); }
    else if constexpr (__id == 100) { return timestamp_(); }
    else if constexpr (__id == 101) { return portName_(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PcsStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PcsStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PcsStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PcsStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::phy::PcsStats>,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::rsFec, ChildThriftPath<::facebook::fboss::phy::RsFecInfo, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::phy::RsFecInfo, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::rsFec, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(rsFec, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return rsFec(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwTrunkStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwTrunkStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwTrunkStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwTrunkStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwTrunkStats>,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::capacity_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inBytes_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inUnicastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inMulticastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inBroadcastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inErrors_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inPause_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inIpv4HdrErrors_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inIpv6HdrErrors_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inDstNullDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inDiscardsRaw_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outBytes_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outUnicastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outMulticastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outBroadcastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outErrors_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outPause_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outCongestionDiscardPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outEcnCounter_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::wredDroppedPackets_, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::macsecStats, ChildThriftPath<::facebook::fboss::MacsecStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, ChildThriftPath<::facebook::fboss::MacsecStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::capacity_, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::inBytes_, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::inUnicastPkts_, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::inMulticastPkts_, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::inBroadcastPkts_, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::inDiscards_, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::inErrors_, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::inPause_, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::inIpv4HdrErrors_, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::inIpv6HdrErrors_, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::inDstNullDiscards_, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::inDiscardsRaw_, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::outBytes_, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::outUnicastPkts_, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::outMulticastPkts_, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::outBroadcastPkts_, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::outDiscards_, std::integral_constant<apache::thrift::field_id_t, 17>>,
std::pair<strings::outErrors_, std::integral_constant<apache::thrift::field_id_t, 18>>,
std::pair<strings::outPause_, std::integral_constant<apache::thrift::field_id_t, 19>>,
std::pair<strings::outCongestionDiscardPkts_, std::integral_constant<apache::thrift::field_id_t, 20>>,
std::pair<strings::outEcnCounter_, std::integral_constant<apache::thrift::field_id_t, 21>>,
std::pair<strings::wredDroppedPackets_, std::integral_constant<apache::thrift::field_id_t, 22>>,
std::pair<strings::macsecStats, std::integral_constant<apache::thrift::field_id_t, 23>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(capacity_, 1);
    STRUCT_CHILD_GETTERS(inBytes_, 2);
    STRUCT_CHILD_GETTERS(inUnicastPkts_, 3);
    STRUCT_CHILD_GETTERS(inMulticastPkts_, 4);
    STRUCT_CHILD_GETTERS(inBroadcastPkts_, 5);
    STRUCT_CHILD_GETTERS(inDiscards_, 6);
    STRUCT_CHILD_GETTERS(inErrors_, 7);
    STRUCT_CHILD_GETTERS(inPause_, 8);
    STRUCT_CHILD_GETTERS(inIpv4HdrErrors_, 9);
    STRUCT_CHILD_GETTERS(inIpv6HdrErrors_, 10);
    STRUCT_CHILD_GETTERS(inDstNullDiscards_, 11);
    STRUCT_CHILD_GETTERS(inDiscardsRaw_, 12);
    STRUCT_CHILD_GETTERS(outBytes_, 13);
    STRUCT_CHILD_GETTERS(outUnicastPkts_, 14);
    STRUCT_CHILD_GETTERS(outMulticastPkts_, 15);
    STRUCT_CHILD_GETTERS(outBroadcastPkts_, 16);
    STRUCT_CHILD_GETTERS(outDiscards_, 17);
    STRUCT_CHILD_GETTERS(outErrors_, 18);
    STRUCT_CHILD_GETTERS(outPause_, 19);
    STRUCT_CHILD_GETTERS(outCongestionDiscardPkts_, 20);
    STRUCT_CHILD_GETTERS(outEcnCounter_, 21);
    STRUCT_CHILD_GETTERS(wredDroppedPackets_, 22);
    STRUCT_CHILD_GETTERS(macsecStats, 23);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return capacity_(); }
    else if constexpr (__id == 2) { return inBytes_(); }
    else if constexpr (__id == 3) { return inUnicastPkts_(); }
    else if constexpr (__id == 4) { return inMulticastPkts_(); }
    else if constexpr (__id == 5) { return inBroadcastPkts_(); }
    else if constexpr (__id == 6) { return inDiscards_(); }
    else if constexpr (__id == 7) { return inErrors_(); }
    else if constexpr (__id == 8) { return inPause_(); }
    else if constexpr (__id == 9) { return inIpv4HdrErrors_(); }
    else if constexpr (__id == 10) { return inIpv6HdrErrors_(); }
    else if constexpr (__id == 11) { return inDstNullDiscards_(); }
    else if constexpr (__id == 12) { return inDiscardsRaw_(); }
    else if constexpr (__id == 13) { return outBytes_(); }
    else if constexpr (__id == 14) { return outUnicastPkts_(); }
    else if constexpr (__id == 15) { return outMulticastPkts_(); }
    else if constexpr (__id == 16) { return outBroadcastPkts_(); }
    else if constexpr (__id == 17) { return outDiscards_(); }
    else if constexpr (__id == 18) { return outErrors_(); }
    else if constexpr (__id == 19) { return outPause_(); }
    else if constexpr (__id == 20) { return outCongestionDiscardPkts_(); }
    else if constexpr (__id == 21) { return outEcnCounter_(); }
    else if constexpr (__id == 22) { return wredDroppedPackets_(); }
    else if constexpr (__id == 23) { return macsecStats(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::FabricReachabilityStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::FabricReachabilityStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::FabricReachabilityStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::FabricReachabilityStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::FabricReachabilityStats>,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::mismatchCount, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::missingCount, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::virtualDevicesWithAsymmetricConnectivity, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::switchReachabilityChangeCount, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::mismatchCount, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::missingCount, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::virtualDevicesWithAsymmetricConnectivity, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::switchReachabilityChangeCount, std::integral_constant<apache::thrift::field_id_t, 4>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(mismatchCount, 1);
    STRUCT_CHILD_GETTERS(missingCount, 2);
    STRUCT_CHILD_GETTERS(virtualDevicesWithAsymmetricConnectivity, 3);
    STRUCT_CHILD_GETTERS(switchReachabilityChangeCount, 4);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return mismatchCount(); }
    else if constexpr (__id == 2) { return missingCount(); }
    else if constexpr (__id == 3) { return virtualDevicesWithAsymmetricConnectivity(); }
    else if constexpr (__id == 4) { return switchReachabilityChangeCount(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::FabricReachabilityStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::FabricReachabilityStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::FabricReachabilityStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::FabricReachabilityStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::FabricReachabilityStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::FabricReachabilityStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::std::vector<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::std::vector<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,
   ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
   Parent>;
  using Child = ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i16_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i16_t>,
   Parent>;
  using Child = Path<::std::int16_t, ::facebook::fboss::fsdb::FsdbOperStatsRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::i16_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::mka::MacsecFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::mka::MacsecFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::mka::MacsecFlowStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::mka::MacsecFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::mka::MacsecFlowStats>,
   Parent>;
  using strings = ::facebook::fboss::mka::mka_structs_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::directionIngress, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
std::pair<strings::ucastUncontrolledPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::ucastControlledPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::mcastUncontrolledPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::mcastControlledPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::bcastUncontrolledPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::bcastControlledPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::controlPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::untaggedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::otherErrPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::octetsUncontrolled, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::octetsControlled, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outCommonOctets, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::outTooLongPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inTaggedControlledPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inNoTagPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::inBadTagPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::noSciPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::unknownSciPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::overrunPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral, ::apache::thrift::type::bool_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::directionIngress, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::ucastUncontrolledPkts, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::ucastControlledPkts, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::mcastUncontrolledPkts, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::mcastControlledPkts, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::bcastUncontrolledPkts, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::bcastControlledPkts, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::controlPkts, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::untaggedPkts, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::otherErrPkts, std::integral_constant<apache::thrift::field_id_t, 10>>,
std::pair<strings::octetsUncontrolled, std::integral_constant<apache::thrift::field_id_t, 11>>,
std::pair<strings::octetsControlled, std::integral_constant<apache::thrift::field_id_t, 12>>,
std::pair<strings::outCommonOctets, std::integral_constant<apache::thrift::field_id_t, 13>>,
std::pair<strings::outTooLongPkts, std::integral_constant<apache::thrift::field_id_t, 14>>,
std::pair<strings::inTaggedControlledPkts, std::integral_constant<apache::thrift::field_id_t, 15>>,
std::pair<strings::inNoTagPkts, std::integral_constant<apache::thrift::field_id_t, 16>>,
std::pair<strings::inBadTagPkts, std::integral_constant<apache::thrift::field_id_t, 17>>,
std::pair<strings::noSciPkts, std::integral_constant<apache::thrift::field_id_t, 18>>,
std::pair<strings::unknownSciPkts, std::integral_constant<apache::thrift::field_id_t, 19>>,
std::pair<strings::overrunPkts, std::integral_constant<apache::thrift::field_id_t, 20>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(directionIngress, 1);
    STRUCT_CHILD_GETTERS(ucastUncontrolledPkts, 2);
    STRUCT_CHILD_GETTERS(ucastControlledPkts, 3);
    STRUCT_CHILD_GETTERS(mcastUncontrolledPkts, 4);
    STRUCT_CHILD_GETTERS(mcastControlledPkts, 5);
    STRUCT_CHILD_GETTERS(bcastUncontrolledPkts, 6);
    STRUCT_CHILD_GETTERS(bcastControlledPkts, 7);
    STRUCT_CHILD_GETTERS(controlPkts, 8);
    STRUCT_CHILD_GETTERS(untaggedPkts, 9);
    STRUCT_CHILD_GETTERS(otherErrPkts, 10);
    STRUCT_CHILD_GETTERS(octetsUncontrolled, 11);
    STRUCT_CHILD_GETTERS(octetsControlled, 12);
    STRUCT_CHILD_GETTERS(outCommonOctets, 13);
    STRUCT_CHILD_GETTERS(outTooLongPkts, 14);
    STRUCT_CHILD_GETTERS(inTaggedControlledPkts, 15);
    STRUCT_CHILD_GETTERS(inNoTagPkts, 16);
    STRUCT_CHILD_GETTERS(inBadTagPkts, 17);
    STRUCT_CHILD_GETTERS(noSciPkts, 18);
    STRUCT_CHILD_GETTERS(unknownSciPkts, 19);
    STRUCT_CHILD_GETTERS(overrunPkts, 20);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return directionIngress(); }
    else if constexpr (__id == 2) { return ucastUncontrolledPkts(); }
    else if constexpr (__id == 3) { return ucastControlledPkts(); }
    else if constexpr (__id == 4) { return mcastUncontrolledPkts(); }
    else if constexpr (__id == 5) { return mcastControlledPkts(); }
    else if constexpr (__id == 6) { return bcastUncontrolledPkts(); }
    else if constexpr (__id == 7) { return bcastControlledPkts(); }
    else if constexpr (__id == 8) { return controlPkts(); }
    else if constexpr (__id == 9) { return untaggedPkts(); }
    else if constexpr (__id == 10) { return otherErrPkts(); }
    else if constexpr (__id == 11) { return octetsUncontrolled(); }
    else if constexpr (__id == 12) { return octetsControlled(); }
    else if constexpr (__id == 13) { return outCommonOctets(); }
    else if constexpr (__id == 14) { return outTooLongPkts(); }
    else if constexpr (__id == 15) { return inTaggedControlledPkts(); }
    else if constexpr (__id == 16) { return inNoTagPkts(); }
    else if constexpr (__id == 17) { return inBadTagPkts(); }
    else if constexpr (__id == 18) { return noSciPkts(); }
    else if constexpr (__id == 19) { return unknownSciPkts(); }
    else if constexpr (__id == 20) { return overrunPkts(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwAsicErrors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwAsicErrors,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwAsicErrors>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwAsicErrors,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwAsicErrors>,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::parityErrors, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::correctedParityErrors, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::uncorrectedParityErrors, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::asicErrors, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::ingressReceiveEditorErrors, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::ingressTransmitPipelineErrors, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::egressPacketNetworkInterfaceErrors, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::alignerErrors, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::forwardingQueueProcessorErrors, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::allReassemblyContextsTaken, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::parityErrors, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::correctedParityErrors, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::uncorrectedParityErrors, std::integral_constant<apache::thrift::field_id_t, 3>>,
std::pair<strings::asicErrors, std::integral_constant<apache::thrift::field_id_t, 4>>,
std::pair<strings::ingressReceiveEditorErrors, std::integral_constant<apache::thrift::field_id_t, 5>>,
std::pair<strings::ingressTransmitPipelineErrors, std::integral_constant<apache::thrift::field_id_t, 6>>,
std::pair<strings::egressPacketNetworkInterfaceErrors, std::integral_constant<apache::thrift::field_id_t, 7>>,
std::pair<strings::alignerErrors, std::integral_constant<apache::thrift::field_id_t, 8>>,
std::pair<strings::forwardingQueueProcessorErrors, std::integral_constant<apache::thrift::field_id_t, 9>>,
std::pair<strings::allReassemblyContextsTaken, std::integral_constant<apache::thrift::field_id_t, 10>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(parityErrors, 1);
    STRUCT_CHILD_GETTERS(correctedParityErrors, 2);
    STRUCT_CHILD_GETTERS(uncorrectedParityErrors, 3);
    STRUCT_CHILD_GETTERS(asicErrors, 4);
    STRUCT_CHILD_GETTERS(ingressReceiveEditorErrors, 5);
    STRUCT_CHILD_GETTERS(ingressTransmitPipelineErrors, 6);
    STRUCT_CHILD_GETTERS(egressPacketNetworkInterfaceErrors, 7);
    STRUCT_CHILD_GETTERS(alignerErrors, 8);
    STRUCT_CHILD_GETTERS(forwardingQueueProcessorErrors, 9);
    STRUCT_CHILD_GETTERS(allReassemblyContextsTaken, 10);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return parityErrors(); }
    else if constexpr (__id == 2) { return correctedParityErrors(); }
    else if constexpr (__id == 3) { return uncorrectedParityErrors(); }
    else if constexpr (__id == 4) { return asicErrors(); }
    else if constexpr (__id == 5) { return ingressReceiveEditorErrors(); }
    else if constexpr (__id == 6) { return ingressTransmitPipelineErrors(); }
    else if constexpr (__id == 7) { return egressPacketNetworkInterfaceErrors(); }
    else if constexpr (__id == 8) { return alignerErrors(); }
    else if constexpr (__id == 9) { return forwardingQueueProcessorErrors(); }
    else if constexpr (__id == 10) { return allReassemblyContextsTaken(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwTeFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwTeFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwTeFlowStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwTeFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::HwTeFlowStats>,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::bytes, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::bytes, std::integral_constant<apache::thrift::field_id_t, 1>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(bytes, 1);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return bytes(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwSwitchWatermarkStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::HwSwitchWatermarkStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwSwitchWatermarkStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::HwSwitchWatermarkStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwSwitchWatermarkStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HwSwitchWatermarkStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::vector<::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
   Parent>;
  using Child = Path<::std::int32_t, ::facebook::fboss::fsdb::FsdbOperStatsRoot, ::apache::thrift::type_class::integral, ::apache::thrift::type::i32_t, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::std::map<::std::string, ::facebook::fboss::HwSysPortStats>>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::std::map<::std::string, ::facebook::fboss::HwSysPortStats>>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwSysPortStats>>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::std::map<::std::string, ::facebook::fboss::HwSysPortStats>>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwSysPortStats>>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwSysPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::TeFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::TeFlowStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::TeFlowStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::TeFlowStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::TeFlowStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::TeFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::mka::MacsecAclStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::mka::MacsecAclStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::mka::MacsecAclStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::mka::MacsecAclStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::mka::MacsecAclStats>,
   Parent>;
  using strings = ::facebook::fboss::mka::mka_structs_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::defaultAclStats, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::controlAclStats, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
std::pair<strings::flowAclStats, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::defaultAclStats, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::controlAclStats, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::flowAclStats, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(defaultAclStats, 1);
    STRUCT_CHILD_GETTERS(controlAclStats, 2);
    STRUCT_CHILD_GETTERS(flowAclStats, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return defaultAclStats(); }
    else if constexpr (__id == 2) { return controlAclStats(); }
    else if constexpr (__id == 3) { return flowAclStats(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::HwBufferPoolStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::HwBufferPoolStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwBufferPoolStats>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::HwBufferPoolStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::struct_t<::facebook::fboss::HwBufferPoolStats>>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HwBufferPoolStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;
  using Self::Self;

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::TeFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::TeFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::TeFlowStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::TeFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::TeFlowStats>,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::hwTeFlowStats, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwTeFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::timestamp, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwTeFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral, ::apache::thrift::type::i64_t>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::hwTeFlowStats, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::timestamp, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(hwTeFlowStats, 1);
    STRUCT_CHILD_GETTERS(timestamp, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return hwTeFlowStats(); }
    else if constexpr (__id == 2) { return timestamp(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::stats::QsfpStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::stats::QsfpStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::stats::QsfpStats>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::stats::QsfpStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::stats::QsfpStats>,
   Parent>;
  using strings = ::facebook::fboss::stats::qsfp_stats_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::phyStats, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::phy::PhyStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::tcvrStats, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::TcvrStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::portStats, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::phy::PhyStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::TcvrStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::phyStats, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::tcvrStats, std::integral_constant<apache::thrift::field_id_t, 2>>,
std::pair<strings::portStats, std::integral_constant<apache::thrift::field_id_t, 3>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(phyStats, 1);
    STRUCT_CHILD_GETTERS(tcvrStats, 2);
    STRUCT_CHILD_GETTERS(portStats, 3);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return phyStats(); }
    else if constexpr (__id == 2) { return tcvrStats(); }
    else if constexpr (__id == 3) { return portStats(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::GlobalSensors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::GlobalSensors,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::GlobalSensors>,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::GlobalSensors,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   ::apache::thrift::type::struct_t<::facebook::fboss::GlobalSensors>,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC, typename ChildTag>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    ChildTag,
    Self
  >;
  using Children = fatal::tuple<std::pair<strings::temp, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
std::pair<strings::vcc, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  template <typename Name>
  using NameToId = fatal::tuple<std::pair<strings::temp, std::integral_constant<apache::thrift::field_id_t, 1>>,
std::pair<strings::vcc, std::integral_constant<apache::thrift::field_id_t, 2>>>::template type_of<Name>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;
  using Self::Self;
  
    STRUCT_CHILD_GETTERS(temp, 1);
    STRUCT_CHILD_GETTERS(vcc, 2);

  template <apache::thrift::field_id_t __id>
  auto operator()(const std::integral_constant<apache::thrift::field_id_t, __id>&) {
    if constexpr (__id == 1) { return temp(); }
    else if constexpr (__id == 2) { return vcc(); }
  }

  template <typename T, T... Values>
  auto operator()(const fatal::sequence<T, Values...>&) {
    return operator()(NameToId<fatal::sequence<T, Values...>>());
  }
};



template<>
class RootThriftPath<::facebook::fboss::fsdb::FsdbOperStatsRoot> :
  public ChildThriftPath<
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   folly::Unit> {
  public:
  using Self = ChildThriftPath<
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   folly::Unit>;

  RootThriftPath(): Self({}, {}, {}, false) {}

};


} // namespace thriftpath
// clang-format on
