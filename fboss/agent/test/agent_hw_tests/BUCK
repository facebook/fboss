load("@fbcode_macros//build_defs:cpp_binary.bzl", "cpp_binary")
load("@fbcode_macros//build_defs:cpp_library.bzl", "cpp_library")
load("//fboss:THIRD-PARTY-VERSIONS.bzl", "BCM_SDKS", "to_impl_suffix", "to_versions")
load("//fboss/agent/hw/sai/impl:impl.bzl", "SAI_BRCM_IMPLS", "SAI_LEABA_IMPLS", "get_link_group_map", "to_impl_bin_name", "to_impl_lib_name")
load("//fboss/agent/hw/sai/switch:switch.bzl", "sai_switch_dependent_name")

oncall("fboss_agent_push")

cpp_library(
    name = "agent_hw_test_src",
    srcs = [
        "Agent2QueueToOlympicQoSTests.cpp",
        "AgentAclCounterTests.cpp",
        "AgentAclInDiscardCounterTests.cpp",
        "AgentAclPriorityTests.cpp",
        "AgentAqmTests.cpp",
        "AgentConfigSetupTest.cpp",
        "AgentConfigVerifyQosTests.cpp",
        "AgentCoppTests.cpp",
        "AgentDeepPacketInspectionTests.cpp",
        "AgentDiagShellStressTests.cpp",
        "AgentDscpMarkingTests.cpp",
        "AgentDscpQueueMappingTests.cpp",
        "AgentEcmpTests.cpp",
        "AgentEgressForwardingDiscardCounterTests.cpp",
        "AgentEmptyTests.cpp",
        "AgentFabricSwitchTests.cpp",
        "AgentFlowletSwitchingTests.cpp",
        "AgentHwAclMatchActionsTest.cpp",
        "AgentHwAclQualifierTest.cpp",
        "AgentHwAclStatTests.cpp",
        "AgentInNullRouteDiscardsTest.cpp",
        "AgentInTrapDiscardsTest.cpp",
        "AgentJumboFramesTests.cpp",
        "AgentL3ForwardingTests.cpp",
        "AgentL4PortBlackholingTests.cpp",
        "AgentLoadBalancerTests.cpp",
        "AgentLoopBackTests.cpp",
        "AgentMacLearningAndNeighborResolutionTests.cpp",
        "AgentMacLearningTests.cpp",
        "AgentMemoryUsageTests.cpp",
        "AgentMirroringTests.cpp",
        "AgentMmuTuningTests.cpp",
        "AgentNeighborTests.cpp",
        "AgentOlympicQosSchedulerTests.cpp",
        "AgentOlympicQosTests.cpp",
        "AgentOverflowTestBase.cpp",
        "AgentPacketSendTests.cpp",
        "AgentPfcTests.cpp",
        "AgentPortBandWidthTests.cpp",
        "AgentPortLedTests.cpp",
        "AgentPortTests.cpp",
        "AgentPrbsTests.cpp",
        "AgentQueuePerHostL2Tests.cpp",
        "AgentQueuePerHostRouteTests.cpp",
        "AgentQueuePerHostTests.cpp",
        "AgentRouteOverDifferentAddressFamilyNhopTests.cpp",
        "AgentRouteOverflowTests.cpp",
        "AgentRouteScaleTests.cpp",
        "AgentRouteTests.cpp",
        "AgentRxReasonTests.cpp",
        "AgentSendPacketToQueueTests.cpp",
        "AgentSflowMirrorTest.cpp",
        "AgentStateReconstructionTests.cpp",
        "AgentSwitchStateReplayTest.cpp",
        "AgentSwitchStatsTxCounterTests.cpp",
        "AgentTrafficPfcTests.cpp",
        "AgentTrunkLoadBalancerTests.cpp",
        "AgentTunnelMgrTests.cpp",
        "AgentVoqSwitchInterruptsTests.cpp",
        "AgentVoqSwitchTests.cpp",
        "AgentWatermarkTests.cpp",
        "MultiNodeAgentVoqSwitchTests.cpp",
    ],
    link_whole = True,
    exported_deps = [
        "fbcode//fb303:service_data",
        "fbcode//fboss/agent:address_utils",
        "fbcode//fboss/agent:agent_features",
        "fbcode//fboss/agent:apply_thrift_config",
        "fbcode//fboss/agent:core",
        "fbcode//fboss/agent:fboss-error",
        "fbcode//fboss/agent:fboss-types",
        "fbcode//fboss/agent:handler",
        "fbcode//fboss/agent:hw_asic_table",
        "fbcode//fboss/agent:load_agent_config",
        "fbcode//fboss/agent:packet",
        "fbcode//fboss/agent:route_update_wrapper",
        "fbcode//fboss/agent:sflow_shim_utils",
        "fbcode//fboss/agent:stats",
        "fbcode//fboss/agent:switch_config-cpp2-types",
        "fbcode//fboss/agent:utils",
        "fbcode//fboss/agent/hw:hw_resource_stats_publisher",
        "fbcode//fboss/agent/hw:hw_switch_fb303_stats",
        "fbcode//fboss/agent/hw/switch_asics:switch_asics",
        "fbcode//fboss/agent/hw/test:config_factory",
        "fbcode//fboss/agent/hw/test:hw_test_acl_utils",
        "fbcode//fboss/agent/hw/test:prod_config_factory",
        "fbcode//fboss/agent/packet:ether_type",
        "fbcode//fboss/agent/packet:packet",
        "fbcode//fboss/agent/packet:packet_factory",
        "fbcode//fboss/agent/packet:pktutil",
        "fbcode//fboss/agent/state:label_forwarding_action",
        "fbcode//fboss/agent/state:state",
        "fbcode//fboss/agent/state:state_utils",
        "fbcode//fboss/agent/test:agent_hw_test",
        "fbcode//fboss/agent/test:ecmp_helper",
        "fbcode//fboss/agent/test:production_features-cpp2-types",
        "fbcode//fboss/agent/test:resourcelibutil",
        "fbcode//fboss/agent/test:route_scale_gen",
        "fbcode//fboss/agent/test:trunk_utils",
        "fbcode//fboss/agent/test:utils",
        "fbcode//fboss/agent/test/utils:acl_test_utils",
        "fbcode//fboss/agent/test/utils:aqm_test_utils",
        "fbcode//fboss/agent/test/utils:asic_test_utils",
        "fbcode//fboss/agent/test/utils:config_utils",
        "fbcode//fboss/agent/test/utils:copp_test_utils",
        "fbcode//fboss/agent/test/utils:dscp_marking_utils",
        "fbcode//fboss/agent/test/utils:dsf_config_utils",
        "fbcode//fboss/agent/test/utils:ecmp_dataplane_test_util",
        "fbcode//fboss/agent/test/utils:fabric_test_utils",
        "fbcode//fboss/agent/test/utils:invariant_test_utils",
        "fbcode//fboss/agent/test/utils:l2learn_observer_util",
        "fbcode//fboss/agent/test/utils:load_balancer_test_runner_h",
        "fbcode//fboss/agent/test/utils:load_balancer_test_utils",
        "fbcode//fboss/agent/test/utils:mac_test_utils",
        "fbcode//fboss/agent/test/utils:mirror_test_utils",
        "fbcode//fboss/agent/test/utils:multi_port_traffic_test_utils",
        "fbcode//fboss/agent/test/utils:olympic_qos_utils",
        "fbcode//fboss/agent/test/utils:packet_snooper",
        "fbcode//fboss/agent/test/utils:pkt_test_utils",
        "fbcode//fboss/agent/test/utils:port_stats_test_utils",
        "fbcode//fboss/agent/test/utils:port_test_utils",
        "fbcode//fboss/agent/test/utils:qos_test_utils",
        "fbcode//fboss/agent/test/utils:queue_per_host_test_utils",
        "fbcode//fboss/agent/test/utils:queue_test_utils",
        "fbcode//fboss/agent/test/utils:route_test_utils",
        "fbcode//fboss/agent/test/utils:scale_test_utils",
        "fbcode//fboss/agent/test/utils:traffic_policy_utils",
        "fbcode//fboss/agent/test/utils:trap_packet_utils",
        "fbcode//fboss/agent/test/utils:voq_test_utils",
        "fbcode//fboss/lib:common_utils",
        "fbcode//folly:file_util",
        "fbcode//folly:network_address",
        "fbcode//folly/json:dynamic",
        "fbcode//folly/logging:logging",
        "fbcode//folly/testing:test_util",
        "fbsource//third-party/googletest:gtest",
        "//fb303:service_data",
        "//fboss/agent:address_utils",
        "//fboss/agent:agent_features",
        "//fboss/agent:apply_thrift_config",
        "//fboss/agent:core",
        "//fboss/agent:fboss-error",
        "//fboss/agent:fboss-types",
        "//fboss/agent:handler",
        "//fboss/agent:hw_asic_table",
        "//fboss/agent:load_agent_config",
        "//fboss/agent:packet",
        "//fboss/agent:route_update_wrapper",
        "//fboss/agent:sflow_shim_utils",
        "//fboss/agent:stats",
        "//fboss/agent:switch_config-cpp2-types",
        "//fboss/agent:utils",
        "//fboss/agent/hw:hw_resource_stats_publisher",
        "//fboss/agent/hw:hw_switch_fb303_stats",
        "//fboss/agent/hw/switch_asics:switch_asics",
        "//fboss/agent/hw/test:config_factory",
        "//fboss/agent/hw/test:hw_test_acl_utils",
        "//fboss/agent/hw/test:prod_config_factory",
        "//fboss/agent/if:common-cpp2-types",
        "//fboss/agent/packet:ether_type",
        "//fboss/agent/packet:packet",
        "//fboss/agent/packet:packet_factory",
        "//fboss/agent/packet:pktutil",
        "//fboss/agent/rib:fib_updater",
        "//fboss/agent/state:label_forwarding_action",
        "//fboss/agent/state:nodebase",
        "//fboss/agent/state:state",
        "//fboss/agent/state:state_utils",
        "//fboss/agent/test:agent_ensemble",
        "//fboss/agent/test:agent_hw_test",
        "//fboss/agent/test:ecmp_helper",
        "//fboss/agent/test:production_features-cpp2-types",
        "//fboss/agent/test:resourcelibutil",
        "//fboss/agent/test:route_scale_gen",
        "//fboss/agent/test:trunk_utils",
        "//fboss/agent/test:utils",
        "//fboss/agent/test/utils:acl_test_utils",
        "//fboss/agent/test/utils:aqm_test_utils",
        "//fboss/agent/test/utils:asic_test_utils",
        "//fboss/agent/test/utils:config_utils",
        "//fboss/agent/test/utils:copp_test_utils",
        "//fboss/agent/test/utils:dscp_marking_utils",
        "//fboss/agent/test/utils:ecmp_dataplane_test_util",
        "//fboss/agent/test/utils:fabric_test_utils",
        "//fboss/agent/test/utils:invariant_test_utils",
        "//fboss/agent/test/utils:l2learn_observer_util",
        "//fboss/agent/test/utils:load_balancer_test_runner_h",
        "//fboss/agent/test/utils:load_balancer_test_utils",
        "//fboss/agent/test/utils:mac_test_utils",
        "//fboss/agent/test/utils:mirror_test_utils",
        "//fboss/agent/test/utils:olympic_qos_utils",
        "//fboss/agent/test/utils:packet_snooper",
        "//fboss/agent/test/utils:pfc_test_utils",
        "//fboss/agent/test/utils:pkt_test_utils",
        "//fboss/agent/test/utils:port_stats_test_utils",
        "//fboss/agent/test/utils:port_test_utils",
        "//fboss/agent/test/utils:qos_test_utils",
        "//fboss/agent/test/utils:queue_per_host_test_utils",
        "//fboss/agent/test/utils:queue_test_utils",
        "//fboss/agent/test/utils:route_test_utils",
        "//fboss/agent/test/utils:scale_test_utils",
        "//fboss/agent/test/utils:traffic_policy_utils",
        "//fboss/agent/test/utils:trap_packet_utils",
        "//fboss/agent/test/utils:voq_test_utils",
        "//fboss/lib:common_utils",
        "//folly:file_util",
        "//folly:map_util",
        "//folly:network_address",
        "//folly/json:dynamic",
        "//folly/logging:logging",
        "//folly/memory:mallctl_helper",
        "//folly/testing:test_util",
    ],
    exported_external_deps = [
        ("boost", None, "boost_container"),
        ("boost", None, "boost_range"),
    ],
)

cpp_library(
    name = "agent_scale_test_src",
    srcs = [
        "AgentAclScaleTests.cpp",
        "AgentEcmpScaleTests.cpp",
    ],
    link_whole = True,
    exported_deps = [
        "//fboss/agent/hw/test:config_factory",
        "//fboss/agent/packet:packet_factory",
        "//fboss/agent/test:agent_hw_test",
        "//fboss/agent/test:ecmp_helper",
        "//fboss/agent/test:production_features-cpp2-types",
        "//fboss/agent/test/utils:acl_test_utils",
        "//fboss/agent/test/utils:asic_test_utils",
        "//fboss/agent/test/utils:scale_test_utils",
        "//folly:network_address",
    ],
)

cpp_binary(
    name = "multi_switch_agent_hw_test",
    srcs = [
        "MultiSwitchAgentHwTest.cpp",
    ],
    deps = [
        "fbsource//third-party/googletest:gtest",
        ":agent_hw_test_src",
        "//fboss/agent/test:agent_hw_test",
        "//fboss/agent/test:multi_switch_agent_ensemble",
        "//folly/logging:init",
    ],
)

[
    cpp_binary(
        name = "bcm_agent_hw_test{}".format(to_impl_suffix(sdk)),
        srcs = [
            "BcmAgentHwTest.cpp",
        ],
        versions = to_versions(sdk),
        deps = [
            "fbsource//third-party/googletest:gtest",
            ":agent_hw_test_src",
            "//fboss/agent:main-bcm",
            "//fboss/agent/hw/bcm/tests:agent_hw_test_thrift_handler",
            "//fboss/agent/hw/bcm/tests:bcm_acl_utils",
            "//fboss/agent/hw/bcm/tests:bcm_copp_utils",
            "//fboss/agent/hw/bcm/tests:bcm_ecmp_utils",
            "//fboss/agent/hw/bcm/tests:bcm_linkstate_toggler",
            "//fboss/agent/platforms/wedge:platform",
            "//fboss/agent/test:agent_hw_test",
            "//fboss/agent/test:mono_agent_ensemble",
        ],
        external_deps = [
            "gflags",
            "glog",
        ],
    )
    for sdk in BCM_SDKS
]

_sai_agent_hw_test_prefix = "sai_agent_hw_test"

[
    cpp_binary(
        name = to_impl_bin_name(sai_impl, _sai_agent_hw_test_prefix),
        srcs = [
            "SaiAgentHwTest.cpp",
        ],
        link_group_map = get_link_group_map(
            to_impl_bin_name(sai_impl, _sai_agent_hw_test_prefix),
            sai_impl,
        ),
        versions = {
            sai_impl.sdk_name: sai_impl.version,
        },
        deps = [
            ":agent_hw_test_src",
            "//fboss/agent:main-sai-{}".format(to_impl_lib_name(sai_impl)),
            "//fboss/agent/hw/sai/hw_test:sai_acl_utils{}".format(to_impl_suffix(sai_impl)),
            "//fboss/agent/hw/sai/hw_test:sai_copp_utils{}".format(to_impl_suffix(sai_impl)),
            "//fboss/agent/platforms/sai:{}".format(sai_switch_dependent_name("sai_platform", sai_impl, True)),
            "//fboss/agent/test:agent_hw_test",
            "//fboss/agent/test:linkstate_toggler",
            "//fboss/agent/test:mono_agent_ensemble",
            "//fboss/agent/hw/sai/hw_test:{}".format(sai_switch_dependent_name("agent_hw_test_thrift_handler", sai_impl, True)),
        ] + (["//fboss/agent/platforms/sai:bcm-required-symbols"] if sai_impl.name == "fake" or sai_impl.name == "leaba" else []),
    )
    for sai_impl in SAI_BRCM_IMPLS + SAI_LEABA_IMPLS
]

_sai_agent_scale_test_prefix = "sai_agent_scale_test"

[
    cpp_binary(
        name = to_impl_bin_name(sai_impl, _sai_agent_scale_test_prefix),
        srcs = [
            "SaiAgentHwTest.cpp",
        ],
        link_group_map = get_link_group_map(
            to_impl_bin_name(sai_impl, _sai_agent_scale_test_prefix),
            sai_impl,
        ),
        versions = {
            sai_impl.sdk_name: sai_impl.version,
        },
        deps = [
            "fbsource//third-party/googletest:gtest",
            ":agent_scale_test_src",
            "//fboss/agent/test:agent_hw_test",
            "//fboss/agent:main-sai-{}".format(to_impl_lib_name(sai_impl)),
            "//fboss/agent/hw/sai/hw_test:sai_acl_utils{}".format(to_impl_suffix(sai_impl)),
            "//fboss/agent/platforms/sai:{}".format(sai_switch_dependent_name("sai_platform", sai_impl, True)),
            "//fboss/agent/test:mono_agent_ensemble",
            "//fboss/agent/hw/sai/hw_test:{}".format(sai_switch_dependent_name("agent_hw_test_thrift_handler", sai_impl, True)),
        ] + (["//fboss/agent/platforms/sai:bcm-required-symbols"] if sai_impl.name == "fake" or sai_impl.name == "leaba" else []),
    )
    for sai_impl in SAI_BRCM_IMPLS + SAI_LEABA_IMPLS
]
