// Copyright 2004-present Facebook. All Rights Reserved.

#include "fboss/agent/platforms/common/utils/Wedge40LedUtils.h"

#include <folly/Range.h>

namespace facebook::fboss {

folly::ByteRange Wedge40LedUtils::defaultLedCode() {
  /* Auto-generated using the Broadcom ledasm tool */
  // clang-format off
    static const std::vector<uint8_t> kWedge40LedCode {
        0x02, 0x00, 0x60, 0xD0, 0x77, 0x31, 0x86, 0xD0, 0x12, 0xE0, 0xF8, 0x15,
        0x1A, 0x00, 0x27, 0x87, 0x1A, 0x01, 0x71, 0x23, 0x1A, 0x02, 0x71, 0x2A,
        0x22, 0x00, 0x87, 0x06, 0xD0, 0xD2, 0x20, 0x74, 0x06, 0x3A, 0x40, 0x16,
        0xD1, 0x1A, 0x04, 0x27, 0x77, 0x1A, 0x16, 0xD1, 0x1A, 0x06, 0x27, 0x77,
        0x1A, 0x86, 0xD1, 0x71, 0x37, 0x77, 0x06, 0x86, 0xD2, 0x77, 0x06, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00
    };
  // clang-format on

  return folly::ByteRange(kWedge40LedCode.data(), kWedge40LedCode.size());
}

int Wedge40LedUtils::getPortIndex(PortID port) {
  return (int)port - 1;
}

size_t Wedge40LedUtils::getPortOffset(int index) {
  // The wedge hardware was originally set up to be used with the bottom-left
  // QSFP as port 1, top-left as port 2, etc.  However, in practice our DC team
  // preferred to have the top-left be port 1.
  //
  // Therefore, the software code uses the top-left port as port 1 everywhere.
  // However, the LED microprocessors and FPGA are still set up with
  // bottom-left as port 1.  As a result, we need to swap top and bottom port
  // numbers before sending them to the LED microprocessor.
  index ^= 0x04;

  return (0xe0 + index);
}

Wedge40LedUtils::LedState Wedge40LedUtils::getLEDState(bool up, bool adminUp) {
  return (up && adminUp) ? Wedge40LedUtils::LedState::ON
                         : Wedge40LedUtils::LedState::OFF;
}

} // namespace facebook::fboss
