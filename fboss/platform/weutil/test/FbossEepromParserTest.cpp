// (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.

#include <string>
#include <vector>

#include <folly/FileUtil.h>
#include <folly/testing/TestUtil.h>

#include <gtest/gtest.h>

#include "fboss/platform/weutil/FbossEepromParser.h"
#include "fboss/platform/weutil/Weutil.h"

namespace {
using EepromData = std::vector<uint8_t>;
using EepromContents = std::vector<std::pair<std::string, std::string>>;

// Based on V4 EEPROM (Check code is not modified)
EepromData eepromV4 = {
    0xfb, 0xfb, 0x04, 0xff, 0x01, 0x0d, 0x4d, 0x49, 0x4e, 0x49, 0x50, 0x41,
    0x43, 0x4b, 0x33, 0x5f, 0x4d, 0x43, 0x42, 0x02, 0x00, 0x03, 0x08, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x04, 0x0c, 0x31, 0x33, 0x32,
    0x30, 0x30, 0x30, 0x31, 0x36, 0x35, 0x30, 0x31, 0x20, 0x05, 0x0c, 0x31,
    0x33, 0x31, 0x30, 0x30, 0x30, 0x31, 0x32, 0x32, 0x30, 0x31, 0x20, 0x06,
    0x0c, 0x52, 0x33, 0x32, 0x31, 0x34, 0x47, 0x30, 0x30, 0x30, 0x32, 0x30,
    0x31, 0x07, 0x0d, 0x41, 0x30, 0x32, 0x31, 0x33, 0x32, 0x33, 0x31, 0x38,
    0x30, 0x30, 0x30, 0x36, 0x08, 0x01, 0x01, 0x09, 0x01, 0x00, 0x0a, 0x01,
    0x01, 0x0b, 0x01, 0x2d, 0x0c, 0x03, 0x43, 0x4c, 0x53, 0x0d, 0x08, 0x32,
    0x30, 0x32, 0x33, 0x30, 0x36, 0x31, 0x30, 0x0e, 0x03, 0x57, 0x55, 0x53,
    0x0f, 0x03, 0x43, 0x54, 0x48, 0x10, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x11, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00,
    0x00, 0x13, 0x03, 0x4d, 0x43, 0x42, 0xfa, 0x02, 0x44, 0x11};

EepromContents expectedContentsV4 = {
    {"Version", "4"},
    {"Product Name", "MINIPACK3_MCB"},
    {"Product Part Number", ""},
    {"System Assembly Part Number", "        "},
    {"Meta PCBA Part Number", "13200016501 "},
    {"Meta PCB Part Number", "13100012201 "},
    {"ODM/JDM PCBA Part Number", "R3214G000201"},
    {"ODM/JDM PCBA Serial Number", "A021323180006"},
    {"Product Production State", "1"},
    {"Product Version", "0"},
    {"Product Sub-Version", "1"},
    {"Product Serial Number", "-"},
    {"System Manufacturer", "CLS"},
    {"System Manufacturing Date", "20230610"},
    {"PCB Manufacturer", "WUS"},
    {"Assembled At", "CTH"},
    {"Local MAC", "00:00:00:00:00:00"},
    {"Extended MAC Base", "00:00:00:00:00:00"},
    {"Extended MAC Address Size", "0"},
    {"EEPROM location on Fabric", "MCB"},
    {"CRC16", "0x1144 (CRC Matched)"},
};

// Based on the Spec for V5 EEPROM:
// https://docs.google.com/document/d/1KX6q2mHSjFU2-eDt5HGidWSRXm5vFfAaZvdOG890eXY
EepromData eepromV5 = {
    0xfb, 0xfb, 0x05, 0xff, 0x01, 0x0d, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f,
    0x53, 0x51, 0x55, 0x45, 0x45, 0x5a, 0x45, 0x02, 0x08, 0x32, 0x30, 0x31,
    0x32, 0x33, 0x34, 0x35, 0x36, 0x03, 0x08, 0x53, 0x59, 0x53, 0x41, 0x31,
    0x32, 0x33, 0x34, 0x04, 0x0c, 0x50, 0x43, 0x42, 0x41, 0x31, 0x32, 0x33,
    0x34, 0x35, 0x36, 0x37, 0x20, 0x05, 0x0c, 0x50, 0x43, 0x42, 0x31, 0x32,
    0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x20, 0x06, 0x0c, 0x4d, 0x59, 0x4f,
    0x44, 0x4d, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x07, 0x0d, 0x4f,
    0x53, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42,
    0x08, 0x01, 0x01, 0x09, 0x01, 0x00, 0x0a, 0x01, 0x01, 0x0b, 0x0d, 0x50,
    0x53, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x41,
    0x0c, 0x07, 0x55, 0x4e, 0x41, 0x5f, 0x4d, 0x41, 0x53, 0x0d, 0x08, 0x32,
    0x30, 0x31, 0x33, 0x30, 0x32, 0x30, 0x33, 0x0e, 0x05, 0x54, 0x45, 0x52,
    0x5a, 0x4f, 0x0f, 0x09, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x54, 0x4f, 0x52,
    0x59, 0x10, 0x07, 0x42, 0x55, 0x44, 0x4f, 0x4b, 0x41, 0x4e, 0x11, 0x08,
    0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x01, 0x02, 0x12, 0x08, 0x12, 0x34,
    0x56, 0x78, 0x9a, 0xbc, 0x03, 0x04, 0x13, 0x08, 0x66, 0x55, 0x44, 0x33,
    0x22, 0x11, 0x02, 0x00, 0x14, 0x08, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54,
    0x00, 0x02, 0xfa, 0x02, 0xd5, 0xc6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

EepromContents expectedContentsV5 = {
    {"Version", "5"},
    {"Product Name", "FIRST_SQUEEZE"},
    {"Product Part Number", "20123456"},
    {"System Assembly Part Number", "SYSA1234"},
    {"Meta PCBA Part Number", "PCBA1234567 "},
    {"Meta PCB Part Number", "PCB12345678 "},
    {"ODM/JDM PCBA Part Number", "MYODM1234567"},
    {"ODM/JDM PCBA Serial Number", "OS123456789AB"},
    {"Product Production State", "1"},
    {"Product Version", "0"},
    {"Product Sub-Version", "1"},
    {"Product Serial Number", "PS1234567890A"},
    {"System Manufacturer", "UNA_MAS"},
    {"System Manufacturing Date", "20130203"},
    {"PCB Manufacturer", "TERZO"},
    {"Assembled At", "JUICETORY"},
    {"EEPROM location on Fabric", "BUDOKAN"},
    {"X86 CPU MAC Base", "11:22:33:44:55:66"},
    {"X86 CPU MAC Address Size", "258"},
    {"BMC MAC Base", "12:34:56:78:9a:bc"},
    {"BMC MAC Address Size", "772"},
    {"Switch ASIC MAC Base", "66:55:44:33:22:11"},
    {"Switch ASIC MAC Address Size", "512"},
    {"META Reserved MAC Base", "fe:dc:ba:98:76:54"},
    {"META Reserved MAC Address Size", "2"},
    {"CRC16", "0xd5c6 (CRC Matched)"},
};

// EEORM V5 with wrong CRC Programmed (same as the one above, but last 2 bytes
// have wrong CRC value programmed.)
EepromData eepromV5WrongCrc = {
    0xfb, 0xfb, 0x05, 0xff, 0x01, 0x0d, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f,
    0x53, 0x51, 0x55, 0x45, 0x45, 0x5a, 0x45, 0x02, 0x08, 0x32, 0x30, 0x31,
    0x32, 0x33, 0x34, 0x35, 0x36, 0x03, 0x08, 0x53, 0x59, 0x53, 0x41, 0x31,
    0x32, 0x33, 0x34, 0x04, 0x0c, 0x50, 0x43, 0x42, 0x41, 0x31, 0x32, 0x33,
    0x34, 0x35, 0x36, 0x37, 0x20, 0x05, 0x0c, 0x50, 0x43, 0x42, 0x31, 0x32,
    0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x20, 0x06, 0x0c, 0x4d, 0x59, 0x4f,
    0x44, 0x4d, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x07, 0x0d, 0x4f,
    0x53, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42,
    0x08, 0x01, 0x01, 0x09, 0x01, 0x00, 0x0a, 0x01, 0x01, 0x0b, 0x0d, 0x50,
    0x53, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x41,
    0x0c, 0x07, 0x55, 0x4e, 0x41, 0x5f, 0x4d, 0x41, 0x53, 0x0d, 0x08, 0x32,
    0x30, 0x31, 0x33, 0x30, 0x32, 0x30, 0x33, 0x0e, 0x05, 0x54, 0x45, 0x52,
    0x5a, 0x4f, 0x0f, 0x09, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x54, 0x4f, 0x52,
    0x59, 0x10, 0x07, 0x42, 0x55, 0x44, 0x4f, 0x4b, 0x41, 0x4e, 0x11, 0x08,
    0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x01, 0x02, 0x12, 0x08, 0x12, 0x34,
    0x56, 0x78, 0x9a, 0xbc, 0x03, 0x04, 0x13, 0x08, 0x66, 0x55, 0x44, 0x33,
    0x22, 0x11, 0x02, 0x00, 0x14, 0x08, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54,
    0x00, 0x02, 0xfa, 0x02, 0xa6, 0xb7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

EepromContents expectedContentsV5WrongCrc = {
    {"Version", "5"},
    {"Product Name", "FIRST_SQUEEZE"},
    {"Product Part Number", "20123456"},
    {"System Assembly Part Number", "SYSA1234"},
    {"Meta PCBA Part Number", "PCBA1234567 "},
    {"Meta PCB Part Number", "PCB12345678 "},
    {"ODM/JDM PCBA Part Number", "MYODM1234567"},
    {"ODM/JDM PCBA Serial Number", "OS123456789AB"},
    {"Product Production State", "1"},
    {"Product Version", "0"},
    {"Product Sub-Version", "1"},
    {"Product Serial Number", "PS1234567890A"},
    {"System Manufacturer", "UNA_MAS"},
    {"System Manufacturing Date", "20130203"},
    {"PCB Manufacturer", "TERZO"},
    {"Assembled At", "JUICETORY"},
    {"EEPROM location on Fabric", "BUDOKAN"},
    {"X86 CPU MAC Base", "11:22:33:44:55:66"},
    {"X86 CPU MAC Address Size", "258"},
    {"BMC MAC Base", "12:34:56:78:9a:bc"},
    {"BMC MAC Address Size", "772"},
    {"Switch ASIC MAC Base", "66:55:44:33:22:11"},
    {"Switch ASIC MAC Address Size", "512"},
    {"META Reserved MAC Base", "fe:dc:ba:98:76:54"},
    {"META Reserved MAC Address Size", "2"},
    {"CRC16", "0xa6b7 (CRC Mismatch. Expected 0xd5c6)"},
};

std::vector<std::pair<EepromData, EepromContents>> EepromTestInfo = {
    {eepromV4, expectedContentsV4},
    {eepromV5, expectedContentsV5},
    {eepromV5WrongCrc, expectedContentsV5WrongCrc},
};

} // namespace

namespace facebook::fboss::platform {

TEST(FbossEepromParserTest, Basic) {
  for (auto& [eepromData, expectedContents] : EepromTestInfo) {
    folly::test::TemporaryDirectory tmpDir = folly::test::TemporaryDirectory();
    std::string fileName = tmpDir.path().string() + "/eepromContent";
    folly::writeFile(eepromData, fileName.c_str());
    FbossEepromParser parser(fileName, 0);
    auto parsedContents = parser.getContents();
    ASSERT_EQ(expectedContents.size(), parsedContents.size());
    for (size_t i = 0; i < expectedContents.size(); i++) {
      EXPECT_EQ(parsedContents[i], expectedContents[i]);
    }
  }
}

TEST(FbossEepromParserTest, Offset) {
  for (auto& [eepromData, expectedContents] : EepromTestInfo) {
    folly::test::TemporaryDirectory tmpDir = folly::test::TemporaryDirectory();
    std::string fileName = tmpDir.path().string() + "/eepromContent";
    folly::writeFile(eepromData, fileName.c_str());
    auto weutilInstanceNoOffset = createWeUtilIntf("", fileName, 0);
    auto parsedContentsNoOffset = weutilInstanceNoOffset->getContents();

    folly::writeFile(eepromData, fileName.c_str(), O_WRONLY | O_APPEND);
    auto weutilInstanceWithOffset =
        createWeUtilIntf("", fileName, eepromData.size());
    auto parsedContentsWithOffset = weutilInstanceWithOffset->getContents();

    ASSERT_EQ(expectedContents.size(), parsedContentsNoOffset.size());
    ASSERT_EQ(expectedContents.size(), parsedContentsWithOffset.size());
    for (size_t i = 0; i < expectedContents.size(); i++) {
      EXPECT_EQ(parsedContentsNoOffset[i], expectedContents[i]);
      EXPECT_EQ(parsedContentsWithOffset[i], expectedContents[i]);
    }

    EepromData junkPrefix;
    for (int i = 0; i < 77; i++) {
      junkPrefix.push_back(0xff);
    }
    folly::writeFile(junkPrefix, fileName.c_str());
    folly::writeFile(eepromData, fileName.c_str(), O_WRONLY | O_APPEND);
    weutilInstanceWithOffset =
        createWeUtilIntf("", fileName, junkPrefix.size());
    parsedContentsWithOffset = weutilInstanceWithOffset->getContents();

    ASSERT_EQ(expectedContents.size(), parsedContentsWithOffset.size());
    for (size_t i = 0; i < expectedContents.size(); i++) {
      EXPECT_EQ(parsedContentsWithOffset[i], expectedContents[i]);
    }
  }
}

} // namespace facebook::fboss::platform
